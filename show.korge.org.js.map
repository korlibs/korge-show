{"version":3,"file":"show.korge.org.js","mappings":"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CpE,EtI+DtD,EkIGkB,aACN,cACI,cA0ET,2B,sB9BjClB,cAA4C,GAA5C,cAAmF,GAAnF,W,C8BoCQ,YAAY,SAAZ,GlIRs3iB,I,IAAA,KAAziiB,MmG/BlT,G,E+BsDzB,O/BtDyB,Y,mD+BoFw+D,yB,iBAAA,M/BpB9/D,IA7IV,GA6IoB,IAAI,SA7D2B,M,oB+B0D7C,Y,uD/B1D6C,Y,G+BiF2lE,wB,iBAAA,M/BpBpoE,IA7IV,GA6IoB,IAAI,Q,sBoCtJvB,aAA2B,EAAO,EAAQ,EAAS,E,kBA0B/B,OAAH,QAAG,IAlEhB,E,GAkEa,yB,gDAAG,E,gBAAA,OAAH,QAAG,IAlEhB,E,GAkEa,yB,kEACO,OAAH,QAAG,IAnEpB,E,GAmEiB,6B,gDAAG,E,gBAAA,OAAH,QAAG,IAnEpB,E,GAmEiB,6B,sMAbX,EA6EkuH,M,OAAvB,K,sBAAyC,c,mDAAA,Y,2JA7EpvH,EA6EkuH,M,OAAvB,K,sBAAyC,c,mDAAA,Y,2JA7EpvH,EA6EkuH,M,OAAvB,K,sBAAyC,c,mDAAA,Y,2JA7EpvH,EA6EkuH,M,OAAvB,K,sBAAyC,c,mDAAA,Y,2JA7EpvH,EA6EkuH,M,OAAvB,K,sBAAyC,c,mDAAA,Y,2BAlF9vH,aAAO,EAAO,GADd,aAGe,2BAEa,a,MvIwGw8Z,K6HjJ/8Z,OAqCW,EAAO,EWLpC,YxIkBmB,MwIvDiH,KAChF,ExI2EhD,EuItBkB,a,MvIgG28Z,K6HtIr+Z,OM2CK,SNfJ,EAEC,G7HS8F,MmI1C/C,KACW,EnI8DpD,EuIrBW,a,MvI+Fk9Z,K6HzI98Z,GSsCnB,STzCD,EAAuB,EAGH,iB7H4CZ,MsI7CuH,KACpE,EtI+DtD,EuIpBY,a,MvI8Fi9Z,K6HpFl8Z,OOnBJ,WAMQ,WACjB,WAAsC,KAClB,WACR,KACL,WPIL,KACzB,M7HJ+B,MoICY,KAE6D,EpIe/F,EuInBgB,a,QE5DwE,EAA5B,QAgBgmD,G,EAAO,K,mBF8ChoD,Q,QAAtB,a,ME9D2E,EAA5B,QAgBkqD,E,sCF+CvrD,Q,ME/C8rD,QF+CptD,aAEC,qBvIwFi2iB,SArD7xiB,MmGhBtD,E,oBoCuBxB,Y,uDpCvBwB,Y,GoC2C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nrL,EAYiqL,M,OAAvB,K,sBAAyC,c,mDAAA,Y,2JAZnrL,EAYiqL,M,OAAvB,K,sBAAyC,c,mDAAA,Y,yBA9DvrL,aAAO,EAAO,GAHd,a,QPjB+F,EAA5B,QAgBoM,G,EAAO,K,mBOKjO,Q,QAAtB,a,MPrBwE,EAA5B,QAgByQ,E,sCOM3R,Q,MPNkS,QOMxT,a,MhJmIy8Z,K6HjJ/8Z,OAaL,EAAO,EWVjB,YxIcD,MwItBkI,KAChF,ExI2EhD,EgJvDkB,a,MhJiI28Z,K6HpFl8Z,OOjDZ,WAoCgB,WACjB,WAAsC,KAClB,WACR,KACL,WPIL,KACzB,M7HxCqF,MoIqC1C,KAE6D,EpIe/F,EgJtDgB,aACI,sBhJ+H+1iB,SA3Ht1iB,MmGLxC,E,oB6CKmB,Y,uD7CLnB,Y,G6CyD29L,yB,iBAAA,M7CwG98L,IA7IV,GA6IoB,IAAI,SAhKI,M,oB6COb,Y,uD7CPa,Y,G6CwDkkM,wB,iBAAA,M7CwGplM,IA7IV,GA6IoB,IAAI,SA9JW,M,oB6CQnB,Y,uD7CRmB,Y,G6CsDisM,yB,iBAAA,M7CwG1tM,IA7IV,GA6IoB,IAAI,SA1JxB,M,oB6COsB,Y,uD7CPtB,Y,G6CkDkyN,+B,iBAAA,M7CwGxxN,IA7IV,GA6IoB,IAAI,S6CzHE,oB,sBCjCzB,aAAO,EAAO,GAES,4E,QMrBgD,EAAX,GAA5C,OAe2jB,EAAO,EAAQ,GAA9B,MNS3iB,aACL,Y,EAAA,W,GAAA,gC,8DjJmHw9Z,K6HpJ78Z,OAgCU,EAAK,G7HUf,MwJ/C4F,KACjE,ExJ8E3C,EiJxCiB,a,MbKd,apI6G09Z,K6HpFl8Z,OA7BT,EAAa,GOKf,WAYoC,KAClB,WACR,KACL,WPIL,KACzB,M7HkBW,GoIrBgC,KAE6D,EpIe/F,EiJtC0B,aAChB,kBAAmB,WAAU,WAAU,KAAM,YAI1C,W,sBAAA,wB,iDAAA,aACI,W,sBAAA,4B,iDAAA,aACN,W,sBAAA,wB,iDAAA,aACiC,W,sBAAA,mC,iBAAA,K,CAAA,aACH,W,sBAAA,gC,iBAAA,K,CAAA,aACD,W,sBAAA,+B,iBAAA,K,CAAA,aACf,W,sBAAA,kC,iDAAA,aACL,W,sBAAA,kC,iDAA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AAL,EAAK,Y,KACC,EACO,I,SAAL,EAAK,O,KACP,E,EAAM,O,WACN,E,EAAM,Q,WACN,E,EAAM,Q,WACN,E,EAAM,Q,cACE,KAAU,G,eAGlB,E,KAAe,E,KAAwB,E,KAAgB,E,KAAyB,EACzE,I,SAAL,EAAK,O,KACP,E,EAAM,Q,WACN,E,EAAM,O,WACN,E,EAAM,O,WACN,E,EAAM,O,cACE,KAAU,G,eAGlB,EACO,I,SAAL,EAAK,O,KACP,E,EAAM,M,WACN,E,EAAM,Q,WACN,E,EAAM,Q,WACN,E,EAAM,Q,cACE,KAAU,G,2BAKrC,Q,gBChMoD,OAAnB,OAAG,E,gBAMgC,OAA9B,OAAM,EAAkB,I,8BCtK/B,W,eAAF,a,sBA2TQ,eACE,gBACF,iBACV,aACD,aACC,aACD,aACI,aACC,aACD,aACK,aACF,aACR,aACD,aACM,eACU,eACV,eACU,eACV,eACU,eACV,eACU,eACD,eACV,iBACM,iBACI,iBACE,iBACP,iBACQ,iBACR,iBACA,iBACE,iBACA,iBACD,iBACU,iBACV,iBACU,iBACb,iBACC,iBACQ,iBACA,iBACQ,iBACjB,iBACA,iBACC,iBACD,iBACC,iBACS,iBAChB,gBACD,gBACU,gBACJ,gBACA,iBACD,gBACJ,gBACC,gBACM,gBACF,gBACE,gBACO,iBACK,iBACT,iBACP,aACI,gBACC,gBACI,gBACJ,gBACX,gBACC,gBACO,gBACc,iBACA,iBACV,gBACJ,gBACC,gBACI,gBACE,gBACP,gBACS,gBACP,gBACA,gBACW,gBACA,gBACZ,gBACO,gBACD,gBACA,iBACA,iBACW,iBACA,iBACZ,iBACO,iBACD,iBACd,gBACG,gBACM,gBACF,gBACC,gBACF,gBACE,gBACC,gBACJ,gBACL,gBACE,gBACD,gBACC,gBACA,gBACE,gBACQ,iBACC,iBACH,iBACJ,iBACP,iBACc,iBACC,iBACQ,iBACJ,iBACjB,gBACF,gBACD,gBACc,iBAChB,gBACS,gBACR,gBACS,gBACX,gBACS,gBACP,gBACA,gBACU,gBACV,gBACF,gBACC,gBACK,gBACM,gBACO,iBACA,iBACF,iBACL,iBACF,iBACK,iBACQ,iBACP,iBACa,iBACF,iBACP,iBACK,iBACjB,iBACE,iBACF,iBACI,iBACC,iBACD,iBACU,iBACR,iBACU,iBACH,iBACT,iBACV,eACD,eACC,eACC,eACC,eACC,eACF,eACA,eACF,gBACG,gBACH,gBACA,gBACE,gBACG,iBACA,iBACH,gBACE,gBACD,gBACG,gBACH,gBACD,gBACgB,gBACD,gBACA,gBACD,gBACF,iBACA,iBACJ,iBACA,iBACA,iBACP,gBACS,iBACQ,iBACG,iBACA,iBACA,iBACA,iBACA,iBACA,iBACF,iBACjB,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACC,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,gBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACK,iBACR,iBACO,iBACE,iBACL,iBACA,iBACA,iBACF,iBACA,iBACA,iBACJ,iBACK,iBACA,iBACA,iBACC,iBACA,iBACA,iBACA,iBACE,iBACe,iBACH,iBACE,iBACF,iBACM,iBACH,iBACO,iBACJ,iBACE,iBAClB,iBACC,iBACK,iBACL,iBACM,iBACI,iBAChB,iBACG,iBACF,iBACH,iBACG,iBACF,iBACG,iBACC,iBACP,iBACE,iBACD,iBACW,iBACJ,gBACC,iBACI,iBACC,iBACS,iBACP,iBACE,iBACD,iBACC,iBACA,iBACE,iBACS,iBACA,iBACE,iBACQ,iBAC3B,iBACD,iBACG,iBACH,iBACE,iBACd,aACgB,iBACa,iBACQ,iBACR,iBACV,iBACJ,iBACC,iBACC,iBACQ,gBACP,iBAGpB,iBAIS,gBACC,gBACC,gBACF,gBACC,gBAGa,iBAGA,gB,sDAzoBnD,KAAsC,2BAQL,iB,sBA0qBK,gB,4DA5BtC,KAAqC,cAGO,gBAmBS,e,EAAK,K,WAElD,QAA0B,QAA1B,EAAC,yBAAiE,QAA1B,EAAC,uB,0BnNhqBjB,WoNekD,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gB,M,WAtE9zgB,E,OAsEmghB,M,WArEnghB,E,OAqEyjhB,M,mBApE7khB,Q,gBAEqC,I,SAAA,Q,KACnB,E,OAiEklgB,I,WAhEllgB,E,OAgEgrgB,I,WA/DhrgB,E,OA+D42f,E,WA9D52f,E,OA8DsogB,I,WA7DtogB,E,OA6DougB,I,WA5DpugB,E,OA4DwigB,I,WA3DxigB,E,OA2D08f,I,WA1D18f,E,OA0Do/f,I,WAzDp/f,E,OAyDs5f,I,WAxDt5f,E,OAwDw0f,E,mBAvD11f,Q,gBApDqC,I,SAAA,Q,KACnB,E,OA0Gy7tB,I,WAzGz7tB,E,OAyGmvtB,I,WAxGnvtB,E,OAwGk0tB,I,WAvGl0tB,E,OAuGk5tB,I,WAtGl5tB,E,OAsG6stB,I,WArG7stB,E,OAqG0xtB,I,WApG1xtB,E,OAoGwqtB,I,WAnGxqtB,E,OAmG22tB,I,mBAlG73tB,Q,gBA8FqC,I,SAAA,Q,KACpB,E,OAGsliB,M,WAFtliB,E,OAEiiiB,M,mBADljiB,Q,gBA/FkC,I,SAAA,Q,KACnB,E,OA+Fqif,E,WA9Frif,E,OA8Fgqf,E,WA7Fhqf,E,OA6Fqnf,E,WA5Frnf,E,OA4F2kf,E,WA3F3kf,E,OA2Fyvf,E,WA1Fzvf,E,OA0Fsyf,E,WAzFtyf,E,OAyF0sf,E,mBAxFztf,Q,gBAEmC,I,SAAA,Q,KACnB,E,OAqFy9pB,K,WApFz9pB,E,OAoF8iqB,K,WAnF9iqB,E,OAmF+nqB,K,mBAlF/oqB,Q,gBAoC8B,I,SAAA,Q,KACd,E,OA6CkluB,K,WA5ClluB,E,OA4C6suB,M,WA3C7suB,E,OA2C6iuB,K,WA1C7iuB,E,OA0CmquB,M,WAzCnquB,E,OAyCynuB,K,WAxCznuB,E,OAwCg+tB,K,WAvCh+tB,E,OAuCwguB,K,WAtCxguB,E,OAsC00f,E,mBArC11f,Q,gBAuBoC,I,SAAL,EAAK,Y,KACzB,E,OAa8s0B,M,WAZ9s0B,E,OAYg7pB,K,WAXh7pB,E,OAW89pB,K,WAV99pB,E,OAUogqB,K,WATpgqB,E,OASmjqB,K,WARnjqB,E,OAQooqB,K,WAPpoqB,E,OAO0qqB,K,mBANrrqB,Q,gBA7B4C,I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aAAc,GAFd,YACA,W,sBAcgC,aAAoB,QAClB,mB,sEA1ByB,aAAc,G,MvfJzB,EAAnB,EAAmB,WAAyB,EAAX,MAAd,EAAc,KAAd,EAAc,WufKiB,W,uICoD3E,O,WrgBrDkG,EAAvC,GAAiB,MA6DwvB,GA7DvuB,M,EqgBqDvE,GAAtB,E,qBAtEiF,Y,gBAGS,Y,gBAMI,mC,gBAGV,kC,gBAGG,kC,gBAGN,kC,gBAGM,kC,gBAGG,kC,gBAGD,qB,gBAGC,kC,gBAGQ,yB,gBAGS,qB,gBAGH,qB,gBAGF,qB,gBAGI,qB,gBAGN,qB,gBAGF,qB,gBAGU,qB,gBAGG,qB,6Bxf1DlF,OwfClB,mBAA8D,MAAM,I,MxfI3E,OwfDU,mBAAiE,SAAS,IAGzE,e,MxfEmF,QwfCnF,mBAAmE,UAAU,I,MxfIvD,OwfDzB,mBAA+D,OAAO,I,MxfK7D,OwfFR,mBAAgE,QAAQ,I,MxfM9D,OwfHZ,mBAA8D,MAAM,I,MxfQ7D,OwfLL,mBAAgE,QAAQ,I,MxfWrF,OwfRc,mBAAiE,SAAS,I,MxfWE,MwfR7E,mBAAkE,QAAQ,I,MxfQmJ,OwfL5N,mBAAiE,SAAS,I,MxfKsS,MwfF7W,mBAAmE,YAAY,I,MxfEgc,MwfC5gB,mBAAsE,eAAe,I,MxfD4lB,YwfIprB,mBAAyE,YAAY,I,MxfJiwB,UwfOt1B,mBAAuE,YAAY,I,MxfPq6B,WwfUv/B,mBAAyE,aAAa,I,MxfVmkC,Wwfa3pC,mBAAuE,WAAW,I,MxfbuuC,MwfgBxzC,mBAAmE,YAAY,I,MxfhBu4C,awfmBr9C,mBAA2E,aAAa,I,MxfnBuiD,awfsB9nD,mBAA4E,cAAc,G,yDCzDjH,OAAW,MAAY,QAAQ,G,YAQwD,I,SAAT,EAAS,Q,KACvF,E,EAAK,GAAW,EAAS,I,WACzB,E,EzfCY,K,gBAEH,OyfDZ,Q,CAXO,CzfGH,GyfDG,GzfEyC,E,mByf6CzC,IAAW,OAAc,OzffusC,UyfiBpuC,I,EAAA,EzfjB4xC,EyfiB1vC,W,GAEX,MAAZ,EAAY,C,SACQ,MAAvB,EAAS,SAAc,CACvB,MAAa,OAAiB,GAC9B,WAAsB,E,EACtB,C,QAEA,EAAS,S,EANY,C,QASzB,OAAiB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","sources":["webpack://show.korge.org/webpack/universalModuleDefinition","webpack://show.korge.org/../../../../../Trace.common.kt","webpack://show.korge.org/../../../../../AtomicFU.kt","webpack://show.korge.org/../../../../../ArrayList.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/math.kt","webpack://show.korge.org/../../../../../ArrayList2.kt","webpack://show.korge.org/../../../../../ArrayListExt.kt","webpack://show.korge.org/../../../../../CaseInsensitiveStringMap.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Maps.kt","webpack://show.korge.org/../../../../../CopyOnWriteFrozenMap.kt","webpack://show.korge.org/../../../../../Deque.kt","webpack://show.korge.org/../../../../../src/generated/_ComparisonsJs.kt","webpack://show.korge.org/../../../../../Js.kt","webpack://show.korge.org/../../../../../builtins/Library.kt","webpack://show.korge.org/../../../../../GenericSubList.kt","webpack://show.korge.org/../../../../../HistoryStack.kt","webpack://show.korge.org/../../../../../IntMap.kt","webpack://show.korge.org/../../../../../IntSet.kt","webpack://show.korge.org/../../../../../IteratorExt.kt","webpack://show.korge.org/../../../../../ListReader.kt","webpack://show.korge.org/../../../../../Pool.kt","webpack://show.korge.org/../../../../../PriorityQueue.kt","webpack://show.korge.org/../../../../../Queue.kt","webpack://show.korge.org/../../../../../RingBuffer.kt","webpack://show.korge.org/../../../../../Stack.kt","webpack://show.korge.org/../../../../../_Delegates.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/dynamic.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/Standard.kt","webpack://show.korge.org/../../../../../_Extensions.kt","webpack://show.korge.org/../../../../../_GenericSort.kt","webpack://show.korge.org/../../../../../FakeMutable.kt","webpack://show.korge.org/../../../../../internal.kt","webpack://show.korge.org/../../../../../src/generated/_ArraysJs.kt","webpack://show.korge.org/../../../../../runtime/kotlinHacks.kt","webpack://show.korge.org/../../../../../KdsAtomicRef.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/string.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Collections.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/HashCode.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/MutableCollections.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Collections.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Iterables.kt","webpack://show.korge.org/../../../../../_FastArrayIterators.kt","webpack://show.korge.org/../../../../../LockJs.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/Preconditions.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections.kt","webpack://show.korge.org/../../../../../Frozen.kt","webpack://show.korge.org/../../../../../FastArrayList.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Maps.kt","webpack://show.korge.org/../../../../../FastMap.kt","webpack://show.korge.org/../../../../../DateTime.kt","webpack://show.korge.org/../../../../../Frequency.kt","webpack://show.korge.org/../../../../../Measure.kt","webpack://show.korge.org/../../../../../TimeProvider.kt","webpack://show.korge.org/../../../../../TimeSpan.kt","webpack://show.korge.org/../../../../../NiceStr.kt","webpack://show.korge.org/../../../../../HRTimeSpan.kt","webpack://show.korge.org/../../../../../KlockInternal.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/Lazy.kt","webpack://show.korge.org/../../../../../AtomicsPlat.kt","webpack://show.korge.org/../../../../../PerformanceCounter.kt","webpack://show.korge.org/../../../../../<js-code>","webpack://show.korge.org/../../../../../Console.kt","webpack://show.korge.org/../../../../../Logger.kt","webpack://show.korge.org/../../../../../KloggerAtomicRefJs.kt","webpack://show.korge.org/../../../../../KloggerAtomicRef.kt","webpack://show.korge.org/../../../../../ConsoleJs.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/StringBuilder.kt","webpack://show.korge.org/../../../../../DefaultLogOutput.kt","webpack://show.korge.org/../../../../../Arch.kt","webpack://show.korge.org/../../../../../ArrayFill.kt","webpack://show.korge.org/../../../../../Arrays.kt","webpack://show.korge.org/../../../../../Bits.kt","webpack://show.korge.org/../../../../../Buffer.kt","webpack://show.korge.org/../../../../../BufferJs.kt","webpack://show.korge.org/../../../../../ByteArrayBuilder.kt","webpack://show.korge.org/../../../../../ByteArrayReadWrite.kt","webpack://show.korge.org/../../../../../Endian.kt","webpack://show.korge.org/../../../../../currentJs.kt","webpack://show.korge.org/../../../../../FBuffer.kt","webpack://show.korge.org/../../../../../FixedSizeByteArrayBuilder.kt","webpack://show.korge.org/../../../../../Numbers.kt","webpack://show.korge.org/../../../../../ByteUnits.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/org.w3c/org.khronos.webgl.kt","webpack://show.korge.org/../../../../../BufferUnsigned.kt","webpack://show.korge.org/../../../../../Os.kt","webpack://show.korge.org/../../../../../Platform.kt","webpack://show.korge.org/../../../../../Runtime.kt","webpack://show.korge.org/../../../../../ArrayAdd.kt","webpack://show.korge.org/../../../../../ArrayCopy.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/numbers.kt","webpack://show.korge.org/../../../../../runtime/long.kt","webpack://show.korge.org/../../../../../Component.kt","webpack://show.korge.org/../../../../../Views.kt","webpack://show.korge.org/../../../../../UIVerticalList.kt","webpack://show.korge.org/../../../../../ViewFileRef.kt","webpack://show.korge.org/../../../../../View.kt","webpack://show.korge.org/../../../../../Filter.kt","webpack://show.korge.org/../../../../../Korge.kt","webpack://show.korge.org/../../../../../EventDispatcher.kt","webpack://show.korge.org/../../../../../KorgeReload.kt","webpack://show.korge.org/../../../../../Animator.kt","webpack://show.korge.org/../../../../../BaseView.kt","webpack://show.korge.org/../../../../../BitmapFontExt.kt","webpack://show.korge.org/../../../../../BatchBuilder2D.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Strings.kt","webpack://show.korge.org/../../../../../ColorTransform.kt","webpack://show.korge.org/../../../../../OutOverDecorator.kt","webpack://show.korge.org/../../../../../StageComponent.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Sets.kt","webpack://show.korge.org/../../../../../ObservableProperty.kt","webpack://show.korge.org/../../../../../ToUiEditableValueExt.kt","webpack://show.korge.org/../../../../../UiBooleanEditableValue.kt","webpack://show.korge.org/../../../../../Bitmap.kt","webpack://show.korge.org/../../../../../UiCollapsibleSection.kt","webpack://show.korge.org/../../../../../Context2d.kt","webpack://show.korge.org/../../../../../UiButton.kt","webpack://show.korge.org/../../../../../UiContainer.kt","webpack://show.korge.org/../../../../../UiEditableValue.kt","webpack://show.korge.org/../../../../../UiListEditableValue.kt","webpack://show.korge.org/../../../../../UiMultipleItemEditableValue.kt","webpack://show.korge.org/../../../../../UiNumberEditableValue.kt","webpack://show.korge.org/../../../../../UiRowEditableValue.kt","webpack://show.korge.org/../../../../../UiTextEditableValue.kt","webpack://show.korge.org/../../../../../Input.kt","webpack://show.korge.org/../../../../../KeysEvents.kt","webpack://show.korge.org/../../../../../MouseDragComponent.kt","webpack://show.korge.org/../../../../../MouseEvents.kt","webpack://show.korge.org/../../../../../TouchEvents.kt","webpack://show.korge.org/../../../../../TouchEventsRecognizers.kt","webpack://show.korge.org/../../../../../Angle.kt","webpack://show.korge.org/../../../../../DefaultViewport.kt","webpack://show.korge.org/../../../../../LoggerExt.kt","webpack://show.korge.org/../../../../../AgBitmapTextureManager.kt","webpack://show.korge.org/../../../../../Texture.kt","webpack://show.korge.org/../../../../../AgBufferManager.kt","webpack://show.korge.org/../../../../../AgFastSet.kt","webpack://show.korge.org/../../../../../DefaultShaders.kt","webpack://show.korge.org/../../../../../LineRenderBatcher.kt","webpack://show.korge.org/../../../../../shaders.kt","webpack://show.korge.org/../../../../../RenderContext.kt","webpack://show.korge.org/../../../../../RenderContext2D.kt","webpack://show.korge.org/../../../../../TexturedVertexArray.kt","webpack://show.korge.org/../../../../../ResourcesRoot.kt","webpack://show.korge.org/../../../../../DebugBitmapFont.kt","webpack://show.korge.org/../../../../../Module.kt","webpack://show.korge.org/../../../../../Scene.kt","webpack://show.korge.org/../../../../../AsyncInjector.kt","webpack://show.korge.org/../../../../../SceneContainer.kt","webpack://show.korge.org/../../../../../Transition.kt","webpack://show.korge.org/../../../../../Stats.kt","webpack://show.korge.org/../../../../../TextEditController.kt","webpack://show.korge.org/../../../../../DebugVertexView.kt","webpack://show.korge.org/../../../../../Container.kt","webpack://show.korge.org/../../../../../TimerComponents.kt","webpack://show.korge.org/../../../../../tween.kt","webpack://show.korge.org/../../../../../runtime/coroutineInternalJS.kt","webpack://show.korge.org/../../../../../tweenbase.kt","webpack://show.korge.org/../../../../../UIButton.kt","webpack://show.korge.org/../../../../../NinePatchEx.kt","webpack://show.korge.org/../../../../../Text.kt","webpack://show.korge.org/../../../../../Bitmaps.kt","webpack://show.korge.org/../../../../../Image.kt","webpack://show.korge.org/../../../../../UICheckBox.kt","webpack://show.korge.org/../../../../../SolidRect.kt","webpack://show.korge.org/../../../../../UIObservable.kt","webpack://show.korge.org/../../../../../UIComboBox.kt","webpack://show.korge.org/../../../../../UISkins.kt","webpack://show.korge.org/../../../../../UIScrollable.kt","webpack://show.korge.org/../../../../../UIContainerLayouts.kt","webpack://show.korge.org/../../../../../UIDirection.kt","webpack://show.korge.org/../../../../../UIEditableNumber.kt","webpack://show.korge.org/../../../../../UIText.kt","webpack://show.korge.org/../../../../../UITextInput.kt","webpack://show.korge.org/../../../../../UIFocusManager.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/comparisons/Comparisons.kt","webpack://show.korge.org/../../../../../UIProperty.kt","webpack://show.korge.org/../../../../../UIPropertyRow.kt","webpack://show.korge.org/../../../../../FixedSizeContainer.kt","webpack://show.korge.org/../../../../../RenderableView.kt","webpack://show.korge.org/../../../../../ClipContainer.kt","webpack://show.korge.org/../../../../../UIView.kt","webpack://show.korge.org/../../../../../UIWindow.kt","webpack://show.korge.org/../../../../../CancellableExt.kt","webpack://show.korge.org/../../../../../Anchorable.kt","webpack://show.korge.org/../../../../../BaseGraphics.kt","webpack://show.korge.org/../../../../../BlendMode.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Arrays.kt","webpack://show.korge.org/../../../../../Circle.kt","webpack://show.korge.org/../../../../../ShapeView.kt","webpack://show.korge.org/../../../../../CpuGraphics.kt","webpack://show.korge.org/../../../../../CustomContextRenderizableView.kt","webpack://show.korge.org/../../../../../DummyView.kt","webpack://show.korge.org/../../../../../FpsOverlay.kt","webpack://show.korge.org/../../../../../Matrix.kt","webpack://show.korge.org/../../../../../Graphics.kt","webpack://show.korge.org/../../../../../GpuShapeView.kt","webpack://show.korge.org/../../../../../ShapeBuilder.kt","webpack://show.korge.org/../../../../../RectBase.kt","webpack://show.korge.org/../../../../../Stage.kt","webpack://show.korge.org/../../../../../ViewDebugExtra.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/Strings.kt","webpack://show.korge.org/../../../../../VectorArrayList.kt","webpack://show.korge.org/../../../../../FSprites.kt","webpack://show.korge.org/../../../../../BlurFilter.kt","webpack://show.korge.org/../../../../../ComposedFilter.kt","webpack://show.korge.org/../../../../../Convolute3Filter.kt","webpack://show.korge.org/../../../../../DirectionalBlurFilter.kt","webpack://show.korge.org/../../../../../IdentityFilter.kt","webpack://show.korge.org/../../../../../PageFilter.kt","webpack://show.korge.org/../../../../../ShaderFilter.kt","webpack://show.korge.org/../../../../../SwizzleColorFilter.kt","webpack://show.korge.org/../../../../../TransitionFilter.kt","webpack://show.korge.org/../../../../../Paint.kt","webpack://show.korge.org/../../../../../ViewFilter.kt","webpack://show.korge.org/../../../../../AG.kt","webpack://show.korge.org/../../../../../WaveFilter.kt","webpack://show.korge.org/../../../../../InternalViewAutoscaling.kt","webpack://show.korge.org/../../../../../BoundsBuilder.kt","webpack://show.korge.org/../../../../../GpuShapeViewCommands.kt","webpack://show.korge.org/../../../../../GpuShapeViewPrograms.kt","webpack://show.korge.org/../../../../../KorgeReload_getReloadedClass.kt","webpack://show.korge.org/../../../../../EventListener.kt","webpack://show.korge.org/../../../../../Once.kt","webpack://show.korge.org/../../../../../Events.kt","webpack://show.korge.org/../../../../../Shape2d.kt","webpack://show.korge.org/../../../../../VectorPath.kt","webpack://show.korge.org/../../../../../Bezier.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/Result.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/coroutines/Continuation.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/properties/PropertyReferenceDelegates.kt","webpack://show.korge.org/../../../../../Ellipse.kt","webpack://show.korge.org/../../../../../Rectangle.kt","webpack://show.korge.org/../../../../../ViewBackdropFilter.kt","webpack://show.korge.org/../../../../../AGListExt.kt","webpack://show.korge.org/../../../../../UIDefaults.kt","webpack://show.korge.org/../../../../../IKmlGl.kt","webpack://show.korge.org/../../../../../GlslGenerator.kt","webpack://show.korge.org/../../../../../Length.kt","webpack://show.korge.org/../../../../../KmlGl.kt","webpack://show.korge.org/../../../../../KmlGlExt.kt","webpack://show.korge.org/../../../../../KmlBufferExt.kt","webpack://show.korge.org/../../../../../HashcodeExt.kt","webpack://show.korge.org/../../../../../AGList.kt","webpack://show.korge.org/../../../../../AGOpengl.kt","webpack://show.korge.org/../../../../../AGOpenglConvert.kt","webpack://show.korge.org/../../../../../AGQueueProcessorOpenGL.kt","webpack://show.korge.org/../../../../../GLShaderCompiler.kt","webpack://show.korge.org/../../../../../DummyAG.kt","webpack://show.korge.org/../../../../../LogAG.kt","webpack://show.korge.org/../../../../../delegated.kt","webpack://show.korge.org/../../../../../GlslExt.kt","webpack://show.korge.org/../../../../../SoftKeyboard.kt","webpack://show.korge.org/../../../../../GameWindow.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/properties/Delegates.kt","webpack://show.korge.org/../../../../../TimedCache.kt","webpack://show.korge.org/../../../../../UiCheckBox.kt","webpack://show.korge.org/../../../../../UiComboBox.kt","webpack://show.korge.org/../../../../../UiComponent.kt","webpack://show.korge.org/../../../../../UiLabel.kt","webpack://show.korge.org/../../../../../UiTextField.kt","webpack://show.korge.org/../../../../../Layout.kt","webpack://show.korge.org/../../../../../KmlGlJsCanvas.kt","webpack://show.korge.org/../../../../../KmlGlJsCanvasExt.kt","webpack://show.korge.org/../../../../../GlExt.kt","webpack://show.korge.org/../../../../../DefaultGameWindowJs.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/org.w3c/org.w3c.dom.kt","webpack://show.korge.org/../../../../../Indenter.kt","webpack://show.korge.org/../../../../../AGOpenglFactory.kt","webpack://show.korge.org/../../../../../AGQueueProcessor.kt","webpack://show.korge.org/../../../../../BitmapSlice.kt","webpack://show.korge.org/../../../../../ImageOrientation.kt","webpack://show.korge.org/../../../../../Font.kt","webpack://show.korge.org/../../../../../TextRenderer.kt","webpack://show.korge.org/../../../../../VectorFont.kt","webpack://show.korge.org/../../../../../WString.kt","webpack://show.korge.org/../../../../../TtfFont.kt","webpack://show.korge.org/../../../../../Shape.kt","webpack://show.korge.org/../../../../../Atlas.kt","webpack://show.korge.org/../../../../../AtlasInfo.kt","webpack://show.korge.org/../../../../../MutableAtlas.kt","webpack://show.korge.org/../../../../../Bitmap32.kt","webpack://show.korge.org/../../../../../Bitmap8.kt","webpack://show.korge.org/../../../../../BitmapChannel.kt","webpack://show.korge.org/../../../../../BitmapIndexed.kt","webpack://show.korge.org/../../../../../DistanceBitmap.kt","webpack://show.korge.org/../../../../../Assert.kt","webpack://show.korge.org/../../../../../NativeImage.kt","webpack://show.korge.org/../../../../../NinePatchBitmap32.kt","webpack://show.korge.org/../../../../../Palette.kt","webpack://show.korge.org/../../../../../BitmapEffect.kt","webpack://show.korge.org/../../../../../Blur.kt","webpack://show.korge.org/../../../../../DropShadow.kt","webpack://show.korge.org/../../../../../Border.kt","webpack://show.korge.org/../../../../../ColorFormat.kt","webpack://show.korge.org/../../../../../Colors.kt","webpack://show.korge.org/../../../../../RGB.kt","webpack://show.korge.org/../../../../../RGBA.kt","webpack://show.korge.org/../../../../../RGBAf.kt","webpack://show.korge.org/../../../../../BitmapFont.kt","webpack://show.korge.org/../../../../../CharacterSet.kt","webpack://show.korge.org/../../../../../FontExt.kt","webpack://show.korge.org/../../../../../GlyphPath.kt","webpack://show.korge.org/../../../../../Metrics.kt","webpack://show.korge.org/../../../../../TtfCIDFont.kt","webpack://show.korge.org/../../../../../EXIF.kt","webpack://show.korge.org/../../../../../ImageAnimation.kt","webpack://show.korge.org/../../../../../ImageData.kt","webpack://show.korge.org/../../../../../ImageFormat.kt","webpack://show.korge.org/../../../../../ImageFormats.kt","webpack://show.korge.org/../../../../../ImageFormatsMutable.kt","webpack://show.korge.org/../../../../../ImageFrame.kt","webpack://show.korge.org/../../../../../ImageFrameLayer.kt","webpack://show.korge.org/../../../../../ImageInfo.kt","webpack://show.korge.org/../../../../../ImageLayer.kt","webpack://show.korge.org/../../../../../KorioExt.kt","webpack://show.korge.org/../../../../../NativeImageFormatProvider.kt","webpack://show.korge.org/../../../../../PNG.kt","webpack://show.korge.org/../../../../../RegisteredImageFormats.kt","webpack://show.korge.org/../../../../../MathExt.kt","webpack://show.korge.org/../../../../../Filler.kt","webpack://show.korge.org/../../../../../TextAlignment.kt","webpack://show.korge.org/../../../../../Bitmap32Context2d.kt","webpack://show.korge.org/../../../../../CompositeOperation.kt","webpack://show.korge.org/../../../../../GraphicsPath.kt","webpack://show.korge.org/../../../../../SvgPath.kt","webpack://show.korge.org/../../../../../Rasterizer.kt","webpack://show.korge.org/../../../../../Renderer.kt","webpack://show.korge.org/../../../../../HtmlImage.kt","webpack://show.korge.org/../../../../../NativeImageFormatProviderJs.kt","webpack://show.korge.org/../../../../../FloatBitmap32.kt","webpack://show.korge.org/../../../../../ClampExt.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/CharCode.kt","webpack://show.korge.org/../../../../../Exceptions.kt","webpack://show.korge.org/../../../../../KorAtomic.kt","webpack://show.korge.org/../../../../../CycleMethod.kt","webpack://show.korge.org/../../../../../IntSegmentSet.kt","webpack://show.korge.org/../../../../../HtmlCanvas.kt","webpack://show.korge.org/../../../../../CancellableContinuation.kt","webpack://show.korge.org/../../../../../DefaultTtfFont.kt","webpack://show.korge.org/../../../../../Vector3DExt.kt","webpack://show.korge.org/../../../../../AsyncInjectorSuspendContext.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/Suspend.kt","webpack://show.korge.org/../../../../../CompressionMethod.kt","webpack://show.korge.org/../../../../../AsyncStream.kt","webpack://show.korge.org/../../../../../DynApi.kt","webpack://show.korge.org/../../../../../SyncStream.kt","webpack://show.korge.org/../../../../../AsyncExt.kt","webpack://show.korge.org/../../../../../AsyncQueue.kt","webpack://show.korge.org/../../../../../KlockExt.kt","webpack://show.korge.org/../../../../../Signal.kt","webpack://show.korge.org/../../../../../Signal2.kt","webpack://show.korge.org/../../../../../runBlockingNoSuspensions.kt","webpack://show.korge.org/../../../../../src/kotlin/coroutines_13/IntrinsicsJs.kt","webpack://show.korge.org/../../../../../Deflate.kt","webpack://show.korge.org/../../../../../ZLib.kt","webpack://show.korge.org/../../../../../BitReader.kt","webpack://show.korge.org/../../../../../Huffman.kt","webpack://show.korge.org/../../../../../SlidingWindow.kt","webpack://show.korge.org/../../../../../Dyn.kt","webpack://show.korge.org/../../../../../PathInfo.kt","webpack://show.korge.org/../../../../../Vfs.kt","webpack://show.korge.org/../../../../../VfsFile.kt","webpack://show.korge.org/../../../../../CatalogVfs.kt","webpack://show.korge.org/../../../../../JailVfs.kt","webpack://show.korge.org/../../../../../LocalVfs.kt","webpack://show.korge.org/../../../../../MountableVfs.kt","webpack://show.korge.org/../../../../../UrlVfs.kt","webpack://show.korge.org/../../../../../TempBytes.kt","webpack://show.korge.org/../../../../../ThreadLocal.kt","webpack://show.korge.org/../../../../../Charset.kt","webpack://show.korge.org/../../../../../Closeable.kt","webpack://show.korge.org/../../../../../StringExt.kt","webpack://show.korge.org/../../../../../URL.kt","webpack://show.korge.org/../../../../../Http.kt","webpack://show.korge.org/../../../../../HttpClient.kt","webpack://show.korge.org/../../../../../Resources.kt","webpack://show.korge.org/../../../../../Json.kt","webpack://show.korge.org/../../../../../StrReader.kt","webpack://show.korge.org/../../../../../Xml.kt","webpack://show.korge.org/../../../../../FastByteArrayInputStream.kt","webpack://show.korge.org/../../../../../ByteArrayExt.kt","webpack://show.korge.org/../../../../../CharExt.kt","webpack://show.korge.org/../../../../../NumberExt.kt","webpack://show.korge.org/../../../../../NumberParser.kt","webpack://show.korge.org/../../../../../OS.kt","webpack://show.korge.org/../../../../../RangeExt.kt","webpack://show.korge.org/../../../../../RangesExt.kt","webpack://show.korge.org/../../../../../StringEscape.kt","webpack://show.korge.org/../../../../../Adler32.kt","webpack://show.korge.org/../../../../../KorioNativeJs.kt","webpack://show.korge.org/../../../../../runBlockingNoJs.kt","webpack://show.korge.org/../../../../../DeflateJs.kt","webpack://show.korge.org/../../../../../KorAtomicJs.kt","webpack://show.korge.org/../../../../../FileExt.kt","webpack://show.korge.org/../../../../../LocalVfsJs.kt","webpack://show.korge.org/../../../../../ClassExtJs.kt","webpack://show.korge.org/../../../../../ExceptionsJs.kt","webpack://show.korge.org/../../../../../NativeThreadLocal.kt","webpack://show.korge.org/../../../../../ThreadJs.kt","webpack://show.korge.org/../../../../../UTF8.kt","webpack://show.korge.org/../../../../../HttpFactoryJs.kt","webpack://show.korge.org/../../../../../JsRuntime.kt","webpack://show.korge.org/../../../../../JsRuntimeBrowser.kt","webpack://show.korge.org/../../../../../JsRuntimeDeno.kt","webpack://show.korge.org/../../../../../JsRuntimeNode.kt","webpack://show.korge.org/../../../../../ArrayConversion.kt","webpack://show.korge.org/../../../../../Environment.kt","webpack://show.korge.org/../../../../../QueryString.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Ranges.kt","webpack://show.korge.org/../../../../../DynApiJs.kt","webpack://show.korge.org/../../../../../EnvironmentJs.kt","webpack://show.korge.org/../../../../../Curve.kt","webpack://show.korge.org/../../../../../Anchor.kt","webpack://show.korge.org/../../../../../IRectangle.kt","webpack://show.korge.org/../../../../../Line.kt","webpack://show.korge.org/../../../../../Margin.kt","webpack://show.korge.org/../../../../../Matrix3D.kt","webpack://show.korge.org/../../../../../MatrixExt.kt","webpack://show.korge.org/../../../../../Point.kt","webpack://show.korge.org/../../../../../PointArrayList.kt","webpack://show.korge.org/../../../../../PointPool.kt","webpack://show.korge.org/../../../../../ScaleMode.kt","webpack://show.korge.org/../../../../../Size.kt","webpack://show.korge.org/../../../../../Vector3D.kt","webpack://show.korge.org/../../../../../Arc.kt","webpack://show.korge.org/../../../../../CurveLUT.kt","webpack://show.korge.org/../../../../../Curves.kt","webpack://show.korge.org/../../../../../CurvesConvex.kt","webpack://show.korge.org/../../../../../CurvesToDashes.kt","webpack://show.korge.org/../../../../../CurvesToStroke.kt","webpack://show.korge.org/../../../../../SubCurve.kt","webpack://show.korge.org/../../../../../BinPacker.kt","webpack://show.korge.org/../../../../../MaxRects.kt","webpack://show.korge.org/../../../../../VectorBuilder.kt","webpack://show.korge.org/../../../../../FSegmentsInt.kt","webpack://show.korge.org/../../../../../FTrapezoidsInt.kt","webpack://show.korge.org/../../../../../SegmentIntToTrapezoidIntList.kt","webpack://show.korge.org/../../../../../TrapezoidInt.kt","webpack://show.korge.org/../../../../../Edge.kt","webpack://show.korge.org/../../../../../LineScaleMode.kt","webpack://show.korge.org/../../../../../PolygonScanline.kt","webpack://show.korge.org/../../../../../StrokeInfo.kt","webpack://show.korge.org/../../../../../StrokeToFill.kt","webpack://show.korge.org/../../../../../Winding.kt","webpack://show.korge.org/../../../../../Internal.kt","webpack://show.korge.org/../../../../../Math.kt","webpack://show.korge.org/../../../../../Easing.kt","webpack://show.korge.org/../../../../../Interpolation.kt","webpack://show.korge.org/../../../../../Convex.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/comparisons/compareTo.kt","webpack://show.korge.org/../../../../../SegmentInt.kt","webpack://show.korge.org/../../../../../RandomExt.kt","webpack://show.korge.org/../../../../../Dynamic2.kt","webpack://show.korge.org/../../../../../Token.kt","webpack://show.korge.org/../../../../../Yaml.kt","webpack://show.korge.org/../../../../../AutoEscapeMode.kt","webpack://show.korge.org/../../../../../HtmlExt.kt","webpack://show.korge.org/../../../../../Block.kt","webpack://show.korge.org/../../../../../DefaultBlocks.kt","webpack://show.korge.org/../../../../../extraProperty.kt","webpack://show.korge.org/../../../../../DefaultFilters.kt","webpack://show.korge.org/../../../../../DefaultFunctions.kt","webpack://show.korge.org/../../../../../DefaultTags.kt","webpack://show.korge.org/../../../../../ExprNode.kt","webpack://show.korge.org/../../../../../KorteException.kt","webpack://show.korge.org/../../../../../RawString.kt","webpack://show.korge.org/../../../../../Tag.kt","webpack://show.korge.org/../../../../../TeFunction.kt","webpack://show.korge.org/../../../../../Template.kt","webpack://show.korge.org/../../../../../Templates.kt","webpack://show.korge.org/../../../../../TemplateProvider.kt","webpack://show.korge.org/../../../../../TemplateConfig.kt","webpack://show.korge.org/../../../../../DynamicType.kt","webpack://show.korge.org/../../../../../ObjectMapper2.kt","webpack://show.korge.org/../../../../../AsyncCache.kt","webpack://show.korge.org/../../../../../ExceptionsExt.kt","webpack://show.korge.org/../../../../../FormatStr.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/unsigned/src/kotlin/UInt.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/Char.kt","webpack://show.korge.org/../../../../../Hex.kt","webpack://show.korge.org/../../../../../IntExt.kt","webpack://show.korge.org/../../../../../KorteDeferred.kt","webpack://show.korge.org/../../../../../KorteLock.kt","webpack://show.korge.org/../../../../../ObjectMapper2Native.kt","webpack://show.korge.org/../../../../../Base64.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/coroutines/CoroutineContext.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/LinkedHashSet.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Sequences.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Sequences.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/AbstractIterator.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/AbstractList.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/AbstractMap.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/AbstractSet.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/IndexedValue.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Iterators.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/HashMap.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/SequenceBuilder.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/SlidingWindow.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/coroutines/CoroutineContextImpl.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/coroutines/intrinsics/Intrinsics.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/internal/progressionUtil.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/properties/ObservableProperty.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/random/Random.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/random/PlatformRandom.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/random/XorWowRandom.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/ranges/PrimitiveRanges.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/ranges/ProgressionIterators.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/ranges/Progressions.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/ranges/Ranges.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/Appendable.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/char.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/StringNumberConversions.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/stringsCode.kt","webpack://show.korge.org/../../../../../src/kotlin/exceptions.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/Tuples.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/runtime/primitiveCompanionObjects.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/AbstractMutableCollection.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/AbstractMutableList.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/AbstractMutableMap.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/AbstractMutableSet.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/ArrayList.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/ArraySorting.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/HashSet.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/InternalHashCodeMap.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/LinkedHashMap.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/console.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/coroutines/SafeContinuationJs.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/coroutines/cancellation/CancellationException.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/reflect/JsClass.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/reflect/KClassImpl.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/reflect/primitives.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/reflect/reflection.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/StringBuilderJs.kt","webpack://show.korge.org/../../../../../src/generated/_WhitespaceChars.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/numberConversions.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/regex.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/throwableExtensions.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlinx/dom/Classes.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/regex/RegexExtensions.kt","webpack://show.korge.org/../../../../../builtins/Char.kt","webpack://show.korge.org/../../../../../builtins/Enum.kt","webpack://show.korge.org/../../../../../runtime/arrays.kt","webpack://show.korge.org/../../../../../runtime/noPackageHacks.kt","webpack://show.korge.org/../../../../../runtime/bitUtils.kt","webpack://show.korge.org/../../../../../runtime/charSequence.kt","webpack://show.korge.org/../../../../../runtime/collectionsHacks.kt","webpack://show.korge.org/../../../../../runtime/compareTo.kt","webpack://show.korge.org/../../../../../runtime/coreRuntime.kt","webpack://show.korge.org/../../../../../runtime/hacks.kt","webpack://show.korge.org/../../../../../runtime/longjs.kt","webpack://show.korge.org/../../../../../runtime/numberConversion.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/unsigned/src/kotlin/UShort.kt","webpack://show.korge.org/../../../../../runtime/rangeTo.kt","webpack://show.korge.org/../../../../../runtime/reflectRuntime.kt","webpack://show.korge.org/../../../../../runtime/typeCheckUtils.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/js.arrays/fill.kt","webpack://show.korge.org/../../../../../src/generated/_CharCategories.kt","webpack://show.korge.org/../../../../../src/generated/_DigitChars.kt","webpack://show.korge.org/../../../../../src/generated/_LetterChars.kt","webpack://show.korge.org/../../../../../src/kotlin/coroutines_13/CoroutineImpl.kt","webpack://show.korge.org/../../../../../src/kotlin/jsOperators.kt","webpack://show.korge.org/../../../../../src/kotlin/text/numberConversions_js-ir.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/AbstractCollection.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/PrimitiveIterators.kt","webpack://show.korge.org/../../../../../jsMainSources/core/builtins/src/kotlin/Unit.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/EqualityComparator.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/coroutines/js/internal/EmptyContinuation.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/regexp.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/InternalMap.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/common/src/kotlin/MathH.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Sets.kt","webpack://show.korge.org/../../../../../src/generated/_CollectionsJs.kt","webpack://show.korge.org/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/js.arrays/sort.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/src/kotlin/coroutines/ContinuationInterceptor.kt","webpack://show.korge.org/../../../../../src/kotlin/math_js-ir.kt","webpack://show.korge.org/../../../../../commonMainSources/libraries/stdlib/unsigned/src/kotlin/UStrings.kt","webpack://show.korge.org/../../../../../src/kotlin/numbers_js-ir.kt","webpack://show.korge.org/../../../../../Job.kt","webpack://show.korge.org/../../../../../AbstractCoroutine.kt","webpack://show.korge.org/../../../../../Builders.common.kt","webpack://show.korge.org/../../../../../CompletionHandler.kt","webpack://show.korge.org/../../../../../DispatchedTask.kt","webpack://show.korge.org/../../../../../CancellableContinuationImpl.kt","webpack://show.korge.org/../../../../../AtomicFU.common.kt","webpack://show.korge.org/../../../../../CompletableDeferred.kt","webpack://show.korge.org/../../../../../CompletionState.kt","webpack://show.korge.org/../../../../../CoroutineDispatcher.kt","webpack://show.korge.org/../../../../../CoroutineExceptionHandler.kt","webpack://show.korge.org/../../../../../Delay.kt","webpack://show.korge.org/../../../../../EventLoop.common.kt","webpack://show.korge.org/../../../../../Exceptions.common.kt","webpack://show.korge.org/../../../../../JobSupport.kt","webpack://show.korge.org/../../../../../Concurrent.kt","webpack://show.korge.org/../../../../../LinkedList.kt","webpack://show.korge.org/../../../../../Synchronized.kt","webpack://show.korge.org/../../../../../MainCoroutineDispatcher.kt","webpack://show.korge.org/../../../../../Supervisor.kt","webpack://show.korge.org/../../../../../Timeout.kt","webpack://show.korge.org/../../../../../Unconfined.kt","webpack://show.korge.org/../../../../../ArrayQueue.kt","webpack://show.korge.org/../../../../../DispatchedContinuation.kt","webpack://show.korge.org/../../../../../CoroutineContext.kt","webpack://show.korge.org/../../../../../ThreadContext.kt","webpack://show.korge.org/../../../../../Scopes.kt","webpack://show.korge.org/../../../../../Symbol.kt","webpack://show.korge.org/../../../../../Cancellable.kt","webpack://show.korge.org/../../../../../Undispatched.kt","webpack://show.korge.org/../../../../../Window.kt","webpack://show.korge.org/../../../../../CoroutineExceptionHandlerImpl.kt","webpack://show.korge.org/../../../../../Debug.kt","webpack://show.korge.org/../../../../../Dispatchers.kt","webpack://show.korge.org/../../../../../EventLoop.kt","webpack://show.korge.org/../../../../../JSDispatcher.kt","webpack://show.korge.org/../../../../../StackTraceRecovery.kt","webpack://show.korge.org/../../../../../CoroutineStart.kt","webpack://show.korge.org/../../../../../ProbesSupport.kt","webpack://show.korge.org/../../../../../CompletionHandler.common.kt","webpack://show.korge.org/../../../../../SchedulerTask.kt","webpack://show.korge.org/../../../../../Promise.kt","webpack://show.korge.org/../../../../../CoroutineScope.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/com/soywiz/korge/box2d/WorldView.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/World.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/callbacks/ContactImpulse.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/collision/AABB.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/collision/Collision.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/collision/ContactID.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/collision/Distance.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/collision/DistanceInput.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/collision/DistanceOutput.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/collision/Manifold.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/collision/ManifoldPoint.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/collision/RayCastInput.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/collision/RayCastOutput.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/collision/TimeOfImpact.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/collision/WorldManifold.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/collision/broadphase/BroadPhase.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/collision/broadphase/DefaultBroadPhaseBuffer.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/collision/broadphase/DynamicTree.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/internal/internal.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/collision/broadphase/DynamicTreeNode.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/collision/shapes/CircleShape.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/collision/shapes/EdgeShape.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/collision/shapes/MassData.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/collision/shapes/PolygonShape.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/collision/shapes/Shape.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/common/Color3f.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/common/Mat22.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/common/Mat33.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/common/MathUtils.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/common/Rot.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/common/Settings.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/common/Sweep.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/common/Timer.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/common/Transform.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/common/Vec2.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/common/Vec3.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/Body.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/BodyDef.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/BodyType.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/ContactManager.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/Filter.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/Fixture.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/FixtureDef.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/FixtureProxy.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/Island.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/Profile.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/SolverData.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/TimeStep.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/contacts/ChainAndCircleContact.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/contacts/ChainAndPolygonContact.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/contacts/CircleContact.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/contacts/Contact.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/contacts/ContactEdge.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/contacts/ContactPositionConstraint.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/contacts/ContactRegister.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/contacts/ContactSolver.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/contacts/ContactVelocityConstraint.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/contacts/EdgeAndCircleContact.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/contacts/EdgeAndPolygonContact.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/contacts/PolygonAndCircleContact.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/contacts/PolygonContact.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/contacts/Position.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/contacts/PositionSolverManifold.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/contacts/Velocity.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/particle/ParticleBodyContact.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/particle/ParticleColor.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/particle/ParticleContact.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/particle/ParticleDef.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/particle/ParticleGroupType.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/particle/ParticleSystem.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/particle/ParticleType.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/pooling/arrays/Vec2ArrayPool.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/pooling/normal/DefaultWorldPool.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/pooling/normal/MutableStack.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/pooling/normal/OrderedStack.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/userdata/Box2dTypedUserData.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/jsMain/kotlin/org/jbox2d/internal/System_nanoTime.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/WorldRefExt.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/callbacks/ContactFilter.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/collision/shapes/ChainShape.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/common/BufferUtils.kt","webpack://show.korge.org/../../../../modules/korge-box2d/src/commonMain/kotlin/org/jbox2d/dynamics/joints/Joint.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/Animation.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/AnimationState.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/utils/SpineArrayExt.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/AnimationStateData.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/BlendMode.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/Bone.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/BoneData.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/ConstraintData.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/Event.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/EventData.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/IkConstraint.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/IkConstraintData.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/PathConstraint.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/PathConstraintData.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/Skeleton.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/SkeletonBinary.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/SkeletonData.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/SkeletonJson.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/Skin.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/Slot.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/SlotData.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/SpineRegion.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/TransformConstraint.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/TransformConstraintData.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/attachments/AtlasAttachmentLoader.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/attachments/Attachment.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/attachments/AttachmentType.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/attachments/BoundingBoxAttachment.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/attachments/ClippingAttachment.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/attachments/MeshAttachment.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/attachments/PathAttachment.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/attachments/PointAttachment.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/attachments/RegionAttachment.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/attachments/VertexAttachment.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/korge/SkeletonView.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/utils/SkeletonClipping.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/utils/SpineTriangulator.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/utils/SpineUtils.kt","webpack://show.korge.org/../../../../modules/korge-spine/src/commonMain/kotlin/com/esotericsoftware/spine/utils/SpineVector2.kt","webpack://show.korge.org/../../../../src/commonMain/kotlin/main.kt","webpack://show.korge.org/../../../../src/commonMain/kotlin/box2d/SimpleBox2dScene.kt","webpack://show.korge.org/../../../../src/commonMain/kotlin/bunnymark/BunnymarkScene.kt","webpack://show.korge.org/../../../../src/commonMain/kotlin/easings/EasingsScene.kt","webpack://show.korge.org/../../../../src/commonMain/kotlin/extension/Ext.kt","webpack://show.korge.org/../../../../src/commonMain/kotlin/filters/FiltersScene.kt","webpack://show.korge.org/../../../../src/commonMain/kotlin/gestures/GesturesScene.kt","webpack://show.korge.org/../../../../src/commonMain/kotlin/scene1/Scene1.kt","webpack://show.korge.org/../../../../src/commonMain/kotlin/scene2/Scene2.kt","webpack://show.korge.org/../../../../src/commonMain/kotlin/spine/SpineScene.kt","webpack://show.korge.org/../../../../src/commonMain/kotlin/ui/SimpleUIScene.kt","webpack://show.korge.org/../../../../src/jsMain/kotlin/extension/JsExt.kt","webpack://show.korge.org/webpack/bootstrap","webpack://show.korge.org/webpack/runtime/global","webpack://show.korge.org/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"show.korge.org\"] = factory();\n\telse\n\t\troot[\"show.korge.org\"] = factory();\n})(this, () => {\nreturn ",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"package com.soywiz.korge.box2d\n\nimport com.soywiz.kds.*\nimport com.soywiz.klock.hr.*\nimport com.soywiz.klock.milliseconds\nimport com.soywiz.klock.seconds\nimport com.soywiz.korge.component.*\nimport com.soywiz.korge.debug.*\nimport com.soywiz.korge.view.*\nimport com.soywiz.korge.view.Circle\nimport com.soywiz.korge.view.ktree.*\nimport com.soywiz.korio.lang.*\nimport com.soywiz.korio.serialization.xml.*\nimport com.soywiz.korma.geom.*\nimport com.soywiz.korui.*\nimport org.jbox2d.collision.shapes.*\nimport org.jbox2d.common.*\nimport org.jbox2d.dynamics.*\nimport org.jbox2d.userdata.*\nimport kotlin.native.concurrent.ThreadLocal\n\n@PublishedApi\ninternal val DEFAULT_SCALE = 20.0\n@PublishedApi\ninternal val DEFAULT_GRAVITY_Y = 9.8f\n\n@ThreadLocal\nvar Views.registeredBox2dSupport: Boolean by Extra.Property { false }\n\nfun Views.checkBox2dRegistered() {\n    if (!registeredBox2dSupport) error(\"You should call Views.registerBox2dSupport()\")\n}\n\n@ThreadLocal\nvar KTreeSerializer.box2dWorld by Extra.PropertyThis<KTreeSerializer, Box2dWorldComponent?> { null }\n\nobject PhysicsKTreeSerializerExtension : KTreeSerializerExtension(\"physics\") {\n    override fun complete(serializer: KTreeSerializer, view: View) {\n        //serializer.box2dWorld?.world?.forEachBody { println(\"it.linearVelocityY: ${it.linearVelocityY}\") }\n        serializer.box2dWorld?.update(0.0.milliseconds)\n        serializer.box2dWorld?.world?.forEachBody {\n            if (!it.didReset) {\n                it.didReset = true\n                it.type = it.bodyDef.type\n                it.linearVelocityX = it.bodyDef.linearVelocity.x\n                it.linearVelocityY = it.bodyDef.linearVelocity.y\n                it.gravityScale = it.bodyDef.gravityScale\n                it.angularVelocity = it.bodyDef.angularVelocity\n                it.isSleepingAllowed = it.bodyDef.allowSleep\n                it.isAwake = it.bodyDef.awake\n                it.isFixedRotation = it.bodyDef.fixedRotation\n                it.isBullet = it.bodyDef.bullet\n            }\n            //println(\"it.linearVelocityY: ${it.linearVelocityY}\")\n        }\n    }\n\n    override fun setProps(serializer: KTreeSerializer, view: View, xml: Xml) {\n        //println(\"PhysicsKTreeSerializerExtension.setProps\")\n        val body = view.registerBodyWithFixture(\n            world = serializer.box2dWorld?.world,\n            type = xml.strNull(\"type\")?.let { BodyType[it] } ?: BodyType.STATIC,\n            linearVelocityX = xml.float(\"linearVelocityX\", 0f),\n            linearVelocityY = xml.float(\"linearVelocityY\", 0f),\n            gravityScale = xml.float(\"gravityScale\", 1f),\n            angularVelocity = xml.float(\"angularVelocity\", 0f),\n            allowSleep = xml.boolean(\"isSleepingAllowed\", true),\n            awake = xml.boolean(\"isAwake\", true),\n            fixedRotation = xml.boolean(\"isFixedRotation\", false),\n            bullet = xml.boolean(\"isBullet\", false),\n            friction = xml.float(\"friction\", 0f),\n            density = xml.float(\"density\", 1f),\n            restitution = xml.float(\"restitution\", 0f),\n            isSensor = xml.boolean(\"isSensor\", false),\n            active = xml.boolean(\"isActive\", true)\n        ).body\n        body?.didReset = false\n    }\n\n    override fun getProps(serializer: KTreeSerializer, view: View): Map<String, Any?>? {\n        val body = view.body ?: return null\n        val fixture = body.m_fixtureList\n        //println(\"PhysicsKTreeSerializerExtension.getProps\")\n        return LinkedHashMap<String, Any?>().apply {\n            if (body.type != BodyType.STATIC) this[\"type\"] = body.type\n            if (body.linearVelocityX != 0f) this[\"linearVelocityX\"] = body.linearVelocityX\n            if (body.linearVelocityY != 0f) this[\"linearVelocityY\"] = body.linearVelocityY\n            if (body.gravityScale != 1f) this[\"gravityScale\"] = body.gravityScale\n            if (body.angularVelocity != 0f) this[\"angularVelocity\"] = body.angularVelocity\n            if (!body.isSleepingAllowed) this[\"isSleepingAllowed\"] = body.isSleepingAllowed\n            if (!body.isAwake) this[\"isAwake\"] = body.isAwake\n            if (body.isFixedRotation) this[\"isFixedRotation\"] = body.isFixedRotation\n            if (body.isBullet) this[\"isBullet\"] = body.isBullet\n            if (!body.isActive) this[\"isActive\"] = body.isActive\n            if (fixture != null) {\n                if (fixture.isSensor) this[\"isSensor\"] = fixture.isSensor\n                if (fixture.friction != 0f) this[\"friction\"] = fixture.friction\n                if (fixture.density != 1f) this[\"density\"] = fixture.density\n                if (fixture.restitution != 0f) this[\"restitution\"] = fixture.restitution\n            }\n        }\n    }\n}\nfun ViewsContainer.registerBox2dSupportOnce() {\n    if (views.registeredBox2dSupport) return\n    views.registeredBox2dSupport = true\n    views.ktreeSerializer.registerExtension(PhysicsKTreeSerializerExtension)\n    views.viewExtraBuildDebugComponent.add { views, view, container ->\n        val physicsContainer = container.container {\n        }\n        fun physicsContainer() {\n            physicsContainer.removeChildren()\n            val body = view.body\n            if (body != null) {\n                physicsContainer.uiCollapsibleSection(\"Box2D Physics\") {\n                    button(\"Remove\") {\n                        onClick {\n                            body.destroyBody()\n                            view.body = null\n                            body.view = null\n                            physicsContainer()\n                        }\n                    }\n                    uiEditableValue(body::type)\n                    val fixture = body.m_fixtureList\n                    if (fixture != null) {\n                        uiEditableValue(fixture::isSensor)\n                        uiEditableValue(fixture::friction)\n                        uiEditableValue(fixture::density, min = 0f, clampMin = true, clampMax = false)\n                        uiEditableValue(fixture::restitution)\n                    }\n                    uiEditableValue(body::linearVelocityX, min = -100f, max = 100f, clampMin = true, clampMax = false)\n                    uiEditableValue(body::linearVelocityY, min = -100f, max = 100f, clampMin = true, clampMax = false)\n                    uiEditableValue(body::gravityScale, min = -100f, max = 100f, clampMin = true, clampMax = false)\n                    uiEditableValue(body::angularVelocity)\n                    uiEditableValue(body::isSleepingAllowed)\n                    uiEditableValue(body::isAwake)\n                    uiEditableValue(body::isFixedRotation)\n                    uiEditableValue(body::isBullet)\n                    uiEditableValue(body::isActive)\n                }\n            } else {\n                physicsContainer.button(\"Add box2d physics\") {\n                    onClick {\n                        view.registerBodyWithFixture(type = BodyType.STATIC)\n                        views.debugSaveView(\"Add physics\", view)\n                        physicsContainer()\n                    }\n                }\n            }\n            physicsContainer.root?.relayout()\n        }\n        physicsContainer()\n    }\n    //views.serializer.register()\n}\n\nvar World.component: Box2dWorldComponent?\n    get() = get(Box2dWorldComponent.Key)\n    set(value) {\n        set(Box2dWorldComponent.Key, value)\n    }\n\nclass Box2dWorldComponent(\n    val worldView: View,\n    override val world: World,\n    var velocityIterations: Int = 6,\n    var positionIterations: Int = 2,\n    var autoDestroyBodies: Boolean = true,\n) : FixedUpdateComponent(worldView, 16.milliseconds), WorldRef {\n    init {\n        world.component = this\n    }\n\n    object Key : Box2dTypedUserData.Key<Box2dWorldComponent>()\n\n    private val tempVec = Vec2()\n    private val tempPos = Point()\n    override fun update() {\n        world.step(step.seconds.toFloat(), velocityIterations, positionIterations)\n        world.forEachBody { node ->\n            val view = node.view\n\n            if (view != null) {\n                val worldScale = world.customScale\n                val worldScaleInv = 1.0 / worldScale\n\n                //val viewPos = view.getPositionRelativeTo(worldView, tempPos)\n                val viewPos = tempPos.setTo(view.x, view.y)\n\n                if (viewPos.x != node.viewInfo.x || viewPos.y != node.viewInfo.y || view.rotation != node.viewInfo.rotation) {\n                    node.setTransform(\n                        tempVec.set(viewPos.x * worldScaleInv, viewPos.y * worldScaleInv),\n                        view.rotation\n                    )\n                    node.linearVelocity = tempVec.set(0f, 0f)\n                    node.angularVelocity = 0f\n                    node.isActive = true\n                    node.isAwake = true\n                }\n\n                val newX = node.position.x.toDouble() * worldScale\n                val newY = node.position.y.toDouble() * worldScale\n\n                view.position(newX, newY)\n                //view.setPositionRelativeTo(worldView, tempPos.setTo(newX, newY))\n\n                view.rotation = node.angle\n\n                val viewRoot = view.root\n                val viewRootStage = viewRoot is Stage\n\n                node.viewInfo.x = view.x\n                node.viewInfo.y = view.y\n                node.viewInfo.rotation = view.rotation\n\n                if (autoDestroyBodies && node.viewInfo.onStage && !viewRootStage) {\n                    world.destroyBody(node)\n                    node.view?.body = null\n                    node.view = null\n                }\n\n                node.viewInfo.onStage = viewRootStage\n            }\n        }\n    }\n}\n\n@ThreadLocal\nvar View.box2dWorldComponent by Extra.PropertyThis<View, Box2dWorldComponent?> { null }\n\nfun View.getOrCreateBox2dWorld(): Box2dWorldComponent {\n    if (this.box2dWorldComponent == null) {\n        val component = Box2dWorldComponent(this, World(0f, DEFAULT_GRAVITY_Y).also { it.customScale = DEFAULT_SCALE }, 6, 2)\n        this.box2dWorldComponent = component\n        addComponent(component)\n    }\n    return this.box2dWorldComponent!!\n}\n\nval View.nearestBox2dWorldComponent: Box2dWorldComponent\n    get() {\n        var nearestReference: View? = null\n        var view: View? = this\n        while (view != null) {\n            val component = view.box2dWorldComponent\n            if (component != null) {\n                return component\n            }\n            //if (view.parent == null || view is View.Reference) {\n            if (view is View.Reference) {\n                if (nearestReference == null) {\n                    nearestReference = view\n                }\n            }\n            if (view.parent == null) {\n                return (nearestReference ?: view).getOrCreateBox2dWorld()\n            }\n            view = view.parent\n        }\n        invalidOp\n    }\n\nval View.nearestBox2dWorld: World get() = nearestBox2dWorldComponent.world\n\ninline fun View.createBody(world: World? = null, callback: BodyDef.() -> Unit): Body = (world ?: nearestBox2dWorld).createBody(BodyDef().apply(callback))\n\n/** Shortcut to create and attach a [Fixture] to this [Body] */\ninline fun Body.fixture(callback: FixtureDef.() -> Unit): Body = this.also { createFixture(FixtureDef().apply(callback)) }\n\n@ThreadLocal\nvar View.body by Extra.PropertyThis<View, Body?>(\"box2dBody\") { null }\n\ninline fun <T : View> T.registerBody(body: Body): T {\n    body.view = this\n    this.body = body\n    return this\n}\n\n//private val BOX2D_BODY_KEY = \"box2dBody\"\n\nprivate val ViewKey = Box2dTypedUserData.Key<View>()\n\nvar Body.view: View?\n    get() = this[ViewKey]\n    set(value) {\n        this[ViewKey] = value\n    }\n\n/** Shortcut to create a simple [Body] to this [World] with the specified properties */\ninline fun <T : View> T.registerBodyWithFixture(\n    angularVelocity: Number = 0.0,\n    linearVelocityX: Number = 0.0,\n    linearVelocityY: Number = 0.0,\n    linearDamping: Number = 0.0,\n    angularDamping: Number = 0.0,\n    gravityScale: Number = 1.0,\n    shape: Shape? = null,\n    allowSleep: Boolean = true,\n    awake: Boolean = true,\n    fixedRotation: Boolean = false,\n    bullet: Boolean = false,\n    type: BodyType = BodyType.STATIC,\n    friction: Number = 0.2,\n    restitution: Number = 0.2,\n    active: Boolean = true,\n    isSensor: Boolean = false,\n    density: Number = 1.0,\n    world: World? = null,\n): T {\n    val view = this\n\n    val body = createBody(world) {\n        this.type = type\n        this.angle = rotation\n        this.angularVelocity = angularVelocity.toFloat()\n        this.position.set(x.toFloat(), y.toFloat())\n        this.linearVelocity.set(linearVelocityX.toFloat(), linearVelocityY.toFloat())\n        this.linearDamping = linearDamping.toFloat()\n        this.angularDamping = angularDamping.toFloat()\n        this.gravityScale = gravityScale.toFloat()\n        this.allowSleep = allowSleep\n        this.fixedRotation = fixedRotation\n        this.bullet = bullet\n        this.awake = awake\n        this.active = active\n    }\n    val world = body.world\n\n    body.fixture {\n        this.shape = shape ?:\n            when {\n                view is Circle -> CircleShape(view.radius / world.customScale)\n                view is Ellipse && view.isCircle -> CircleShape(view.radiusX / world.customScale)\n                else -> BoxShape(getLocalBounds() / world.customScale)\n            }\n\n        //BoxShape(width / world.customScale, height / world.customScale)\n        this.isSensor = isSensor\n        this.friction = friction.toFloat()\n        this.restitution = restitution.toFloat()\n        this.density = density.toFloat()\n    }\n    body.view = this\n    this.body = body\n    return this\n}\n\nfun BoxShape(rect: Rectangle) = PolygonShape().apply {\n    count = 4\n    vertices[0].set(rect.left, rect.top)\n    vertices[1].set(rect.right, rect.top)\n    vertices[2].set(rect.right, rect.bottom)\n    vertices[3].set(rect.left, rect.bottom)\n    normals[0].set(0.0f, -1.0f)\n    normals[1].set(1.0f, 0.0f)\n    normals[2].set(0.0f, 1.0f)\n    normals[3].set(-1.0f, 0.0f)\n    centroid.setZero()\n}\n\n/**\n * Creates a [PolygonShape] as a box with the specified [width] and [height]\n */\ninline fun BoxShape(width: Number, height: Number) = PolygonShape().apply {\n    count = 4\n    vertices[0].set(0, 0)\n    vertices[1].set(width, 0)\n    vertices[2].set(width, height)\n    vertices[3].set(0, height)\n    normals[0].set(0.0f, -1.0f)\n    normals[1].set(1.0f, 0.0f)\n    normals[2].set(0.0f, 1.0f)\n    normals[3].set(-1.0f, 0.0f)\n    centroid.setZero()\n}\n\ninline fun Container.worldView(\n    gravityX: Number = 0.0,\n    gravityY: Number = DEFAULT_GRAVITY_Y.toDouble(),\n    velocityIterations: Int = 6,\n    positionIterations: Int = 2,\n    callback: @ViewDslMarker Container.() -> Unit = {}\n): Container = container(callback).also {\n    it.getOrCreateBox2dWorld().also {\n        it.world.gravity.set(gravityX, gravityY)\n        it.velocityIterations = velocityIterations\n        it.positionIterations = positionIterations\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics\n\nimport org.jbox2d.callbacks.*\nimport org.jbox2d.collision.*\nimport org.jbox2d.collision.broadphase.*\nimport org.jbox2d.collision.shapes.*\nimport org.jbox2d.common.*\nimport org.jbox2d.dynamics.contacts.*\nimport org.jbox2d.dynamics.joints.*\nimport org.jbox2d.internal.*\nimport org.jbox2d.particle.*\nimport org.jbox2d.pooling.*\nimport org.jbox2d.pooling.arrays.*\nimport org.jbox2d.pooling.normal.*\nimport org.jbox2d.userdata.*\n\n/**\n * The world class manages all physics entities, dynamic simulation, and asynchronous queries. The\n * world also contains efficient memory management facilities.\n *\n * @author Daniel Murphy\n */\nopen class World(gravity: Vec2, val pool: IWorldPool, broadPhase: BroadPhase) : WorldRef, Box2dTypedUserData by Box2dTypedUserData.Mixin() {\n    var customScale: Double = 1.0\n\n    override val world: World get() = this\n\n    // statistics gathering\n    var activeContacts = 0\n    var contactPoolCount = 0\n\n    var userData: Any? = null\n\n    var m_flags: Int = CLEAR_FORCES\n\n    /**\n     * Get the contact manager for testing purposes\n     *\n     * @return\n     */\n    var m_contactManager: ContactManager = ContactManager(this, broadPhase)\n        protected set\n\n    /**\n     * Get the world body list. With the returned body, use Body.getNext to get the next body in the\n     * world list. A null body indicates the end of the list.\n     *\n     * @return the head of the world body list.\n     */\n    var bodyList: Body? = null\n        private set\n    /**\n     * Get the world joint list. With the returned joint, use Joint.getNext to get the next joint in\n     * the world list. A null joint indicates the end of the list.\n     *\n     * @return the head of the world joint list.\n     */\n    var jointList: Joint? = null\n        private set\n\n    /**\n     * Get the number of bodies.\n     *\n     * @return\n     */\n    var bodyCount: Int = 0\n        private set\n    /**\n     * Get the number of joints.\n     *\n     * @return\n     */\n    var jointCount: Int = 0\n        private set\n\n    /**\n     * Get the global gravity vector.\n     *\n     * @return\n     */\n    /**\n     * Change the global gravity vector.\n     *\n     * @param gravity\n     */\n    var gravity = Vec2()\n        set(gravity) {\n            this.gravity.set(gravity)\n        }\n    var isSleepingAllowed: Boolean = true\n\n    // private Body m_groundBody;\n\n    /**\n     * Register a destruction listener. The listener is owned by you and must remain in scope.\n     *\n     * @param listener\n     */\n    var destructionListener: DestructionListener? = null\n    var particleDestructionListener: ParticleDestructionListener? = null\n    private var m_debugDraw: DebugDraw? = null\n\n    /**\n     * This is used to compute the time step ratio to support a variable time step.\n     */\n    private var m_inv_dt0: Float = 0f\n\n    // these are for debugging the solver\n    /**\n     * Enable/disable warm starting. For testing.\n     *\n     * @param flag\n     */\n    var isWarmStarting: Boolean = true\n    /**\n     * Enable/disable continuous physics. For testing.\n     *\n     * @param flag\n     */\n    var isContinuousPhysics: Boolean = true\n    var isSubStepping: Boolean = false\n\n    private var m_stepComplete: Boolean = true\n\n    val profile: Profile = Profile()\n\n    private val m_particleSystem: ParticleSystem = ParticleSystem(this)\n\n\n    private val contactStacks = Array<Array<ContactRegister>>(ShapeType.values().size) { arrayOfNulls<ContactRegister>(ShapeType.values().size) as Array<ContactRegister> }\n\n    var isAllowSleep: Boolean\n        get() = isSleepingAllowed\n        set(flag) {\n            if (flag == isSleepingAllowed) {\n                return\n            }\n\n            isSleepingAllowed = flag\n            if (!isSleepingAllowed) {\n                var b = bodyList\n                while (b != null) {\n                    b.isAwake = true\n                    b = b.m_next\n                }\n            }\n        }\n\n    // djm pooling\n    private val step = TimeStep()\n    private val stepTimer = Timer()\n    private val tempTimer = Timer()\n\n    private val color = Color3f()\n    private val xf = Transform()\n    private val cA = Vec2()\n    private val cB = Vec2()\n    private val avs = Vec2ArrayPool()\n\n    private val wqwrapper = WorldQueryWrapper()\n\n    private val wrcwrapper = WorldRayCastWrapper()\n    private val input = RayCastInput()\n\n    /**\n     * Get the world contact list. With the returned contact, use Contact.getNext to get the next\n     * contact in the world list. A null contact indicates the end of the list.\n     *\n     * @return the head of the world contact list.\n     * @warning contacts are created and destroyed in the middle of a time step. Use ContactListener\n     * to avoid missing contacts.\n     */\n    val contactList: Contact\n        get() = m_contactManager!!.m_contactList!!\n\n\n    /**\n     * Get the number of broad-phase proxies.\n     *\n     * @return\n     */\n    val proxyCount: Int\n        get() = m_contactManager.m_broadPhase.proxyCount\n\n    /**\n     * Get the number of contacts (each may have 0 or more contact points).\n     *\n     * @return\n     */\n    val contactCount: Int\n        get() = m_contactManager.m_contactCount\n\n    /**\n     * Gets the height of the dynamic tree\n     *\n     * @return\n     */\n    val treeHeight: Int\n        get() = m_contactManager.m_broadPhase.treeHeight\n\n    /**\n     * Gets the balance of the dynamic tree\n     *\n     * @return\n     */\n    val treeBalance: Int\n        get() = m_contactManager.m_broadPhase.treeBalance\n\n    /**\n     * Gets the quality of the dynamic tree\n     *\n     * @return\n     */\n    val treeQuality: Float\n        get() = m_contactManager.m_broadPhase.treeQuality\n\n    /**\n     * Is the world locked (in the middle of a time step).\n     *\n     * @return\n     */\n    val isLocked: Boolean\n        get() = m_flags and LOCKED == LOCKED\n\n    /**\n     * Get the flag that controls automatic clearing of forces after each time step.\n     *\n     * @return\n     */\n    /**\n     * Set flag to control automatic clearing of forces after each time step.\n     *\n     * @param flag\n     */\n    var autoClearForces: Boolean\n        get() = m_flags and CLEAR_FORCES == CLEAR_FORCES\n        set(flag) = if (flag) {\n            m_flags = m_flags or CLEAR_FORCES\n        } else {\n            m_flags = m_flags and CLEAR_FORCES.inv()\n        }\n\n    private val island = Island()\n    private var stack = arrayOfNulls<Body>(10) // TODO djm find a good initial stack number;\n    private val broadphaseTimer = Timer()\n\n    private val toiIsland = Island()\n    private val toiInput = TimeOfImpact.TOIInput()\n    private val toiOutput = TimeOfImpact.TOIOutput()\n    private val subStep = TimeStep()\n    private val tempBodies = arrayOfNulls<Body>(2)\n    private val backup1 = Sweep()\n    private val backup2 = Sweep()\n    private val liquidLength = .12f\n    private var averageLinearVel = -1f\n    private val liquidOffset = Vec2()\n    private val circCenterMoved = Vec2()\n    private val liquidColor = Color3f(.4f, .4f, 1f)\n\n    private val center = Vec2()\n    private val axis = Vec2()\n    private val v1 = Vec2()\n    private val v2 = Vec2()\n    private val tlvertices = Vec2ArrayPool()\n\n    /**\n     * Get the world particle group list. With the returned group, use ParticleGroup::GetNext to get\n     * the next group in the world list. A NULL group indicates the end of the list.\n     *\n     * @return the head of the world particle group list.\n     */\n    val particleGroupList: Array<ParticleGroup?>\n        get() = m_particleSystem.getParticleGroupList()!!\n\n    /**\n     * Get the number of particle groups.\n     *\n     * @return\n     */\n    val particleGroupCount: Int\n        get() = m_particleSystem.particleGroupCount\n\n    /**\n     * Get the number of particles.\n     *\n     * @return\n     */\n    val particleCount: Int\n        get() = m_particleSystem.particleCount\n\n    /**\n     * Get the maximum number of particles.\n     *\n     * @return\n     */\n    /**\n     * Set the maximum number of particles.\n     *\n     * @param count\n     */\n    var particleMaxCount: Int\n        get() = m_particleSystem.particleMaxCount\n        set(count) {\n            m_particleSystem.particleMaxCount = count\n        }\n\n    /**\n     * Get the particle density.\n     *\n     * @return\n     */\n    /**\n     * Change the particle density.\n     *\n     * @param density\n     */\n    var particleDensity: Float\n        get() = m_particleSystem.particleDensity\n        set(density) {\n            m_particleSystem.particleDensity = density\n        }\n\n    /**\n     * Get the particle gravity scale.\n     *\n     * @return\n     */\n    /**\n     * Change the particle gravity scale. Adjusts the effect of the global gravity vector on\n     * particles. Default value is 1.0f.\n     *\n     * @param gravityScale\n     */\n    var particleGravityScale: Float\n        get() = m_particleSystem.particleGravityScale\n        set(gravityScale) {\n            m_particleSystem.particleGravityScale = gravityScale\n\n        }\n\n    /**\n     * Get damping for particles\n     *\n     * @return\n     */\n    /**\n     * Damping is used to reduce the velocity of particles. The damping parameter can be larger than\n     * 1.0f but the damping effect becomes sensitive to the time step when the damping parameter is\n     * large.\n     *\n     * @param damping\n     */\n    var particleDamping: Float\n        get() = m_particleSystem.particleDamping\n        set(damping) {\n            m_particleSystem.particleDamping = damping\n        }\n\n    /**\n     * Get the particle radius.\n     *\n     * @return\n     */\n    /**\n     * Change the particle radius. You should set this only once, on world start. If you change the\n     * radius during execution, existing particles may explode, shrink, or behave unexpectedly.\n     *\n     * @param radius\n     */\n    var particleRadius: Float\n        get() = m_particleSystem.particleRadius\n        set(radius) {\n            m_particleSystem.particleRadius = radius\n        }\n\n    /**\n     * Get the particle data. @return the pointer to the head of the particle data.\n     *\n     * @return\n     */\n    val particleFlagsBuffer: IntArray\n        get() = m_particleSystem!!.particleFlagsBuffer!!\n\n    val particlePositionBuffer: Array<Vec2>\n        get() = m_particleSystem!!.particlePositionBuffer!!\n\n    val particleVelocityBuffer: Array<Vec2>\n        get() = m_particleSystem.particleVelocityBuffer!!\n\n    val particleColorBuffer: Array<ParticleColor>\n        get() = m_particleSystem.particleColorBuffer!!\n\n    val particleGroupBuffer: Array<ParticleGroup?>\n        get() = m_particleSystem.particleGroupBuffer!!\n\n    val particleUserDataBuffer: Array<Any>\n        get() = m_particleSystem.particleUserDataBuffer!!\n\n    /**\n     * Get contacts between particles\n     *\n     * @return\n     */\n    val particleContacts: Array<ParticleContact>\n        get() = m_particleSystem.m_contactBuffer\n\n    val particleContactCount: Int\n        get() = m_particleSystem.m_contactCount\n\n    /**\n     * Get contacts between particles and bodies\n     *\n     * @return\n     */\n    val particleBodyContacts: Array<ParticleBodyContact>\n        get() = m_particleSystem.m_bodyContactBuffer\n\n    val particleBodyContactCount: Int\n        get() = m_particleSystem.m_bodyContactCount\n\n\n    constructor(\n        gravity: Vec2,\n        pool: IWorldPool = DefaultWorldPool(WORLD_POOL_SIZE, WORLD_POOL_CONTAINER_SIZE),\n        strategy: BroadPhaseStrategy = DynamicTree()\n    ) : this(gravity, pool, DefaultBroadPhaseBuffer(strategy))\n\n    constructor(\n        gravityX: Number = 0f,\n        gravityY: Number = 9.8f,\n        pool: IWorldPool = DefaultWorldPool(WORLD_POOL_SIZE, WORLD_POOL_CONTAINER_SIZE),\n        strategy: BroadPhaseStrategy = DynamicTree()\n    ) : this(Vec2(gravityX.toFloat(), gravityY.toFloat()), pool, DefaultBroadPhaseBuffer(strategy))\n\n    init {\n        this.gravity.set(gravity)\n        initializeRegisters()\n    }\n\n    private fun addType(creator: IDynamicStack<Contact>, type1: ShapeType, type2: ShapeType) {\n        val register = ContactRegister()\n        register.creator = creator\n        register.primary = true\n        contactStacks[type1.ordinal][type2.ordinal] = register\n\n        if (type1 !== type2) {\n            val register2 = ContactRegister()\n            register2.creator = creator\n            register2.primary = false\n            contactStacks[type2.ordinal][type1.ordinal] = register2\n        }\n    }\n\n    private fun initializeRegisters() {\n        addType(pool.circleContactStack, ShapeType.CIRCLE, ShapeType.CIRCLE)\n        addType(pool.polyCircleContactStack, ShapeType.POLYGON, ShapeType.CIRCLE)\n        addType(pool.polyContactStack, ShapeType.POLYGON, ShapeType.POLYGON)\n        addType(pool.edgeCircleContactStack, ShapeType.EDGE, ShapeType.CIRCLE)\n        addType(pool.edgePolyContactStack, ShapeType.EDGE, ShapeType.POLYGON)\n        addType(pool.chainCircleContactStack, ShapeType.CHAIN, ShapeType.CIRCLE)\n        addType(pool.chainPolyContactStack, ShapeType.CHAIN, ShapeType.POLYGON)\n    }\n\n    fun popContact(fixtureA: Fixture, indexA: Int, fixtureB: Fixture, indexB: Int): Contact? {\n        val type1 = fixtureA.type\n        val type2 = fixtureB.type\n\n        val reg = contactStacks[type1.ordinal][type2.ordinal]\n        if (reg != null) {\n            if (reg.primary) {\n                val c = reg.creator!!.pop()\n                c.init(fixtureA, indexA, fixtureB, indexB)\n                return c\n            } else {\n                val c = reg.creator!!.pop()\n                c.init(fixtureB, indexB, fixtureA, indexA)\n                return c\n            }\n        } else {\n            return null\n        }\n    }\n\n    fun pushContact(contact: Contact) {\n        val fixtureA = contact.getFixtureA()\n        val fixtureB = contact.getFixtureB()\n\n        if (contact.m_manifold.pointCount > 0 && !fixtureA!!.isSensor && !fixtureB!!.isSensor) {\n            fixtureA.getBody()!!.isAwake = true\n            fixtureB.getBody()!!.isAwake = true\n        }\n\n        val type1 = fixtureA!!.type\n        val type2 = fixtureB!!.type\n\n        val creator = contactStacks[type1.ordinal][type2.ordinal].creator\n        creator!!.push(contact)\n    }\n\n    /**\n     * Register a contact filter to provide specific control over collision. Otherwise the default\n     * filter is used (_defaultFilter). The listener is owned by you and must remain in scope.\n     *\n     * @param filter\n     */\n    fun setContactFilter(filter: ContactFilter) {\n        m_contactManager.m_contactFilter = filter\n    }\n\n    /**\n     * Register a contact event listener. The listener is owned by you and must remain in scope.\n     *\n     * @param listener\n     */\n    fun setContactListener(listener: ContactListener) {\n        m_contactManager.m_contactListener = listener\n    }\n\n    /**\n     * Register a routine for debug drawing. The debug draw functions are called inside with\n     * World.DrawDebugData method. The debug draw object is owned by you and must remain in scope.\n     *\n     * @param debugDraw\n     */\n    fun setDebugDraw(debugDraw: DebugDraw) {\n        m_debugDraw = debugDraw\n    }\n\n    /**\n     * create a rigid body given a definition. No reference to the definition is retained.\n     *\n     * @warning This function is locked during callbacks.\n     * @param def\n     * @return\n     */\n    fun createBody(def: BodyDef): Body {\n        assert(!isLocked)\n        if (isLocked) {\n            error(\"World is locked\")\n        }\n        // TODO djm pooling\n        val b = Body(def, this)\n\n        // add to world doubly linked list\n        b.prev = null\n        b.m_next = bodyList\n        if (bodyList != null) {\n            bodyList!!.prev = b\n        }\n        bodyList = b\n        ++bodyCount\n\n        return b\n    }\n\n    /**\n     * destroy a rigid body given a definition. No reference to the definition is retained. This\n     * function is locked during callbacks.\n     *\n     * @warning This automatically deletes all associated shapes and joints.\n     * @warning This function is locked during callbacks.\n     * @param body\n     */\n    fun destroyBody(body: Body) {\n        assert(bodyCount > 0)\n        assert(!isLocked)\n        if (isLocked) {\n            return\n        }\n\n        // Delete the attached joints.\n        var je = body.m_jointList\n        while (je != null) {\n            val je0 = je\n            je = je.next\n            if (destructionListener != null) {\n                destructionListener!!.sayGoodbye(je0.joint!!)\n            }\n\n            destroyJoint(je0.joint)\n\n            body.m_jointList = je\n        }\n        body.m_jointList = null\n\n        // Delete the attached contacts.\n        var ce = body.m_contactList\n        while (ce != null) {\n            val ce0 = ce\n            ce = ce.next\n            m_contactManager.destroy(ce0.contact!!)\n        }\n        body.m_contactList = null\n\n        var f = body.m_fixtureList\n        while (f != null) {\n            val f0 = f\n            f = f.m_next\n\n            if (destructionListener != null) {\n                destructionListener!!.sayGoodbye(f0)\n            }\n\n            f0.destroyProxies(m_contactManager.m_broadPhase)\n            f0.destroy()\n            // TODO djm recycle fixtures (here or in that destroy method)\n            body.m_fixtureList = f\n            body.m_fixtureCount -= 1\n        }\n        body.m_fixtureList = null\n        body.m_fixtureCount = 0\n\n        // Remove world body list.\n        if (body.prev != null) {\n            body.prev!!.m_next = body.m_next\n        }\n\n        if (body.m_next != null) {\n            body.m_next!!.prev = body.prev\n        }\n\n        if (body == bodyList) {\n            bodyList = body.m_next\n        }\n\n        --bodyCount\n        // TODO djm recycle body\n    }\n\n    /**\n     * create a joint to constrain bodies together. No reference to the definition is retained. This\n     * may cause the connected bodies to cease colliding.\n     *\n     * @warning This function is locked during callbacks.\n     * @param def\n     * @return\n     */\n    fun createJoint(def: JointDef): Joint? {\n        assert(!isLocked)\n        if (isLocked) {\n            return null\n        }\n\n        val j = Joint.create(this, def)\n\n        // Connect to the world list.\n        j!!.prev = null\n        j.next = jointList\n        if (jointList != null) {\n            jointList!!.prev = j\n        }\n        jointList = j\n        ++jointCount\n\n        // Connect to the bodies' doubly linked lists.\n        j.edgeA.joint = j\n        j.edgeA.other = j.bodyB\n        j.edgeA.prev = null\n        j.edgeA.next = j.bodyA!!.m_jointList\n        if (j.bodyA!!.m_jointList != null) {\n            j.bodyA!!.m_jointList!!.prev = j.edgeA\n        }\n        j.bodyA!!.m_jointList = j.edgeA\n\n        j.edgeB.joint = j\n        j.edgeB.other = j.bodyA\n        j.edgeB.prev = null\n        j.edgeB.next = j.bodyB!!.m_jointList\n        if (j.bodyB!!.m_jointList != null) {\n            j.bodyB!!.m_jointList!!.prev = j.edgeB\n        }\n        j.bodyB!!.m_jointList = j.edgeB\n\n        val bodyA = def.bodyA\n        val bodyB = def.bodyB\n\n        // If the joint prevents collisions, then flag any contacts for filtering.\n        if (!def.collideConnected) {\n            var edge = bodyB!!.getContactList()\n            while (edge != null) {\n                if (edge.other == bodyA) {\n                    // Flag the contact for filtering at the next time step (where either\n                    // body is awake).\n                    edge.contact!!.flagForFiltering()\n                }\n\n                edge = edge.next\n            }\n        }\n\n        // Note: creating a joint doesn't wake the bodies.\n\n        return j\n    }\n\n    /**\n     * destroy a joint. This may cause the connected bodies to begin colliding.\n     *\n     * @warning This function is locked during callbacks.\n     * @param joint\n     */\n    fun destroyJoint(j: Joint?) {\n        assert(!isLocked)\n        if (isLocked) {\n            return\n        }\n\n        val collideConnected = j!!.getCollideConnected()\n\n        // Remove from the doubly linked list.\n        if (j.prev != null) {\n            j.prev!!.next = j.next\n        }\n\n        if (j.next != null) {\n            j.next!!.prev = j.prev\n        }\n\n        if (j === jointList) {\n            jointList = j.next\n        }\n\n        // Disconnect from island graph.\n        val bodyA = j.bodyA\n        val bodyB = j.bodyB\n\n        // Wake up connected bodies.\n        bodyA!!.isAwake = true\n        bodyB!!.isAwake = true\n\n        // Remove from body 1.\n        if (j.edgeA.prev != null) {\n            j.edgeA.prev!!.next = j.edgeA.next\n        }\n\n        if (j.edgeA.next != null) {\n            j.edgeA.next!!.prev = j.edgeA.prev\n        }\n\n        if (j.edgeA == bodyA.m_jointList) {\n            bodyA.m_jointList = j.edgeA.next\n        }\n\n        j.edgeA.prev = null\n        j.edgeA.next = null\n\n        // Remove from body 2\n        if (j.edgeB.prev != null) {\n            j.edgeB.prev!!.next = j.edgeB.next\n        }\n\n        if (j.edgeB.next != null) {\n            j.edgeB.next!!.prev = j.edgeB.prev\n        }\n\n        if (j.edgeB == bodyB.m_jointList) {\n            bodyB.m_jointList = j.edgeB.next\n        }\n\n        j.edgeB.prev = null\n        j.edgeB.next = null\n\n        Joint.destroy(j)\n\n        assert(jointCount > 0)\n        --jointCount\n\n        // If the joint prevents collisions, then flag any contacts for filtering.\n        if (!collideConnected) {\n            var edge = bodyB.getContactList()\n            while (edge != null) {\n                if (edge.other == bodyA) {\n                    // Flag the contact for filtering at the next time step (where either\n                    // body is awake).\n                    edge.contact!!.flagForFiltering()\n                }\n\n                edge = edge.next\n            }\n        }\n    }\n\n    /**\n     * Take a time step. This performs collision detection, integration, and constraint solution.\n     *\n     * @param timeStep the amount of time to simulate, this should not vary.\n     * @param velocityIterations for the velocity constraint solver.\n     * @param positionIterations for the position constraint solver.\n     */\n    fun step(dt: Float, velocityIterations: Int, positionIterations: Int) {\n        stepTimer.reset()\n        tempTimer.reset()\n        // log.debug(\"Starting step\");\n        // If new fixtures were added, we need to find the new contacts.\n        if (m_flags and NEW_FIXTURE == NEW_FIXTURE) {\n            // log.debug(\"There's a new fixture, lets look for new contacts\");\n            m_contactManager.findNewContacts()\n            m_flags = m_flags and NEW_FIXTURE.inv()\n        }\n\n        m_flags = m_flags or LOCKED\n\n        step.dt = dt\n        step.velocityIterations = velocityIterations\n        step.positionIterations = positionIterations\n        if (dt > 0.0f) {\n            step.inv_dt = 1.0f / dt\n        } else {\n            step.inv_dt = 0.0f\n        }\n\n        step.dtRatio = m_inv_dt0 * dt\n\n        step.warmStarting = isWarmStarting\n        profile.stepInit.record(tempTimer.milliseconds)\n\n        // Update contacts. This is where some contacts are destroyed.\n        tempTimer.reset()\n        m_contactManager.collide()\n        profile.collide.record(tempTimer.milliseconds)\n\n        // Integrate velocities, solve velocity constraints, and integrate positions.\n        if (m_stepComplete && step.dt > 0.0f) {\n            tempTimer.reset()\n            m_particleSystem.solve(step) // Particle Simulation\n            profile.solveParticleSystem.record(tempTimer.milliseconds)\n            tempTimer.reset()\n            solve(step)\n            profile.solve.record(tempTimer.milliseconds)\n        }\n\n        // Handle TOI events.\n        if (isContinuousPhysics && step.dt > 0.0f) {\n            tempTimer.reset()\n            solveTOI(step)\n            profile.solveTOI.record(tempTimer.milliseconds)\n        }\n\n        if (step.dt > 0.0f) {\n            m_inv_dt0 = step.inv_dt\n        }\n\n        if (m_flags and CLEAR_FORCES == CLEAR_FORCES) {\n            clearForces()\n        }\n\n        m_flags = m_flags and LOCKED.inv()\n        // log.debug(\"ending step\");\n\n        profile.step.record(stepTimer.milliseconds)\n    }\n\n    /**\n     * Call this after you are done with time steps to clear the forces. You normally call this after\n     * each call to Step, unless you are performing sub-steps. By default, forces will be\n     * automatically cleared, so you don't need to call this function.\n     *\n     * @see setAutoClearForces\n     */\n    fun clearForces() {\n        var body = bodyList\n        while (body != null) {\n            body.force.setZero()\n            body.torque = 0.0f\n            body = body.getNext()\n        }\n    }\n\n    /**\n     * Call this to draw shapes and other debug draw data.\n     */\n    fun drawDebugData() {\n        if (m_debugDraw == null) {\n            return\n        }\n\n\n        val flags = m_debugDraw!!.flags\n        val wireframe = flags and DebugDraw.e_wireframeDrawingBit != 0\n\n        if (flags and DebugDraw.e_shapeBit != 0) {\n            var b = bodyList\n            while (b != null) {\n                xf.set(b.transform)\n                var f = b.getFixtureList()\n                while (f != null) {\n                    if (!b.isActive) {\n                        color.set(0.5f, 0.5f, 0.3f)\n                        drawShape(f, xf, color, wireframe)\n                    } else if (b.type === BodyType.STATIC) {\n                        color.set(0.5f, 0.9f, 0.3f)\n                        drawShape(f, xf, color, wireframe)\n                    } else if (b.type === BodyType.KINEMATIC) {\n                        color.set(0.5f, 0.5f, 0.9f)\n                        drawShape(f, xf, color, wireframe)\n                    } else if (!b.isAwake) {\n                        color.set(0.5f, 0.5f, 0.5f)\n                        drawShape(f, xf, color, wireframe)\n                    } else {\n                        color.set(0.9f, 0.7f, 0.7f)\n                        drawShape(f, xf, color, wireframe)\n                    }\n                    f = f.getNext()\n                }\n                b = b.getNext()\n            }\n            drawParticleSystem(m_particleSystem)\n        }\n\n        if (flags and DebugDraw.e_jointBit != 0) {\n            var j = jointList\n            while (j != null) {\n                drawJoint(j)\n                j = j.next\n            }\n        }\n\n        if (flags and DebugDraw.e_pairBit != 0) {\n            color.set(0.3f, 0.9f, 0.9f)\n            var c: Contact? = m_contactManager.m_contactList\n            while (c != null) {\n                val fixtureA = c.getFixtureA()\n                val fixtureB = c.getFixtureB()\n                fixtureA!!.getAABB(c.getChildIndexA()).getCenterToOut(cA)\n                fixtureB!!.getAABB(c.getChildIndexB()).getCenterToOut(cB)\n                m_debugDraw!!.drawSegment(cA, cB, color)\n                c = c.getNext()\n            }\n        }\n\n        if (flags and DebugDraw.e_aabbBit != 0) {\n            color.set(0.9f, 0.3f, 0.9f)\n\n            var b = bodyList\n            while (b != null) {\n                if (!b.isActive) {\n                    b = b.getNext()\n                    continue\n                }\n\n                var f = b.getFixtureList()\n                while (f != null) {\n                    for (i in 0 until f.m_proxyCount) {\n                        val proxy = f.m_proxies!![i]\n                        val aabb = m_contactManager.m_broadPhase.getFatAABB(proxy.proxyId)\n                        if (aabb != null) {\n                            val vs = avs[4]\n                            vs[0].set(aabb.lowerBound.x, aabb.lowerBound.y)\n                            vs[1].set(aabb.upperBound.x, aabb.lowerBound.y)\n                            vs[2].set(aabb.upperBound.x, aabb.upperBound.y)\n                            vs[3].set(aabb.lowerBound.x, aabb.upperBound.y)\n                            m_debugDraw!!.drawPolygon(vs, 4, color)\n                        }\n                    }\n                    f = f.getNext()\n                }\n                b = b.getNext()\n            }\n        }\n\n        if (flags and DebugDraw.e_centerOfMassBit != 0) {\n            var b = bodyList\n            while (b != null) {\n                xf.set(b.transform)\n                xf.p.set(b.worldCenter)\n                m_debugDraw!!.drawTransform(xf)\n                b = b.getNext()\n            }\n        }\n\n        if (flags and DebugDraw.e_dynamicTreeBit != 0) {\n            m_contactManager.m_broadPhase.drawTree(m_debugDraw!!)\n        }\n\n        m_debugDraw!!.flush()\n    }\n\n    /**\n     * Query the world for all fixtures that potentially overlap the provided AABB.\n     *\n     * @param callback a user implemented callback class.\n     * @param aabb the query box.\n     */\n    fun queryAABB(callback: QueryCallback, aabb: AABB) {\n        wqwrapper.broadPhase = m_contactManager.m_broadPhase\n        wqwrapper.callback = callback\n        m_contactManager.m_broadPhase.query(wqwrapper, aabb)\n    }\n\n    /**\n     * Query the world for all fixtures and particles that potentially overlap the provided AABB.\n     *\n     * @param callback a user implemented callback class.\n     * @param particleCallback callback for particles.\n     * @param aabb the query box.\n     */\n    fun queryAABB(callback: QueryCallback, particleCallback: ParticleQueryCallback, aabb: AABB) {\n        wqwrapper.broadPhase = m_contactManager.m_broadPhase\n        wqwrapper.callback = callback\n        m_contactManager.m_broadPhase.query(wqwrapper, aabb)\n        m_particleSystem.queryAABB(particleCallback, aabb)\n    }\n\n    /**\n     * Query the world for all particles that potentially overlap the provided AABB.\n     *\n     * @param particleCallback callback for particles.\n     * @param aabb the query box.\n     */\n    fun queryAABB(particleCallback: ParticleQueryCallback, aabb: AABB) {\n        m_particleSystem.queryAABB(particleCallback, aabb)\n    }\n\n    /**\n     * Ray-cast the world for all fixtures in the path of the ray. Your callback controls whether you\n     * get the closest point, any point, or n-points. The ray-cast ignores shapes that contain the\n     * starting point.\n     *\n     * @param callback a user implemented callback class.\n     * @param point1 the ray starting point\n     * @param point2 the ray ending point\n     */\n    fun raycast(callback: RayCastCallback, point1: Vec2, point2: Vec2) {\n        wrcwrapper.broadPhase = m_contactManager.m_broadPhase\n        wrcwrapper.callback = callback\n        input.maxFraction = 1.0f\n        input.p1.set(point1)\n        input.p2.set(point2)\n        m_contactManager.m_broadPhase.raycast(wrcwrapper, input)\n    }\n\n    /**\n     * Ray-cast the world for all fixtures and particles in the path of the ray. Your callback\n     * controls whether you get the closest point, any point, or n-points. The ray-cast ignores shapes\n     * that contain the starting point.\n     *\n     * @param callback a user implemented callback class.\n     * @param particleCallback the particle callback class.\n     * @param point1 the ray starting point\n     * @param point2 the ray ending point\n     */\n    fun raycast(callback: RayCastCallback, particleCallback: ParticleRaycastCallback,\n                point1: Vec2, point2: Vec2) {\n        wrcwrapper.broadPhase = m_contactManager.m_broadPhase\n        wrcwrapper.callback = callback\n        input.maxFraction = 1.0f\n        input.p1.set(point1)\n        input.p2.set(point2)\n        m_contactManager.m_broadPhase.raycast(wrcwrapper, input)\n        m_particleSystem.raycast(particleCallback, point1, point2)\n    }\n\n    /**\n     * Ray-cast the world for all particles in the path of the ray. Your callback controls whether you\n     * get the closest point, any point, or n-points.\n     *\n     * @param particleCallback the particle callback class.\n     * @param point1 the ray starting point\n     * @param point2 the ray ending point\n     */\n    fun raycast(particleCallback: ParticleRaycastCallback, point1: Vec2, point2: Vec2) {\n        m_particleSystem.raycast(particleCallback, point1, point2)\n    }\n\n    private fun solve(step: TimeStep) {\n        profile.solveInit.startAccum()\n        profile.solveVelocity.startAccum()\n        profile.solvePosition.startAccum()\n\n        // update previous transforms\n        run {\n            var b = bodyList\n            while (b != null) {\n                b!!.xf0.set(b!!.xf)\n                b = b!!.m_next\n            }\n        }\n\n        // Size the island for the worst case.\n        island.init(bodyCount, m_contactManager.m_contactCount, jointCount, m_contactManager.m_contactListener)\n\n        // Clear all the island flags.\n        run {\n            var b = bodyList\n            while (b != null) {\n                b!!.flags = b!!.flags and Body.e_islandFlag.inv()\n                b = b!!.m_next\n            }\n        }\n        var c: Contact? = m_contactManager.m_contactList\n        while (c != null) {\n            c.m_flags = c.m_flags and Contact.ISLAND_FLAG.inv()\n            c = c.m_next\n        }\n        var j = jointList\n        while (j != null) {\n            j.islandFlag = false\n            j = j.next\n        }\n\n        // Build and simulate all awake islands.\n        val stackSize = bodyCount\n        if (stack.size < stackSize) {\n            stack = arrayOfNulls(stackSize)\n        }\n        var seed = bodyList\n        while (seed != null) {\n            if (seed.flags and Body.e_islandFlag == Body.e_islandFlag) {\n                seed = seed.m_next\n                continue\n            }\n\n            if (!seed.isAwake || !seed.isActive) {\n                seed = seed.m_next\n                continue\n            }\n\n            // The seed can be dynamic or kinematic.\n            if (seed.type === BodyType.STATIC) {\n                seed = seed.m_next\n                continue\n            }\n\n            // Reset island and stack.\n            island.clear()\n            var stackCount = 0\n            stack[stackCount++] = seed\n            seed.flags = seed.flags or Body.e_islandFlag\n\n            // Perform a depth first search (DFS) on the constraint graph.\n            while (stackCount > 0) {\n                // Grab the next body off the stack and add it to the island.\n                val b = stack[--stackCount]!!\n                assert(b.isActive)\n                island.add(b)\n\n                // Make sure the body is awake.\n                b.isAwake = true\n\n                // To keep islands as small as possible, we don't\n                // propagate islands across static bodies.\n                if (b.type === BodyType.STATIC) {\n                    continue\n                }\n\n                // Search all contacts connected to this body.\n                var ce = b.m_contactList\n                while (ce != null) {\n                    val contact = ce.contact\n\n                    // Has this contact already been added to an island?\n                    if (contact!!.m_flags and Contact.ISLAND_FLAG == Contact.ISLAND_FLAG) {\n                        ce = ce.next\n                        continue\n                    }\n\n                    // Is this contact solid and touching?\n                    if (!contact.isEnabled || !contact.isTouching) {\n                        ce = ce.next\n                        continue\n                    }\n\n                    // Skip sensors.\n                    val sensorA = contact.m_fixtureA!!.m_isSensor\n                    val sensorB = contact.m_fixtureB!!.m_isSensor\n                    if (sensorA || sensorB) {\n                        ce = ce.next\n                        continue\n                    }\n\n                    island.add(contact)\n                    contact.m_flags = contact.m_flags or Contact.ISLAND_FLAG\n\n                    val other = ce.other\n\n                    // Was the other body already added to this island?\n                    if (other!!.flags and Body.e_islandFlag == Body.e_islandFlag) {\n                        ce = ce.next\n                        continue\n                    }\n\n                    assert(stackCount < stackSize)\n                    stack[stackCount++] = other\n                    other.flags = other.flags or Body.e_islandFlag\n                    ce = ce.next\n                }\n\n                // Search all joints connect to this body.\n                var je = b.m_jointList\n                while (je != null) {\n                    if (je.joint!!.islandFlag) {\n                        je = je.next\n                        continue\n                    }\n\n                    val other = je.other\n\n                    // Don't simulate joints connected to inactive bodies.\n                    if (!other!!.isActive) {\n                        je = je.next\n                        continue\n                    }\n\n                    island.add(je.joint!!)\n                    je.joint!!.islandFlag = true\n\n                    if (other.flags and Body.e_islandFlag == Body.e_islandFlag) {\n                        je = je.next\n                        continue\n                    }\n\n                    assert(stackCount < stackSize)\n                    stack[stackCount++] = other\n                    other.flags = other.flags or Body.e_islandFlag\n                    je = je.next\n                }\n            }\n            island.solve(profile, step, gravity, isSleepingAllowed)\n\n            // Post solve cleanup.\n            for (i in 0 until island.m_bodyCount) {\n                // Allow static bodies to participate in other islands.\n                val b = island.m_bodies!![i]\n                if (b.type === BodyType.STATIC) {\n                    b.flags = b.flags and Body.e_islandFlag.inv()\n                }\n            }\n            seed = seed.m_next\n        }\n        profile.solveInit.endAccum()\n        profile.solveVelocity.endAccum()\n        profile.solvePosition.endAccum()\n\n        broadphaseTimer.reset()\n        // Synchronize fixtures, check for out of range bodies.\n        var b = bodyList\n        while (b != null) {\n            // If a body was not in an island then it did not move.\n            if (b!!.flags and Body.e_islandFlag == 0) {\n                b = b!!.getNext()\n                continue\n            }\n\n            if (b!!.type === BodyType.STATIC) {\n                b = b!!.getNext()\n                continue\n            }\n\n            // Update fixtures (for broad-phase).\n            b!!.synchronizeFixtures()\n            b = b!!.getNext()\n        }\n\n        // Look for new contacts.\n        m_contactManager.findNewContacts()\n        profile.broadphase.record(broadphaseTimer.milliseconds)\n    }\n\n    private fun solveTOI(step: TimeStep) {\n\n        val island = toiIsland\n        island.init(2 * Settings.maxTOIContacts, Settings.maxTOIContacts, 0, m_contactManager.m_contactListener)\n        if (m_stepComplete) {\n            var b = bodyList\n            while (b != null) {\n                b.flags = b.flags and Body.e_islandFlag.inv()\n                b.sweep.alpha0 = 0.0f\n                b = b.m_next\n            }\n\n            var c: Contact? = m_contactManager.m_contactList\n            while (c != null) {\n                // Invalidate TOI\n                c.m_flags = c.m_flags and (Contact.TOI_FLAG or Contact.ISLAND_FLAG).inv()\n                c.m_toiCount = 0f\n                c.m_toi = 1.0f\n                c = c.m_next\n            }\n        }\n\n        // Find TOI events and solve them.\n        while (true) {\n            // Find the first TOI.\n            var minContact: Contact? = null\n            var minAlpha = 1.0f\n\n            var c: Contact? = m_contactManager.m_contactList\n            while (c != null) {\n                // Is this contact disabled?\n                if (!c.isEnabled) {\n                    c = c.m_next\n                    continue\n                }\n\n                // Prevent excessive sub-stepping.\n                if (c.m_toiCount > Settings.maxSubSteps) {\n                    c = c.m_next\n                    continue\n                }\n\n                var alpha = 1.0f\n                if (c.m_flags and Contact.TOI_FLAG != 0) {\n                    // This contact has a valid cached TOI.\n                    alpha = c.m_toi\n                } else {\n                    val fA = c.getFixtureA()\n                    val fB = c.getFixtureB()\n\n                    // Is there a sensor?\n                    if (fA!!.isSensor || fB!!.isSensor) {\n                        c = c.m_next\n                        continue\n                    }\n\n                    val bA = fA.getBody()\n                    val bB = fB.getBody()\n\n                    val typeA = bA!!._type\n                    val typeB = bB!!._type\n                    assert(typeA === BodyType.DYNAMIC || typeB === BodyType.DYNAMIC)\n\n                    val activeA = bA.isAwake && typeA !== BodyType.STATIC\n                    val activeB = bB.isAwake && typeB !== BodyType.STATIC\n\n                    // Is at least one body active (awake and dynamic or kinematic)?\n                    if (!activeA && !activeB) {\n                        c = c.m_next\n                        continue\n                    }\n\n                    val collideA = bA.isBullet || typeA !== BodyType.DYNAMIC\n                    val collideB = bB.isBullet || typeB !== BodyType.DYNAMIC\n\n                    // Are these two non-bullet dynamic bodies?\n                    if (!collideA && !collideB) {\n                        c = c.m_next\n                        continue\n                    }\n\n                    // Compute the TOI for this contact.\n                    // Put the sweeps onto the same time interval.\n                    var alpha0 = bA.sweep.alpha0\n\n                    if (bA.sweep.alpha0 < bB.sweep.alpha0) {\n                        alpha0 = bB.sweep.alpha0\n                        bA.sweep.advance(alpha0)\n                    } else if (bB.sweep.alpha0 < bA.sweep.alpha0) {\n                        alpha0 = bA.sweep.alpha0\n                        bB.sweep.advance(alpha0)\n                    }\n\n                    assert(alpha0 < 1.0f)\n\n                    val indexA = c.getChildIndexA()\n                    val indexB = c.getChildIndexB()\n\n                    // Compute the time of impact in interval [0, minTOI]\n                    val input = toiInput\n                    input.proxyA.set(fA.getShape()!!, indexA)\n                    input.proxyB.set(fB.getShape()!!, indexB)\n                    input.sweepA.set(bA.sweep)\n                    input.sweepB.set(bB.sweep)\n                    input.tMax = 1.0f\n\n                    pool.timeOfImpact.timeOfImpact(toiOutput, input)\n\n                    // Beta is the fraction of the remaining portion of the .\n                    val beta = toiOutput.t\n                    if (toiOutput.state === TimeOfImpact.TOIOutputState.TOUCHING) {\n                        alpha = MathUtils.min(alpha0 + (1.0f - alpha0) * beta, 1.0f)\n                    } else {\n                        alpha = 1.0f\n                    }\n\n                    c.m_toi = alpha\n                    c.m_flags = c.m_flags or Contact.TOI_FLAG\n                }\n\n                if (alpha < minAlpha) {\n                    // This is the minimum TOI found so far.\n                    minContact = c\n                    minAlpha = alpha\n                }\n                c = c.m_next\n            }\n\n            if (minContact == null || 1.0f - 10.0f * Settings.EPSILON < minAlpha) {\n                // No more TOI events. Done!\n                m_stepComplete = true\n                break\n            }\n\n            // Advance the bodies to the TOI.\n            val fA = minContact.getFixtureA()\n            val fB = minContact.getFixtureB()\n            val bA = fA!!.getBody()\n            val bB = fB!!.getBody()\n\n            backup1.set(bA!!.sweep)\n            backup2.set(bB!!.sweep)\n\n            bA.advance(minAlpha)\n            bB.advance(minAlpha)\n\n            // The TOI contact likely has some new contact points.\n            minContact.update(m_contactManager.m_contactListener)\n            minContact.m_flags = minContact.m_flags and Contact.TOI_FLAG.inv()\n            ++minContact.m_toiCount\n\n            // Is the contact solid?\n            if (!minContact.isEnabled || !minContact.isTouching) {\n                // Restore the sweeps.\n                minContact.isEnabled = false\n                bA.sweep.set(backup1)\n                bB.sweep.set(backup2)\n                bA.synchronizeTransform()\n                bB.synchronizeTransform()\n                continue\n            }\n\n            bA.isAwake = true\n            bB.isAwake = true\n\n            // Build the island\n            island.clear()\n            island.add(bA)\n            island.add(bB)\n            island.add(minContact)\n\n            bA.flags = bA.flags or Body.e_islandFlag\n            bB.flags = bB.flags or Body.e_islandFlag\n            minContact.m_flags = minContact.m_flags or Contact.ISLAND_FLAG\n\n            // Get contacts on bodyA and bodyB.\n            tempBodies[0] = bA\n            tempBodies[1] = bB\n            for (i in 0..1) {\n                val body = tempBodies[i]!!\n                if (body._type === BodyType.DYNAMIC) {\n                    var ce = body.m_contactList\n                    while (ce != null) {\n                        if (island.m_bodyCount == island.m_bodyCapacity) {\n                            break\n                        }\n\n                        if (island.m_contactCount == island.m_contactCapacity) {\n                            break\n                        }\n\n                        val contact = ce.contact\n\n                        // Has this contact already been added to the island?\n                        if (contact!!.m_flags and Contact.ISLAND_FLAG != 0) {\n                            ce = ce.next\n                            continue\n                        }\n\n                        // Only add static, kinematic, or bullet bodies.\n                        val other = ce.other\n                        if (other!!._type === BodyType.DYNAMIC && !body.isBullet && !other!!.isBullet) {\n                            ce = ce.next\n                            continue\n                        }\n\n                        // Skip sensors.\n                        val sensorA = contact.m_fixtureA!!.m_isSensor\n                        val sensorB = contact.m_fixtureB!!.m_isSensor\n                        if (sensorA || sensorB) {\n                            ce = ce.next\n                            continue\n                        }\n\n                        // Tentatively advance the body to the TOI.\n                        backup1.set(other!!.sweep)\n                        if (other.flags and Body.e_islandFlag == 0) {\n                            other.advance(minAlpha)\n                        }\n\n                        // Update the contact points\n                        contact.update(m_contactManager.m_contactListener)\n\n                        // Was the contact disabled by the user?\n                        if (!contact.isEnabled) {\n                            other.sweep.set(backup1)\n                            other.synchronizeTransform()\n                            ce = ce.next\n                            continue\n                        }\n\n                        // Are there contact points?\n                        if (!contact.isTouching) {\n                            other.sweep.set(backup1)\n                            other.synchronizeTransform()\n                            ce = ce.next\n                            continue\n                        }\n\n                        // Add the contact to the island\n                        contact.m_flags = contact.m_flags or Contact.ISLAND_FLAG\n                        island.add(contact)\n\n                        // Has the other body already been added to the island?\n                        if (other.flags and Body.e_islandFlag != 0) {\n                            ce = ce.next\n                            continue\n                        }\n\n                        // Add the other body to the island.\n                        other.flags = other.flags or Body.e_islandFlag\n\n                        if (other._type !== BodyType.STATIC) {\n                            other.isAwake = true\n                        }\n\n                        island.add(other)\n                        ce = ce.next\n                    }\n                }\n            }\n\n            subStep.dt = (1.0f - minAlpha) * step.dt\n            subStep.inv_dt = 1.0f / subStep.dt\n            subStep.dtRatio = 1.0f\n            subStep.positionIterations = 20\n            subStep.velocityIterations = step.velocityIterations\n            subStep.warmStarting = false\n            island.solveTOI(subStep, bA.islandIndex, bB.islandIndex)\n\n            // Reset island flags and synchronize broad-phase proxies.\n            for (i in 0 until island.m_bodyCount) {\n                val body = island.m_bodies!![i]\n                body.flags = body.flags and Body.e_islandFlag.inv()\n\n                if (body._type !== BodyType.DYNAMIC) {\n                    continue\n                }\n\n                body.synchronizeFixtures()\n\n                // Invalidate all contact TOIs on this displaced body.\n                var ce = body.m_contactList\n                while (ce != null) {\n                    ce.contact!!.m_flags = ce.contact!!.m_flags and (Contact.TOI_FLAG or Contact.ISLAND_FLAG).inv()\n                    ce = ce.next\n                }\n            }\n\n            // Commit fixture proxy movements to the broad-phase so that new contacts are created.\n            // Also, some contacts can be destroyed.\n            m_contactManager.findNewContacts()\n\n            if (isSubStepping) {\n                m_stepComplete = false\n                break\n            }\n        }\n    }\n\n    private fun drawJoint(joint: Joint) {\n        val bodyA = joint.bodyA\n        val bodyB = joint.bodyB\n        val xf1 = bodyA!!.transform\n        val xf2 = bodyB!!.transform\n        val x1 = xf1.p\n        val x2 = xf2.p\n        val p1 = pool.popVec2()\n        val p2 = pool.popVec2()\n        joint.getAnchorA(p1)\n        joint.getAnchorB(p2)\n\n        color.set(0.5f, 0.8f, 0.8f)\n\n        when (joint.type) {\n            // TODO djm write after writing joints\n            JointType.DISTANCE -> m_debugDraw!!.drawSegment(p1, p2, color)\n\n            JointType.PULLEY -> {\n                val pulley = joint as PulleyJoint\n                val s1 = pulley.getGroundAnchorA()\n                val s2 = pulley.getGroundAnchorB()\n                m_debugDraw!!.drawSegment(s1, p1, color)\n                m_debugDraw!!.drawSegment(s2, p2, color)\n                m_debugDraw!!.drawSegment(s1, s2, color)\n            }\n            JointType.CONSTANT_VOLUME, JointType.MOUSE -> {\n            }\n            else -> {\n                m_debugDraw!!.drawSegment(x1, p1, color)\n                m_debugDraw!!.drawSegment(p1, p2, color)\n                m_debugDraw!!.drawSegment(x2, p2, color)\n            }\n        }// don't draw this\n        pool.pushVec2(2)\n    }\n\n    private fun drawShape(fixture: Fixture, xf: Transform, color: Color3f, wireframe: Boolean) {\n        when (fixture.type) {\n            ShapeType.CIRCLE -> {\n                val circle = fixture.getShape() as CircleShape?\n\n                // Vec2 center = Mul(xf, circle.m_p);\n                Transform.mulToOutUnsafe(xf, circle!!.p, center)\n                val radius = circle.radius\n                xf.q.getXAxis(axis)\n\n                if (fixture.userData != null && fixture.userData == LIQUID_INT) {\n                    val b = fixture.getBody()\n                    liquidOffset.set(b!!._linearVelocity)\n                    val linVelLength = b._linearVelocity.length()\n                    if (averageLinearVel == -1f) {\n                        averageLinearVel = linVelLength\n                    } else {\n                        averageLinearVel = .98f * averageLinearVel + .02f * linVelLength\n                    }\n                    liquidOffset.mulLocal(liquidLength / averageLinearVel / 2f)\n                    circCenterMoved.set(center).addLocal(liquidOffset)\n                    center.subLocal(liquidOffset)\n                    m_debugDraw!!.drawSegment(center, circCenterMoved, liquidColor)\n                    return\n                }\n                if (wireframe) {\n                    m_debugDraw!!.drawCircle(center, radius, axis, color)\n                } else {\n                    m_debugDraw!!.drawSolidCircle(center, radius, axis, color)\n                }\n            }\n\n            ShapeType.POLYGON -> {\n                val poly = fixture.getShape() as PolygonShape?\n                val vertexCount = poly!!.count\n                assert(vertexCount <= Settings.maxPolygonVertices)\n                val vertices = tlvertices[Settings.maxPolygonVertices]\n\n                for (i in 0 until vertexCount) {\n                    // vertices[i] = Mul(xf, poly.m_vertices[i]);\n                    Transform.mulToOutUnsafe(xf, poly.vertices[i], vertices[i])\n                }\n                if (wireframe) {\n                    m_debugDraw!!.drawPolygon(vertices, vertexCount, color)\n                } else {\n                    m_debugDraw!!.drawSolidPolygon(vertices, vertexCount, color)\n                }\n            }\n            ShapeType.EDGE -> {\n                val edge = fixture.getShape() as EdgeShape?\n                Transform.mulToOutUnsafe(xf, edge!!.vertex1, v1)\n                Transform.mulToOutUnsafe(xf, edge.vertex2, v2)\n                m_debugDraw!!.drawSegment(v1, v2, color)\n            }\n            ShapeType.CHAIN -> {\n                val chain = fixture.getShape() as ChainShape?\n                val count = chain!!.count\n                val vertices = chain.vertices\n\n                Transform.mulToOutUnsafe(xf, vertices!![0], v1)\n                for (i in 1 until count) {\n                    Transform.mulToOutUnsafe(xf, vertices[i], v2)\n                    m_debugDraw!!.drawSegment(v1, v2, color)\n                    m_debugDraw!!.drawCircle(v1, 0.05f, color)\n                    v1.set(v2)\n                }\n            }\n            else -> {\n            }\n        }\n    }\n\n    private fun drawParticleSystem(system: ParticleSystem) {\n        val wireframe = m_debugDraw!!.flags and DebugDraw.e_wireframeDrawingBit != 0\n        val particleCount = system.particleCount\n        if (particleCount != 0) {\n            val particleRadius = system.particleRadius\n            val positionBuffer = system.particlePositionBuffer\n            var colorBuffer: Array<ParticleColor>? = null\n            if (system.m_colorBuffer.data != null) {\n                colorBuffer = system.particleColorBuffer\n            }\n            if (wireframe) {\n                m_debugDraw!!.drawParticlesWireframe(positionBuffer!!, particleRadius, colorBuffer!!, particleCount)\n            } else {\n                m_debugDraw!!.drawParticles(positionBuffer!!, particleRadius, colorBuffer!!, particleCount)\n            }\n        }\n    }\n\n    /**\n     * Create a particle whose properties have been defined. No reference to the definition is\n     * retained. A simulation step must occur before it's possible to interact with a newly created\n     * particle. For example, DestroyParticleInShape() will not destroy a particle until Step() has\n     * been called.\n     *\n     * @warning This function is locked during callbacks.\n     * @return the index of the particle.\n     */\n    fun createParticle(def: ParticleDef): Int {\n        assert(!isLocked)\n        if (isLocked) {\n            return 0\n        }\n        val p = m_particleSystem.createParticle(def)\n        return p\n    }\n\n    /**\n     * Destroy a particle. The particle is removed after the next step.\n     *\n     * @param Index of the particle to destroy.\n     * @param Whether to call the destruction listener just before the particle is destroyed.\n     */\n\n    fun destroyParticle(index: Int, callDestructionListener: Boolean = false) {\n        m_particleSystem.destroyParticle(index, callDestructionListener)\n    }\n\n    /**\n     * Destroy particles inside a shape. This function is locked during callbacks. In addition, this\n     * function immediately destroys particles in the shape in contrast to DestroyParticle() which\n     * defers the destruction until the next simulation step.\n     *\n     * @param Shape which encloses particles that should be destroyed.\n     * @param Transform applied to the shape.\n     * @param Whether to call the world b2DestructionListener for each particle destroyed.\n     * @warning This function is locked during callbacks.\n     * @return Number of particles destroyed.\n     */\n\n    fun destroyParticlesInShape(shape: Shape, xf: Transform, callDestructionListener: Boolean = false): Int {\n        assert(!isLocked)\n        return if (isLocked) {\n            0\n        } else m_particleSystem.destroyParticlesInShape(shape, xf, callDestructionListener)\n    }\n\n    /**\n     * Create a particle group whose properties have been defined. No reference to the definition is\n     * retained.\n     *\n     * @warning This function is locked during callbacks.\n     */\n    fun createParticleGroup(def: ParticleGroupDef): ParticleGroup? {\n        assert(!isLocked)\n        if (isLocked) {\n            return null\n        }\n        val g = m_particleSystem.createParticleGroup(def)\n        return g\n    }\n\n    /**\n     * Join two particle groups.\n     *\n     * @param the first group. Expands to encompass the second group.\n     * @param the second group. It is destroyed.\n     * @warning This function is locked during callbacks.\n     */\n    fun joinParticleGroups(groupA: ParticleGroup, groupB: ParticleGroup) {\n        assert(!isLocked)\n        if (isLocked) {\n            return\n        }\n        m_particleSystem.joinParticleGroups(groupA, groupB)\n    }\n\n    /**\n     * Destroy particles in a group. This function is locked during callbacks.\n     *\n     * @param The particle group to destroy.\n     * @param Whether to call the world b2DestructionListener for each particle is destroyed.\n     * @warning This function is locked during callbacks.\n     */\n\n    fun destroyParticlesInGroup(group: ParticleGroup, callDestructionListener: Boolean = false) {\n        assert(!isLocked)\n        if (isLocked) {\n            return\n        }\n        m_particleSystem.destroyParticlesInGroup(group, callDestructionListener)\n    }\n\n    /**\n     * Set a buffer for particle data.\n     *\n     * @param buffer is a pointer to a block of memory.\n     * @param size is the number of values in the block.\n     */\n    fun setParticleFlagsBuffer(buffer: IntArray, capacity: Int) {\n        m_particleSystem.setParticleFlagsBuffer(buffer, capacity)\n    }\n\n    fun setParticlePositionBuffer(buffer: Array<Vec2>, capacity: Int) {\n        m_particleSystem.setParticlePositionBuffer(buffer, capacity)\n\n    }\n\n    fun setParticleVelocityBuffer(buffer: Array<Vec2>, capacity: Int) {\n        m_particleSystem.setParticleVelocityBuffer(buffer, capacity)\n\n    }\n\n    fun setParticleColorBuffer(buffer: Array<ParticleColor>, capacity: Int) {\n        m_particleSystem.setParticleColorBuffer(buffer, capacity)\n\n    }\n\n    fun setParticleUserDataBuffer(buffer: Array<Any>, capacity: Int) {\n        m_particleSystem.setParticleUserDataBuffer(buffer, capacity)\n    }\n\n    /**\n     * Compute the kinetic energy that can be lost by damping force\n     *\n     * @return\n     */\n    fun computeParticleCollisionEnergy(): Float {\n        return m_particleSystem.computeParticleCollisionEnergy()\n    }\n\n    companion object {\n        val WORLD_POOL_SIZE = 100\n        val WORLD_POOL_CONTAINER_SIZE = 10\n\n        val NEW_FIXTURE = 0x0001\n        val LOCKED = 0x0002\n        val CLEAR_FORCES = 0x0004\n\n        // NOTE this corresponds to the liquid test, so the debugdraw can draw\n        // the liquid particles correctly. They should be the same.\n        private val LIQUID_INT = 1234598372\n    }\n}\n/**\n * Construct a world object.\n *\n * @param gravity the world gravity vector.\n */\n/**\n * Construct a world object.\n *\n * @param gravity the world gravity vector.\n */\n/**\n * Destroy a particle. The particle is removed after the next step.\n *\n * @param index\n */\n/**\n * Destroy particles inside a shape without enabling the destruction callback for destroyed\n * particles. This function is locked during callbacks. For more information see\n * DestroyParticleInShape(Shape&, Transform&,bool).\n *\n * @param Shape which encloses particles that should be destroyed.\n * @param Transform applied to the shape.\n * @warning This function is locked during callbacks.\n * @return Number of particles destroyed.\n */\n/**\n * Destroy particles in a group without enabling the destruction callback for destroyed particles.\n * This function is locked during callbacks.\n *\n * @param The particle group to destroy.\n * @warning This function is locked during callbacks.\n */\n\n\ninternal class WorldQueryWrapper : TreeCallback {\n\n    var broadPhase: BroadPhase? = null\n    var callback: QueryCallback? = null\n    override fun treeCallback(nodeId: Int): Boolean {\n        val proxy = broadPhase!!.getUserData(nodeId) as FixtureProxy?\n        return callback!!.reportFixture(proxy!!.fixture!!)\n    }\n}\n\n\ninternal class WorldRayCastWrapper : TreeRayCastCallback {\n\n    // djm pooling\n    private val output = RayCastOutput()\n    private val temp = Vec2()\n    private val point = Vec2()\n\n    var broadPhase: BroadPhase? = null\n    var callback: RayCastCallback? = null\n\n    override fun raycastCallback(input: RayCastInput, nodeId: Int): Float {\n        val userData = broadPhase!!.getUserData(nodeId)\n        val proxy = userData as FixtureProxy?\n        val fixture = proxy!!.fixture\n        val index = proxy.childIndex\n        val hit = fixture!!.raycast(output, input, index)\n\n        if (hit) {\n            val fraction = output.fraction\n            // Vec2 point = (1.0f - fraction) * input.p1 + fraction * input.p2;\n            temp.set(input.p2).mulLocal(fraction)\n            point.set(input.p1).mulLocal(1 - fraction).addLocal(temp)\n            return callback!!.reportFixture(fixture, point, output.normal, fraction)\n        }\n\n        return input.maxFraction\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * Created at 3:43:53 AM Jul 7, 2010\n */\npackage org.jbox2d.callbacks\n\nimport org.jbox2d.common.Settings\n\n/**\n * Contact impulses for reporting. Impulses are used instead of forces because sub-step forces may\n * approach infinity for rigid body collisions. These match up one-to-one with the contact points in\n * b2Manifold.\n *\n * @author Daniel Murphy\n */\nclass ContactImpulse {\n    var normalImpulses = FloatArray(Settings.maxManifoldPoints)\n    var tangentImpulses = FloatArray(Settings.maxManifoldPoints)\n    var count: Int = 0\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.collision\n\nimport org.jbox2d.common.MathUtils\nimport org.jbox2d.common.Settings\nimport org.jbox2d.common.Vec2\nimport org.jbox2d.pooling.IWorldPool\nimport org.jbox2d.pooling.normal.DefaultWorldPool\n\n/** An axis-aligned bounding box.  */\nclass AABB {\n    /** Bottom left vertex of bounding box.  */\n\n    val lowerBound: Vec2\n    /** Top right vertex of bounding box.  */\n\n    val upperBound: Vec2\n\n    /** Verify that the bounds are sorted  */\n    val isValid: Boolean\n        get() {\n            val dx = upperBound.x - lowerBound.x\n            if (dx < 0f) {\n                return false\n            }\n            val dy = upperBound.y - lowerBound.y\n            return if (dy < 0) {\n                false\n            } else lowerBound.isValid && upperBound.isValid\n        }\n\n    /**\n     * Get the center of the AABB\n     *\n     * @return\n     */\n    val center: Vec2\n        get() {\n            val center = Vec2(lowerBound)\n            center.addLocal(upperBound)\n            center.mulLocal(.5f)\n            return center\n        }\n\n    /**\n     * Get the extents of the AABB (half-widths).\n     *\n     * @return\n     */\n    val extents: Vec2\n        get() {\n            val center = Vec2(upperBound)\n            center.subLocal(lowerBound)\n            center.mulLocal(.5f)\n            return center\n        }\n\n    /**\n     * Gets the perimeter length\n     *\n     * @return\n     */\n    val perimeter: Float\n        get() = 2.0f * (upperBound.x - lowerBound.x + upperBound.y - lowerBound.y)\n\n    /**\n     * Creates the default object, with vertices at 0,0 and 0,0.\n     */\n    constructor() {\n        lowerBound = Vec2()\n        upperBound = Vec2()\n    }\n\n    /**\n     * Copies from the given object\n     *\n     * @param copy the object to copy from\n     */\n    constructor(copy: AABB) : this(copy.lowerBound, copy.upperBound) {}\n\n    /**\n     * Creates an AABB object using the given bounding vertices.\n     *\n     * @param lowerVertex the bottom left vertex of the bounding box\n     * @param maxVertex the top right vertex of the bounding box\n     */\n    constructor(lowerVertex: Vec2, upperVertex: Vec2) {\n        this.lowerBound = lowerVertex.clone() // clone to be safe\n        this.upperBound = upperVertex.clone()\n    }\n\n    /**\n     * Sets this object from the given object\n     *\n     * @param aabb the object to copy from\n     */\n    fun set(aabb: AABB) {\n        val v = aabb.lowerBound\n        lowerBound.x = v.x\n        lowerBound.y = v.y\n        val v1 = aabb.upperBound\n        upperBound.x = v1.x\n        upperBound.y = v1.y\n    }\n\n    fun getCenterToOut(out: Vec2) {\n        out.x = (lowerBound.x + upperBound.x) * .5f\n        out.y = (lowerBound.y + upperBound.y) * .5f\n    }\n\n    fun getExtentsToOut(out: Vec2) {\n        out.x = (upperBound.x - lowerBound.x) * .5f\n        out.y = (upperBound.y - lowerBound.y) * .5f // thanks FDN1\n    }\n\n    fun getVertices(argRay: Array<Vec2>) {\n        argRay[0].set(lowerBound)\n        argRay[1].set(lowerBound)\n        argRay[1].x += upperBound.x - lowerBound.x\n        argRay[2].set(upperBound)\n        argRay[3].set(upperBound)\n        argRay[3].x -= upperBound.x - lowerBound.x\n    }\n\n    /**\n     * Combine two AABBs into this one.\n     *\n     * @param aabb1\n     * @param aab\n     */\n    fun combine(aabb1: AABB, aab: AABB) {\n        lowerBound.x = if (aabb1.lowerBound.x < aab.lowerBound.x) aabb1.lowerBound.x else aab.lowerBound.x\n        lowerBound.y = if (aabb1.lowerBound.y < aab.lowerBound.y) aabb1.lowerBound.y else aab.lowerBound.y\n        upperBound.x = if (aabb1.upperBound.x > aab.upperBound.x) aabb1.upperBound.x else aab.upperBound.x\n        upperBound.y = if (aabb1.upperBound.y > aab.upperBound.y) aabb1.upperBound.y else aab.upperBound.y\n    }\n\n    /**\n     * Combines another aabb with this one\n     *\n     * @param aabb\n     */\n    fun combine(aabb: AABB) {\n        lowerBound.x = if (lowerBound.x < aabb.lowerBound.x) lowerBound.x else aabb.lowerBound.x\n        lowerBound.y = if (lowerBound.y < aabb.lowerBound.y) lowerBound.y else aabb.lowerBound.y\n        upperBound.x = if (upperBound.x > aabb.upperBound.x) upperBound.x else aabb.upperBound.x\n        upperBound.y = if (upperBound.y > aabb.upperBound.y) upperBound.y else aabb.upperBound.y\n    }\n\n    /**\n     * Does this aabb contain the provided AABB.\n     *\n     * @return\n     */\n    operator fun contains(aabb: AABB): Boolean {\n        /*\n     * boolean result = true; result = result && lowerBound.x <= aabb.lowerBound.x; result = result\n     * && lowerBound.y <= aabb.lowerBound.y; result = result && aabb.upperBound.x <= upperBound.x;\n     * result = result && aabb.upperBound.y <= upperBound.y; return result;\n     */\n        // djm: faster putting all of them together, as if one is false we leave the logic\n        // early\n        return (lowerBound.x <= aabb.lowerBound.x && lowerBound.y <= aabb.lowerBound.y\n                && aabb.upperBound.x <= upperBound.x && aabb.upperBound.y <= upperBound.y)\n    }\n\n    /**\n     * From Real-time Collision Detection, p179.\n     *\n     * @param output\n     * @param input\n     */\n\n    fun raycast(output: RayCastOutput, input: RayCastInput,\n                argPool: IWorldPool = DefaultWorldPool(4, 4)): Boolean {\n        var tmin = -Float.MAX_VALUE\n        var tmax = Float.MAX_VALUE\n\n        val p = argPool.popVec2()\n        val d = argPool.popVec2()\n        val absD = argPool.popVec2()\n        val normal = argPool.popVec2()\n\n        p.set(input.p1)\n        d.set(input.p2).subLocal(input.p1)\n        Vec2.absToOut(d, absD)\n\n        // x then y\n        if (absD.x < Settings.EPSILON) {\n            // Parallel.\n            if (p.x < lowerBound.x || upperBound.x < p.x) {\n                argPool.pushVec2(4)\n                return false\n            }\n        } else {\n            val inv_d = 1.0f / d.x\n            var t1 = (lowerBound.x - p.x) * inv_d\n            var t2 = (upperBound.x - p.x) * inv_d\n\n            // Sign of the normal vector.\n            var s = -1.0f\n\n            if (t1 > t2) {\n                val temp = t1\n                t1 = t2\n                t2 = temp\n                s = 1.0f\n            }\n\n            // Push the min up\n            if (t1 > tmin) {\n                normal.setZero()\n                normal.x = s\n                tmin = t1\n            }\n\n            // Pull the max down\n            tmax = MathUtils.min(tmax, t2)\n\n            if (tmin > tmax) {\n                argPool.pushVec2(4)\n                return false\n            }\n        }\n\n        if (absD.y < Settings.EPSILON) {\n            // Parallel.\n            if (p.y < lowerBound.y || upperBound.y < p.y) {\n                argPool.pushVec2(4)\n                return false\n            }\n        } else {\n            val inv_d = 1.0f / d.y\n            var t1 = (lowerBound.y - p.y) * inv_d\n            var t2 = (upperBound.y - p.y) * inv_d\n\n            // Sign of the normal vector.\n            var s = -1.0f\n\n            if (t1 > t2) {\n                val temp = t1\n                t1 = t2\n                t2 = temp\n                s = 1.0f\n            }\n\n            // Push the min up\n            if (t1 > tmin) {\n                normal.setZero()\n                normal.y = s\n                tmin = t1\n            }\n\n            // Pull the max down\n            tmax = MathUtils.min(tmax, t2)\n\n            if (tmin > tmax) {\n                argPool.pushVec2(4)\n                return false\n            }\n        }\n\n        // Does the ray start inside the box?\n        // Does the ray intersect beyond the max fraction?\n        if (tmin < 0.0f || input.maxFraction < tmin) {\n            argPool.pushVec2(4)\n            return false\n        }\n\n        // Intersection.\n        output.fraction = tmin\n        output.normal.x = normal.x\n        output.normal.y = normal.y\n        argPool.pushVec2(4)\n        return true\n    }\n\n    override fun toString(): String {\n        val s = \"AABB[$lowerBound . $upperBound]\"\n        return s\n    }\n\n    companion object {\n        fun testOverlap(a: AABB, b: AABB): Boolean {\n            if (b.lowerBound.x - a.upperBound.x > 0.0f || b.lowerBound.y - a.upperBound.y > 0.0f) {\n                return false\n            }\n\n            return !(a.lowerBound.x - b.upperBound.x > 0.0f || a.lowerBound.y - b.upperBound.y > 0.0f)\n\n        }\n    }\n}\n/**\n * @param output\n * @param input\n * @return\n */\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.collision\n\nimport org.jbox2d.collision.Distance.SimplexCache\nimport org.jbox2d.collision.Manifold.ManifoldType\nimport org.jbox2d.collision.shapes.CircleShape\nimport org.jbox2d.collision.shapes.EdgeShape\nimport org.jbox2d.collision.shapes.PolygonShape\nimport org.jbox2d.collision.shapes.Shape\nimport org.jbox2d.common.MathUtils\nimport org.jbox2d.common.Rot\nimport org.jbox2d.common.Settings\nimport org.jbox2d.common.Transform\nimport org.jbox2d.common.Vec2\nimport org.jbox2d.internal.*\nimport org.jbox2d.pooling.IWorldPool\n\n/**\n * Functions used for computing contact points, distance queries, and TOI queries. Collision methods\n * are non-static for pooling speed, retrieve a collision object from the [SingletonPool].\n * Should not be finalructed.\n *\n * @author Daniel Murphy\n */\nclass Collision(private val pool: IWorldPool) {\n\n    private val input = DistanceInput()\n    private val cache = SimplexCache()\n    private val output = DistanceOutput()\n\n    // djm pooling, and from above\n    private val temp = Vec2()\n    private val xf = Transform()\n    private val n = Vec2()\n    private val v1 = Vec2()\n\n    private val results1 = EdgeResults()\n    private val results2 = EdgeResults()\n    private val incidentEdge = Array<ClipVertex>(2) { ClipVertex() }\n    private val localTangent = Vec2()\n    private val localNormal = Vec2()\n    private val planePoint = Vec2()\n    private val tangent = Vec2()\n    private val v11 = Vec2()\n    private val v12 = Vec2()\n    private val clipPoints1 = Array<ClipVertex>(2) { ClipVertex() }\n    private val clipPoints2 = Array<ClipVertex>(2) { ClipVertex() }\n\n    private val Q = Vec2()\n    private val e = Vec2()\n    private val cf = ContactID()\n    private val e1 = Vec2()\n    private val P = Vec2()\n\n    private val collider = EPCollider()\n\n    /**\n     * Determine if two generic shapes overlap.\n     *\n     * @param shapeA\n     * @param shapeB\n     * @param xfA\n     * @param xfB\n     * @return\n     */\n    fun testOverlap(shapeA: Shape, indexA: Int, shapeB: Shape, indexB: Int,\n                    xfA: Transform, xfB: Transform): Boolean {\n        input.proxyA.set(shapeA, indexA)\n        input.proxyB.set(shapeB, indexB)\n        input.transformA.set(xfA)\n        input.transformB.set(xfB)\n        input.useRadii = true\n\n        cache.count = 0\n\n        pool.distance.distance(output, cache, input)\n        // djm note: anything significant about 10.0f?\n        return output.distance < 10.0f * Settings.EPSILON\n    }\n\n    /**\n     * Compute the collision manifold between two circles.\n     *\n     * @param manifold\n     * @param circle1\n     * @param xfA\n     * @param circle2\n     * @param xfB\n     */\n    fun collideCircles(manifold: Manifold, circle1: CircleShape,\n                       xfA: Transform, circle2: CircleShape, xfB: Transform) {\n        manifold.pointCount = 0\n        // before inline:\n        // Transform.mulToOut(xfA, circle1.m_p, pA);\n        // Transform.mulToOut(xfB, circle2.m_p, pB);\n        // d.set(pB).subLocal(pA);\n        // float distSqr = d.x * d.x + d.y * d.y;\n\n        // after inline:\n        val circle1p = circle1.p\n        val circle2p = circle2.p\n        val pAx = xfA.q.c * circle1p.x - xfA.q.s * circle1p.y + xfA.p.x\n        val pAy = xfA.q.s * circle1p.x + xfA.q.c * circle1p.y + xfA.p.y\n        val pBx = xfB.q.c * circle2p.x - xfB.q.s * circle2p.y + xfB.p.x\n        val pBy = xfB.q.s * circle2p.x + xfB.q.c * circle2p.y + xfB.p.y\n        val dx = pBx - pAx\n        val dy = pBy - pAy\n        val distSqr = dx * dx + dy * dy\n        // end inline\n\n        val radius = circle1.radius + circle2.radius\n        if (distSqr > radius * radius) {\n            return\n        }\n\n        manifold.type = ManifoldType.CIRCLES\n        manifold.localPoint.set(circle1p)\n        manifold.localNormal.setZero()\n        manifold.pointCount = 1\n\n        manifold.points[0].localPoint.set(circle2p)\n        manifold.points[0].id.zero()\n    }\n\n    // djm pooling, and from above\n\n    /**\n     * Compute the collision manifold between a polygon and a circle.\n     *\n     * @param manifold\n     * @param polygon\n     * @param xfA\n     * @param circle\n     * @param xfB\n     */\n    fun collidePolygonAndCircle(manifold: Manifold, polygon: PolygonShape,\n                                xfA: Transform, circle: CircleShape, xfB: Transform) {\n        manifold.pointCount = 0\n        // Vec2 v = circle.m_p;\n\n        // Compute circle position in the frame of the polygon.\n        // before inline:\n        // Transform.mulToOutUnsafe(xfB, circle.m_p, c);\n        // Transform.mulTransToOut(xfA, c, cLocal);\n        // final float cLocalx = cLocal.x;\n        // final float cLocaly = cLocal.y;\n        // after inline:\n        val circlep = circle.p\n        val xfBq = xfB.q\n        val xfAq = xfA.q\n        val cx = xfBq.c * circlep.x - xfBq.s * circlep.y + xfB.p.x\n        val cy = xfBq.s * circlep.x + xfBq.c * circlep.y + xfB.p.y\n        val px = cx - xfA.p.x\n        val py = cy - xfA.p.y\n        val cLocalx = xfAq.c * px + xfAq.s * py\n        val cLocaly = -xfAq.s * px + xfAq.c * py\n        // end inline\n\n        // Find the min separating edge.\n        var normalIndex = 0\n        var separation = -Float.MAX_VALUE\n        val radius = polygon.radius + circle.radius\n        val vertexCount = polygon.count\n        var s: Float\n        val vertices = polygon.vertices\n        val normals = polygon.normals\n\n        for (i in 0 until vertexCount) {\n            // before inline\n            // temp.set(cLocal).subLocal(vertices[i]);\n            // float s = Vec2.dot(normals[i], temp);\n            // after inline\n            val vertex = vertices[i]\n            val tempx = cLocalx - vertex.x\n            val tempy = cLocaly - vertex.y\n            s = normals[i].x * tempx + normals[i].y * tempy\n\n\n            if (s > radius) {\n                // early out\n                return\n            }\n\n            if (s > separation) {\n                separation = s\n                normalIndex = i\n            }\n        }\n\n        // Vertices that subtend the incident face.\n        val vertIndex1 = normalIndex\n        val vertIndex2 = if (vertIndex1 + 1 < vertexCount) vertIndex1 + 1 else 0\n        val v1 = vertices[vertIndex1]\n        val v2 = vertices[vertIndex2]\n\n        // If the center is inside the polygon ...\n        if (separation < Settings.EPSILON) {\n            manifold.pointCount = 1\n            manifold.type = ManifoldType.FACE_A\n\n            // before inline:\n            // manifold.localNormal.set(normals[normalIndex]);\n            // manifold.localPoint.set(v1).addLocal(v2).mulLocal(.5f);\n            // manifold.points[0].localPoint.set(circle.m_p);\n            // after inline:\n            val normal = normals[normalIndex]\n            manifold.localNormal.x = normal.x\n            manifold.localNormal.y = normal.y\n            manifold.localPoint.x = (v1.x + v2.x) * .5f\n            manifold.localPoint.y = (v1.y + v2.y) * .5f\n            val mpoint = manifold.points[0]\n            mpoint.localPoint.x = circlep.x\n            mpoint.localPoint.y = circlep.y\n            mpoint.id.zero()\n            // end inline\n\n            return\n        }\n\n        // Compute barycentric coordinates\n        // before inline:\n        // temp.set(cLocal).subLocal(v1);\n        // temp2.set(v2).subLocal(v1);\n        // float u1 = Vec2.dot(temp, temp2);\n        // temp.set(cLocal).subLocal(v2);\n        // temp2.set(v1).subLocal(v2);\n        // float u2 = Vec2.dot(temp, temp2);\n        // after inline:\n        val tempX = cLocalx - v1.x\n        val tempY = cLocaly - v1.y\n        val temp2X = v2.x - v1.x\n        val temp2Y = v2.y - v1.y\n        val u1 = tempX * temp2X + tempY * temp2Y\n\n        val temp3X = cLocalx - v2.x\n        val temp3Y = cLocaly - v2.y\n        val temp4X = v1.x - v2.x\n        val temp4Y = v1.y - v2.y\n        val u2 = temp3X * temp4X + temp3Y * temp4Y\n        // end inline\n\n        if (u1 <= 0f) {\n            // inlined\n            val dx = cLocalx - v1.x\n            val dy = cLocaly - v1.y\n            if (dx * dx + dy * dy > radius * radius) {\n                return\n            }\n\n            manifold.pointCount = 1\n            manifold.type = ManifoldType.FACE_A\n            // before inline:\n            // manifold.localNormal.set(cLocal).subLocal(v1);\n            // after inline:\n            manifold.localNormal.x = cLocalx - v1.x\n            manifold.localNormal.y = cLocaly - v1.y\n            // end inline\n            manifold.localNormal.normalize()\n            manifold.localPoint.set(v1)\n            manifold.points[0].localPoint.set(circlep)\n            manifold.points[0].id.zero()\n        } else if (u2 <= 0.0f) {\n            // inlined\n            val dx = cLocalx - v2.x\n            val dy = cLocaly - v2.y\n            if (dx * dx + dy * dy > radius * radius) {\n                return\n            }\n\n            manifold.pointCount = 1\n            manifold.type = ManifoldType.FACE_A\n            // before inline:\n            // manifold.localNormal.set(cLocal).subLocal(v2);\n            // after inline:\n            manifold.localNormal.x = cLocalx - v2.x\n            manifold.localNormal.y = cLocaly - v2.y\n            // end inline\n            manifold.localNormal.normalize()\n            manifold.localPoint.set(v2)\n            manifold.points[0].localPoint.set(circlep)\n            manifold.points[0].id.zero()\n        } else {\n            // Vec2 faceCenter = 0.5f * (v1 + v2);\n            // (temp is faceCenter)\n            // before inline:\n            // temp.set(v1).addLocal(v2).mulLocal(.5f);\n            //\n            // temp2.set(cLocal).subLocal(temp);\n            // separation = Vec2.dot(temp2, normals[vertIndex1]);\n            // if (separation > radius) {\n            // return;\n            // }\n            // after inline:\n            val fcx = (v1.x + v2.x) * .5f\n            val fcy = (v1.y + v2.y) * .5f\n\n            val tx = cLocalx - fcx\n            val ty = cLocaly - fcy\n            val normal = normals[vertIndex1]\n            separation = tx * normal.x + ty * normal.y\n            if (separation > radius) {\n                return\n            }\n            // end inline\n\n            manifold.pointCount = 1\n            manifold.type = ManifoldType.FACE_A\n            manifold.localNormal.set(normals[vertIndex1])\n            manifold.localPoint.x = fcx // (faceCenter)\n            manifold.localPoint.y = fcy\n            manifold.points[0].localPoint.set(circlep)\n            manifold.points[0].id.zero()\n        }\n    }\n\n    private val poolVec2 = Vec2()\n\n    /**\n     * Find the max separation between poly1 and poly2 using edge normals from poly1.\n     *\n     * @param edgeIndex\n     * @param poly1\n     * @param xf1\n     * @param poly2\n     * @param xf2\n     * @return\n     */\n    fun findMaxSeparation(results: EdgeResults, poly1: PolygonShape,\n                          xf1: Transform, poly2: PolygonShape, xf2: Transform) {\n        val count1 = poly1.count\n        val count2 = poly2.count\n        val n1s = poly1.normals\n        val v1s = poly1.vertices\n        val v2s = poly2.vertices\n\n        Transform.mulTransToOutUnsafe(xf2, xf1, xf, poolVec2)\n        val xfq = xf.q\n\n        var bestIndex = 0\n        var maxSeparation = -Float.MAX_VALUE\n        for (i in 0 until count1) {\n            // Get poly1 normal in frame2.\n            Rot.mulToOutUnsafe(xfq, n1s[i], n)\n            Transform.mulToOutUnsafe(xf, v1s[i], v1)\n\n            // Find deepest point for normal i.\n            var si = Float.MAX_VALUE\n            for (j in 0 until count2) {\n                val v2sj = v2s[j]\n                val sij = n.x * (v2sj.x - v1.x) + n.y * (v2sj.y - v1.y)\n                if (sij < si) {\n                    si = sij\n                }\n            }\n\n            if (si > maxSeparation) {\n                maxSeparation = si\n                bestIndex = i\n            }\n        }\n\n        results.edgeIndex = bestIndex\n        results.separation = maxSeparation\n    }\n\n    fun findIncidentEdge(c: Array<ClipVertex>, poly1: PolygonShape,\n                         xf1: Transform, edge1: Int, poly2: PolygonShape, xf2: Transform) {\n        val count1 = poly1.count\n        val normals1 = poly1.normals\n\n        val count2 = poly2.count\n        val vertices2 = poly2.vertices\n        val normals2 = poly2.normals\n\n        assert(0 <= edge1 && edge1 < count1)\n\n        val c0 = c[0]\n        val c1 = c[1]\n        val xf1q = xf1.q\n        val xf2q = xf2.q\n\n        // Get the normal of the reference edge in poly2's frame.\n        // Vec2 normal1 = MulT(xf2.R, Mul(xf1.R, normals1[edge1]));\n        // before inline:\n        // Rot.mulToOutUnsafe(xf1.q, normals1[edge1], normal1); // temporary\n        // Rot.mulTrans(xf2.q, normal1, normal1);\n        // after inline:\n        val v = normals1[edge1]\n        val tempx = xf1q.c * v.x - xf1q.s * v.y\n        val tempy = xf1q.s * v.x + xf1q.c * v.y\n        val normal1x = xf2q.c * tempx + xf2q.s * tempy\n        val normal1y = -xf2q.s * tempx + xf2q.c * tempy\n\n        // end inline\n\n        // Find the incident edge on poly2.\n        var index = 0\n        var minDot = Float.MAX_VALUE\n        for (i in 0 until count2) {\n            val b = normals2[i]\n            val dot = normal1x * b.x + normal1y * b.y\n            if (dot < minDot) {\n                minDot = dot\n                index = i\n            }\n        }\n\n        // Build the clip vertices for the incident edge.\n        val i1 = index\n        val i2 = if (i1 + 1 < count2) i1 + 1 else 0\n\n        // c0.v = Mul(xf2, vertices2[i1]);\n        val v1 = vertices2[i1]\n        val out = c0.v\n        out.x = xf2q.c * v1.x - xf2q.s * v1.y + xf2.p.x\n        out.y = xf2q.s * v1.x + xf2q.c * v1.y + xf2.p.y\n        c0.id.indexA = edge1.toByte()\n        c0.id.indexB = i1.toByte()\n        c0.id.typeA = ContactID.Type.FACE.ordinal.toByte()\n        c0.id.typeB = ContactID.Type.VERTEX.ordinal.toByte()\n\n        // c1.v = Mul(xf2, vertices2[i2]);\n        val v2 = vertices2[i2]\n        val out1 = c1.v\n        out1.x = xf2q.c * v2.x - xf2q.s * v2.y + xf2.p.x\n        out1.y = xf2q.s * v2.x + xf2q.c * v2.y + xf2.p.y\n        c1.id.indexA = edge1.toByte()\n        c1.id.indexB = i2.toByte()\n        c1.id.typeA = ContactID.Type.FACE.ordinal.toByte()\n        c1.id.typeB = ContactID.Type.VERTEX.ordinal.toByte()\n    }\n\n    /**\n     * Compute the collision manifold between two polygons.\n     *\n     * @param manifold\n     * @param polygon1\n     * @param xf1\n     * @param polygon2\n     * @param xf2\n     */\n    fun collidePolygons(manifold: Manifold, polyA: PolygonShape,\n                        xfA: Transform, polyB: PolygonShape, xfB: Transform) {\n        // Find edge normal of max separation on A - return if separating axis is found\n        // Find edge normal of max separation on B - return if separation axis is found\n        // Choose reference edge as min(minA, minB)\n        // Find incident edge\n        // Clip\n\n        // The normal points from 1 to 2\n\n        manifold.pointCount = 0\n        val totalRadius = polyA.radius + polyB.radius\n\n        findMaxSeparation(results1, polyA, xfA, polyB, xfB)\n        if (results1.separation > totalRadius) {\n            return\n        }\n\n        findMaxSeparation(results2, polyB, xfB, polyA, xfA)\n        if (results2.separation > totalRadius) {\n            return\n        }\n\n        val poly1: PolygonShape  // reference polygon\n        val poly2: PolygonShape  // incident polygon\n        val xf1: Transform\n        val xf2: Transform\n        val edge1: Int                 // reference edge\n        val flip: Boolean\n        val k_tol = 0.1f * Settings.linearSlop\n\n        if (results2.separation > results1.separation + k_tol) {\n            poly1 = polyB\n            poly2 = polyA\n            xf1 = xfB\n            xf2 = xfA\n            edge1 = results2.edgeIndex\n            manifold.type = ManifoldType.FACE_B\n            flip = true\n        } else {\n            poly1 = polyA\n            poly2 = polyB\n            xf1 = xfA\n            xf2 = xfB\n            edge1 = results1.edgeIndex\n            manifold.type = ManifoldType.FACE_A\n            flip = false\n        }\n        val xf1q = xf1.q\n\n        findIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2)\n\n        val count1 = poly1.count\n        val vertices1 = poly1.vertices\n\n        val iv1 = edge1\n        val iv2 = if (edge1 + 1 < count1) edge1 + 1 else 0\n        v11.set(vertices1[iv1])\n        v12.set(vertices1[iv2])\n        localTangent.x = v12.x - v11.x\n        localTangent.y = v12.y - v11.y\n        localTangent.normalize()\n\n        // Vec2 localNormal = Vec2.cross(dv, 1.0f);\n        localNormal.x = 1f * localTangent.y\n        localNormal.y = -1f * localTangent.x\n\n        // Vec2 planePoint = 0.5f * (v11+ v12);\n        planePoint.x = (v11.x + v12.x) * .5f\n        planePoint.y = (v11.y + v12.y) * .5f\n\n        // Rot.mulToOutUnsafe(xf1.q, localTangent, tangent);\n        tangent.x = xf1q.c * localTangent.x - xf1q.s * localTangent.y\n        tangent.y = xf1q.s * localTangent.x + xf1q.c * localTangent.y\n\n        // Vec2.crossToOutUnsafe(tangent, 1f, normal);\n        val normalx = 1f * tangent.y\n        val normaly = -1f * tangent.x\n\n\n        Transform.mulToOut(xf1, v11, v11)\n        Transform.mulToOut(xf1, v12, v12)\n        // v11 = Mul(xf1, v11);\n        // v12 = Mul(xf1, v12);\n\n        // Face offset\n        // float frontOffset = Vec2.dot(normal, v11);\n        val frontOffset = normalx * v11.x + normaly * v11.y\n\n        // Side offsets, extended by polytope skin thickness.\n        // float sideOffset1 = -Vec2.dot(tangent, v11) + totalRadius;\n        // float sideOffset2 = Vec2.dot(tangent, v12) + totalRadius;\n        val sideOffset1 = -(tangent.x * v11.x + tangent.y * v11.y) + totalRadius\n        val sideOffset2 = tangent.x * v12.x + tangent.y * v12.y + totalRadius\n\n        // Clip incident edge against extruded edge1 side edges.\n        // ClipVertex clipPoints1[2];\n        // ClipVertex clipPoints2[2];\n        var np: Int\n\n        // Clip to box side 1\n        // np = ClipSegmentToLine(clipPoints1, incidentEdge, -sideNormal, sideOffset1);\n        tangent.negateLocal()\n        np = clipSegmentToLine(clipPoints1, incidentEdge, tangent, sideOffset1, iv1)\n        tangent.negateLocal()\n\n        if (np < 2) {\n            return\n        }\n\n        // Clip to negative box side 1\n        np = clipSegmentToLine(clipPoints2, clipPoints1, tangent, sideOffset2, iv2)\n\n        if (np < 2) {\n            return\n        }\n\n        // Now clipPoints2 contains the clipped points.\n        manifold.localNormal.set(localNormal)\n        manifold.localPoint.set(planePoint)\n\n        var pointCount = 0\n        for (i in 0 until Settings.maxManifoldPoints) {\n            // float separation = Vec2.dot(normal, clipPoints2[i].v) - frontOffset;\n            val separation = normalx * clipPoints2[i].v.x + normaly * clipPoints2[i].v.y - frontOffset\n\n            if (separation <= totalRadius) {\n                val cp = manifold.points[pointCount]\n                // cp.m_localPoint = MulT(xf2, clipPoints2[i].v);\n                val out = cp.localPoint\n                val px = clipPoints2[i].v.x - xf2.p.x\n                val py = clipPoints2[i].v.y - xf2.p.y\n                out.x = xf2.q.c * px + xf2.q.s * py\n                out.y = -xf2.q.s * px + xf2.q.c * py\n                cp.id.set(clipPoints2[i].id)\n                if (flip) {\n                    // Swap features\n                    cp.id.flip()\n                }\n                ++pointCount\n            }\n        }\n\n        manifold.pointCount = pointCount\n    }\n\n    // Compute contact points for edge versus circle.\n    // This accounts for edge connectivity.\n    fun collideEdgeAndCircle(manifold: Manifold, edgeA: EdgeShape, xfA: Transform,\n                             circleB: CircleShape, xfB: Transform) {\n        manifold.pointCount = 0\n\n\n        // Compute circle in frame of edge\n        // Vec2 Q = MulT(xfA, Mul(xfB, circleB.m_p));\n        Transform.mulToOutUnsafe(xfB, circleB.p, temp)\n        Transform.mulTransToOutUnsafe(xfA, temp, Q)\n\n        val A = edgeA.vertex1\n        val B = edgeA.vertex2\n        e.set(B).subLocal(A)\n\n        // Barycentric coordinates\n        val u = Vec2.dot(e, temp.set(B).subLocal(Q))\n        val v = Vec2.dot(e, temp.set(Q).subLocal(A))\n\n        val radius = edgeA.radius + circleB.radius\n\n        // ContactFeature cf;\n        cf.indexB = 0\n        cf.typeB = ContactID.Type.VERTEX.ordinal.toByte()\n\n        // Region A\n        if (v <= 0.0f) {\n            val P = A\n            d.set(Q).subLocal(P)\n            val dd = Vec2.dot(d, d)\n            if (dd > radius * radius) {\n                return\n            }\n\n            // Is there an edge connected to A?\n            if (edgeA.hasVertex0) {\n                val A1 = edgeA.vertex0\n                val B1 = A\n                e1.set(B1).subLocal(A1)\n                val u1 = Vec2.dot(e1, temp.set(B1).subLocal(Q))\n\n                // Is the circle in Region AB of the previous edge?\n                if (u1 > 0.0f) {\n                    return\n                }\n            }\n\n            cf.indexA = 0\n            cf.typeA = ContactID.Type.VERTEX.ordinal.toByte()\n            manifold.pointCount = 1\n            manifold.type = Manifold.ManifoldType.CIRCLES\n            manifold.localNormal.setZero()\n            manifold.localPoint.set(P)\n            // manifold.points[0].id.key = 0;\n            manifold.points[0].id.set(cf)\n            manifold.points[0].localPoint.set(circleB.p)\n            return\n        }\n\n        // Region B\n        if (u <= 0.0f) {\n            val P = B\n            d.set(Q).subLocal(P)\n            val dd = Vec2.dot(d, d)\n            if (dd > radius * radius) {\n                return\n            }\n\n            // Is there an edge connected to B?\n            if (edgeA.hasVertex3) {\n                val B2 = edgeA.vertex3\n                val A2 = B\n                val e2 = e1\n                e2.set(B2).subLocal(A2)\n                val v2 = Vec2.dot(e2, temp.set(Q).subLocal(A2))\n\n                // Is the circle in Region AB of the next edge?\n                if (v2 > 0.0f) {\n                    return\n                }\n            }\n\n            cf.indexA = 1\n            cf.typeA = ContactID.Type.VERTEX.ordinal.toByte()\n            manifold.pointCount = 1\n            manifold.type = Manifold.ManifoldType.CIRCLES\n            manifold.localNormal.setZero()\n            manifold.localPoint.set(P)\n            // manifold.points[0].id.key = 0;\n            manifold.points[0].id.set(cf)\n            manifold.points[0].localPoint.set(circleB.p)\n            return\n        }\n\n        // Region AB\n        val den = Vec2.dot(e, e)\n        assert(den > 0.0f)\n\n        // Vec2 P = (1.0f / den) * (u * A + v * B);\n        P.set(A).mulLocal(u).addLocal(temp.set(B).mulLocal(v))\n        P.mulLocal(1.0f / den)\n        d.set(Q).subLocal(P)\n        val dd = Vec2.dot(d, d)\n        if (dd > radius * radius) {\n            return\n        }\n\n        n.x = -e.y\n        n.y = e.x\n        if (Vec2.dot(n, temp.set(Q).subLocal(A)) < 0.0f) {\n            n.set(-n.x, -n.y)\n        }\n        n.normalize()\n\n        cf.indexA = 0\n        cf.typeA = ContactID.Type.FACE.ordinal.toByte()\n        manifold.pointCount = 1\n        manifold.type = Manifold.ManifoldType.FACE_A\n        manifold.localNormal.set(n)\n        manifold.localPoint.set(A)\n        // manifold.points[0].id.key = 0;\n        manifold.points[0].id.set(cf)\n        manifold.points[0].localPoint.set(circleB.p)\n    }\n\n    fun collideEdgeAndPolygon(manifold: Manifold, edgeA: EdgeShape, xfA: Transform,\n                              polygonB: PolygonShape, xfB: Transform) {\n        collider.collide(manifold, edgeA, xfA, polygonB, xfB)\n    }\n\n\n    /**\n     * Java-specific class for returning edge results\n     */\n    class EdgeResults {\n        var separation: Float = 0.toFloat()\n        var edgeIndex: Int = 0\n    }\n\n    /**\n     * Used for computing contact manifolds.\n     */\n    class ClipVertex {\n        val v: Vec2 = Vec2()\n        val id: ContactID = ContactID()\n\n        fun set(cv: ClipVertex) {\n            val v1 = cv.v\n            v.x = v1.x\n            v.y = v1.y\n            val c = cv.id\n            id.indexA = c.indexA\n            id.indexB = c.indexB\n            id.typeA = c.typeA\n            id.typeB = c.typeB\n        }\n    }\n\n    /**\n     * This is used for determining the state of contact points.\n     *\n     * @author Daniel Murphy\n     */\n    enum class PointState {\n        /**\n         * point does not exist\n         */\n        NULL_STATE,\n        /**\n         * point was added in the update\n         */\n        ADD_STATE,\n        /**\n         * point persisted across the update\n         */\n        PERSIST_STATE,\n        /**\n         * point was removed in the update\n         */\n        REMOVE_STATE\n    }\n\n    /**\n     * This structure is used to keep track of the best separating axis.\n     */\n    internal class EPAxis {\n\n        var type: Type? = null\n        var index: Int = 0\n        var separation: Float = 0.toFloat()\n\n        internal enum class Type {\n            UNKNOWN, EDGE_A, EDGE_B\n        }\n    }\n\n    /**\n     * This holds polygon B expressed in frame A.\n     */\n    internal class TempPolygon {\n        val vertices = Array<Vec2>(Settings.maxPolygonVertices) { Vec2() }\n        val normals = Array<Vec2>(Settings.maxPolygonVertices) { Vec2() }\n        var count: Int = 0\n    }\n\n    /**\n     * Reference face used for clipping\n     */\n    internal class ReferenceFace {\n        var i1: Int = 0\n        var i2: Int = 0\n        val v1 = Vec2()\n        val v2 = Vec2()\n        val normal = Vec2()\n\n        val sideNormal1 = Vec2()\n        var sideOffset1: Float = 0.toFloat()\n\n        val sideNormal2 = Vec2()\n        var sideOffset2: Float = 0.toFloat()\n    }\n\n    /**\n     * This class collides and edge and a polygon, taking into account edge adjacency.\n     */\n    internal class EPCollider {\n\n        val m_polygonB = TempPolygon()\n\n        val m_xf = Transform()\n        val m_centroidB = Vec2()\n        var m_v0 = Vec2()\n        var m_v1 = Vec2()\n        var m_v2 = Vec2()\n        var m_v3 = Vec2()\n        val m_normal0 = Vec2()\n        val m_normal1 = Vec2()\n        val m_normal2 = Vec2()\n        val m_normal = Vec2()\n\n        var m_type1: VertexType? = null\n        var m_type2: VertexType? = null\n\n        val m_lowerLimit = Vec2()\n        val m_upperLimit = Vec2()\n        var m_radius: Float = 0.toFloat()\n        var m_front: Boolean = false\n\n        private val edge1 = Vec2()\n        private val temp = Vec2()\n        private val edge0 = Vec2()\n        private val edge2 = Vec2()\n        private val ie = Array<ClipVertex>(2) { ClipVertex() }\n        private val clipPoints1 = Array<ClipVertex>(2) { ClipVertex() }\n        private val clipPoints2 = Array<ClipVertex>(2) { ClipVertex() }\n        private val rf = ReferenceFace()\n        private val edgeAxis = EPAxis()\n        private val polygonAxis = EPAxis()\n\n        private val perp = Vec2()\n        private val n = Vec2()\n\n        internal enum class VertexType {\n            ISOLATED, CONCAVE, CONVEX\n        }\n\n        private val poolVec2 = Vec2()\n\n        fun collide(manifold: Manifold, edgeA: EdgeShape, xfA: Transform,\n                    polygonB: PolygonShape, xfB: Transform) {\n\n            Transform.mulTransToOutUnsafe(xfA, xfB, m_xf, poolVec2)\n            Transform.mulToOutUnsafe(m_xf, polygonB.centroid, m_centroidB)\n\n            m_v0 = edgeA.vertex0\n            m_v1 = edgeA.vertex1\n            m_v2 = edgeA.vertex2\n            m_v3 = edgeA.vertex3\n\n            val hasVertex0 = edgeA.hasVertex0\n            val hasVertex3 = edgeA.hasVertex3\n\n            edge1.set(m_v2).subLocal(m_v1)\n            edge1.normalize()\n            m_normal1.set(edge1.y, -edge1.x)\n            val offset1 = Vec2.dot(m_normal1, temp.set(m_centroidB).subLocal(m_v1))\n            var offset0 = 0.0f\n            var offset2 = 0.0f\n            var convex1 = false\n            var convex2 = false\n\n            // Is there a preceding edge?\n            if (hasVertex0) {\n                edge0.set(m_v1).subLocal(m_v0)\n                edge0.normalize()\n                m_normal0.set(edge0.y, -edge0.x)\n                convex1 = Vec2.cross(edge0, edge1) >= 0.0f\n                offset0 = Vec2.dot(m_normal0, temp.set(m_centroidB).subLocal(m_v0))\n            }\n\n            // Is there a following edge?\n            if (hasVertex3) {\n                edge2.set(m_v3).subLocal(m_v2)\n                edge2.normalize()\n                m_normal2.set(edge2.y, -edge2.x)\n                convex2 = Vec2.cross(edge1, edge2) > 0.0f\n                offset2 = Vec2.dot(m_normal2, temp.set(m_centroidB).subLocal(m_v2))\n            }\n\n            // Determine front or back collision. Determine collision normal limits.\n            if (hasVertex0 && hasVertex3) {\n                if (convex1 && convex2) {\n                    m_front = offset0 >= 0.0f || offset1 >= 0.0f || offset2 >= 0.0f\n                    if (m_front) {\n                        m_normal.x = m_normal1.x\n                        m_normal.y = m_normal1.y\n                        m_lowerLimit.x = m_normal0.x\n                        m_lowerLimit.y = m_normal0.y\n                        m_upperLimit.x = m_normal2.x\n                        m_upperLimit.y = m_normal2.y\n                    } else {\n                        m_normal.x = -m_normal1.x\n                        m_normal.y = -m_normal1.y\n                        m_lowerLimit.x = -m_normal1.x\n                        m_lowerLimit.y = -m_normal1.y\n                        m_upperLimit.x = -m_normal1.x\n                        m_upperLimit.y = -m_normal1.y\n                    }\n                } else if (convex1) {\n                    m_front = offset0 >= 0.0f || offset1 >= 0.0f && offset2 >= 0.0f\n                    if (m_front) {\n                        m_normal.x = m_normal1.x\n                        m_normal.y = m_normal1.y\n                        m_lowerLimit.x = m_normal0.x\n                        m_lowerLimit.y = m_normal0.y\n                        m_upperLimit.x = m_normal1.x\n                        m_upperLimit.y = m_normal1.y\n                    } else {\n                        m_normal.x = -m_normal1.x\n                        m_normal.y = -m_normal1.y\n                        m_lowerLimit.x = -m_normal2.x\n                        m_lowerLimit.y = -m_normal2.y\n                        m_upperLimit.x = -m_normal1.x\n                        m_upperLimit.y = -m_normal1.y\n                    }\n                } else if (convex2) {\n                    m_front = offset2 >= 0.0f || offset0 >= 0.0f && offset1 >= 0.0f\n                    if (m_front) {\n                        m_normal.x = m_normal1.x\n                        m_normal.y = m_normal1.y\n                        m_lowerLimit.x = m_normal1.x\n                        m_lowerLimit.y = m_normal1.y\n                        m_upperLimit.x = m_normal2.x\n                        m_upperLimit.y = m_normal2.y\n                    } else {\n                        m_normal.x = -m_normal1.x\n                        m_normal.y = -m_normal1.y\n                        m_lowerLimit.x = -m_normal1.x\n                        m_lowerLimit.y = -m_normal1.y\n                        m_upperLimit.x = -m_normal0.x\n                        m_upperLimit.y = -m_normal0.y\n                    }\n                } else {\n                    m_front = offset0 >= 0.0f && offset1 >= 0.0f && offset2 >= 0.0f\n                    if (m_front) {\n                        m_normal.x = m_normal1.x\n                        m_normal.y = m_normal1.y\n                        m_lowerLimit.x = m_normal1.x\n                        m_lowerLimit.y = m_normal1.y\n                        m_upperLimit.x = m_normal1.x\n                        m_upperLimit.y = m_normal1.y\n                    } else {\n                        m_normal.x = -m_normal1.x\n                        m_normal.y = -m_normal1.y\n                        m_lowerLimit.x = -m_normal2.x\n                        m_lowerLimit.y = -m_normal2.y\n                        m_upperLimit.x = -m_normal0.x\n                        m_upperLimit.y = -m_normal0.y\n                    }\n                }\n            } else if (hasVertex0) {\n                if (convex1) {\n                    m_front = offset0 >= 0.0f || offset1 >= 0.0f\n                    if (m_front) {\n                        m_normal.x = m_normal1.x\n                        m_normal.y = m_normal1.y\n                        m_lowerLimit.x = m_normal0.x\n                        m_lowerLimit.y = m_normal0.y\n                        m_upperLimit.x = -m_normal1.x\n                        m_upperLimit.y = -m_normal1.y\n                    } else {\n                        m_normal.x = -m_normal1.x\n                        m_normal.y = -m_normal1.y\n                        m_lowerLimit.x = m_normal1.x\n                        m_lowerLimit.y = m_normal1.y\n                        m_upperLimit.x = -m_normal1.x\n                        m_upperLimit.y = -m_normal1.y\n                    }\n                } else {\n                    m_front = offset0 >= 0.0f && offset1 >= 0.0f\n                    if (m_front) {\n                        m_normal.x = m_normal1.x\n                        m_normal.y = m_normal1.y\n                        m_lowerLimit.x = m_normal1.x\n                        m_lowerLimit.y = m_normal1.y\n                        m_upperLimit.x = -m_normal1.x\n                        m_upperLimit.y = -m_normal1.y\n                    } else {\n                        m_normal.x = -m_normal1.x\n                        m_normal.y = -m_normal1.y\n                        m_lowerLimit.x = m_normal1.x\n                        m_lowerLimit.y = m_normal1.y\n                        m_upperLimit.x = -m_normal0.x\n                        m_upperLimit.y = -m_normal0.y\n                    }\n                }\n            } else if (hasVertex3) {\n                if (convex2) {\n                    m_front = offset1 >= 0.0f || offset2 >= 0.0f\n                    if (m_front) {\n                        m_normal.x = m_normal1.x\n                        m_normal.y = m_normal1.y\n                        m_lowerLimit.x = -m_normal1.x\n                        m_lowerLimit.y = -m_normal1.y\n                        m_upperLimit.x = m_normal2.x\n                        m_upperLimit.y = m_normal2.y\n                    } else {\n                        m_normal.x = -m_normal1.x\n                        m_normal.y = -m_normal1.y\n                        m_lowerLimit.x = -m_normal1.x\n                        m_lowerLimit.y = -m_normal1.y\n                        m_upperLimit.x = m_normal1.x\n                        m_upperLimit.y = m_normal1.y\n                    }\n                } else {\n                    m_front = offset1 >= 0.0f && offset2 >= 0.0f\n                    if (m_front) {\n                        m_normal.x = m_normal1.x\n                        m_normal.y = m_normal1.y\n                        m_lowerLimit.x = -m_normal1.x\n                        m_lowerLimit.y = -m_normal1.y\n                        m_upperLimit.x = m_normal1.x\n                        m_upperLimit.y = m_normal1.y\n                    } else {\n                        m_normal.x = -m_normal1.x\n                        m_normal.y = -m_normal1.y\n                        m_lowerLimit.x = -m_normal2.x\n                        m_lowerLimit.y = -m_normal2.y\n                        m_upperLimit.x = m_normal1.x\n                        m_upperLimit.y = m_normal1.y\n                    }\n                }\n            } else {\n                m_front = offset1 >= 0.0f\n                if (m_front) {\n                    m_normal.x = m_normal1.x\n                    m_normal.y = m_normal1.y\n                    m_lowerLimit.x = -m_normal1.x\n                    m_lowerLimit.y = -m_normal1.y\n                    m_upperLimit.x = -m_normal1.x\n                    m_upperLimit.y = -m_normal1.y\n                } else {\n                    m_normal.x = -m_normal1.x\n                    m_normal.y = -m_normal1.y\n                    m_lowerLimit.x = m_normal1.x\n                    m_lowerLimit.y = m_normal1.y\n                    m_upperLimit.x = m_normal1.x\n                    m_upperLimit.y = m_normal1.y\n                }\n            }\n\n            // Get polygonB in frameA\n            m_polygonB.count = polygonB.count\n            for (i in 0 until polygonB.count) {\n                Transform.mulToOutUnsafe(m_xf, polygonB.vertices[i], m_polygonB.vertices[i])\n                Rot.mulToOutUnsafe(m_xf.q, polygonB.normals[i], m_polygonB.normals[i])\n            }\n\n            m_radius = 2.0f * Settings.polygonRadius\n\n            manifold.pointCount = 0\n\n            computeEdgeSeparation(edgeAxis)\n\n            // If no valid normal can be found than this edge should not collide.\n            if (edgeAxis.type == EPAxis.Type.UNKNOWN) {\n                return\n            }\n\n            if (edgeAxis.separation > m_radius) {\n                return\n            }\n\n            computePolygonSeparation(polygonAxis)\n            if (polygonAxis.type != EPAxis.Type.UNKNOWN && polygonAxis.separation > m_radius) {\n                return\n            }\n\n            // Use hysteresis for jitter reduction.\n            val k_relativeTol = 0.98f\n            val k_absoluteTol = 0.001f\n\n            val primaryAxis: EPAxis\n            if (polygonAxis.type == EPAxis.Type.UNKNOWN) {\n                primaryAxis = edgeAxis\n            } else if (polygonAxis.separation > k_relativeTol * edgeAxis.separation + k_absoluteTol) {\n                primaryAxis = polygonAxis\n            } else {\n                primaryAxis = edgeAxis\n            }\n\n            val ie0 = ie[0]\n            val ie1 = ie[1]\n\n            if (primaryAxis.type == EPAxis.Type.EDGE_A) {\n                manifold.type = Manifold.ManifoldType.FACE_A\n\n                // Search for the polygon normal that is most anti-parallel to the edge normal.\n                var bestIndex = 0\n                var bestValue = Vec2.dot(m_normal, m_polygonB.normals[0])\n                for (i in 1 until m_polygonB.count) {\n                    val value = Vec2.dot(m_normal, m_polygonB.normals[i])\n                    if (value < bestValue) {\n                        bestValue = value\n                        bestIndex = i\n                    }\n                }\n\n                val i1 = bestIndex\n                val i2 = if (i1 + 1 < m_polygonB.count) i1 + 1 else 0\n\n                ie0.v.set(m_polygonB.vertices[i1])\n                ie0.id.indexA = 0\n                ie0.id.indexB = i1.toByte()\n                ie0.id.typeA = ContactID.Type.FACE.ordinal.toByte()\n                ie0.id.typeB = ContactID.Type.VERTEX.ordinal.toByte()\n\n                ie1.v.set(m_polygonB.vertices[i2])\n                ie1.id.indexA = 0\n                ie1.id.indexB = i2.toByte()\n                ie1.id.typeA = ContactID.Type.FACE.ordinal.toByte()\n                ie1.id.typeB = ContactID.Type.VERTEX.ordinal.toByte()\n\n                if (m_front) {\n                    rf.i1 = 0\n                    rf.i2 = 1\n                    rf.v1.set(m_v1)\n                    rf.v2.set(m_v2)\n                    rf.normal.set(m_normal1)\n                } else {\n                    rf.i1 = 1\n                    rf.i2 = 0\n                    rf.v1.set(m_v2)\n                    rf.v2.set(m_v1)\n                    rf.normal.set(m_normal1).negateLocal()\n                }\n            } else {\n                manifold.type = Manifold.ManifoldType.FACE_B\n\n                ie0.v.set(m_v1)\n                ie0.id.indexA = 0\n                ie0.id.indexB = primaryAxis.index.toByte()\n                ie0.id.typeA = ContactID.Type.VERTEX.ordinal.toByte()\n                ie0.id.typeB = ContactID.Type.FACE.ordinal.toByte()\n\n                ie1.v.set(m_v2)\n                ie1.id.indexA = 0\n                ie1.id.indexB = primaryAxis.index.toByte()\n                ie1.id.typeA = ContactID.Type.VERTEX.ordinal.toByte()\n                ie1.id.typeB = ContactID.Type.FACE.ordinal.toByte()\n\n                rf.i1 = primaryAxis.index\n                rf.i2 = if (rf.i1 + 1 < m_polygonB.count) rf.i1 + 1 else 0\n                rf.v1.set(m_polygonB.vertices[rf.i1])\n                rf.v2.set(m_polygonB.vertices[rf.i2])\n                rf.normal.set(m_polygonB.normals[rf.i1])\n            }\n\n            rf.sideNormal1.set(rf.normal.y, -rf.normal.x)\n            rf.sideNormal2.set(rf.sideNormal1).negateLocal()\n            rf.sideOffset1 = Vec2.dot(rf.sideNormal1, rf.v1)\n            rf.sideOffset2 = Vec2.dot(rf.sideNormal2, rf.v2)\n\n            // Clip incident edge against extruded edge1 side edges.\n            var np: Int\n\n            // Clip to box side 1\n            np = clipSegmentToLine(clipPoints1, ie, rf.sideNormal1, rf.sideOffset1, rf.i1)\n\n            if (np < Settings.maxManifoldPoints) {\n                return\n            }\n\n            // Clip to negative box side 1\n            np = clipSegmentToLine(clipPoints2, clipPoints1, rf.sideNormal2, rf.sideOffset2, rf.i2)\n\n            if (np < Settings.maxManifoldPoints) {\n                return\n            }\n\n            // Now clipPoints2 contains the clipped points.\n            if (primaryAxis.type == EPAxis.Type.EDGE_A) {\n                manifold.localNormal.set(rf.normal)\n                manifold.localPoint.set(rf.v1)\n            } else {\n                manifold.localNormal.set(polygonB.normals[rf.i1])\n                manifold.localPoint.set(polygonB.vertices[rf.i1])\n            }\n\n            var pointCount = 0\n            for (i in 0 until Settings.maxManifoldPoints) {\n                val separation: Float\n\n                separation = Vec2.dot(rf.normal, temp.set(clipPoints2[i].v).subLocal(rf.v1))\n\n                if (separation <= m_radius) {\n                    val cp = manifold.points[pointCount]\n\n                    if (primaryAxis.type == EPAxis.Type.EDGE_A) {\n                        // cp.localPoint = MulT(m_xf, clipPoints2[i].v);\n                        Transform.mulTransToOutUnsafe(m_xf, clipPoints2[i].v, cp.localPoint)\n                        cp.id.set(clipPoints2[i].id)\n                    } else {\n                        cp.localPoint.set(clipPoints2[i].v)\n                        cp.id.typeA = clipPoints2[i].id.typeB\n                        cp.id.typeB = clipPoints2[i].id.typeA\n                        cp.id.indexA = clipPoints2[i].id.indexB\n                        cp.id.indexB = clipPoints2[i].id.indexA\n                    }\n\n                    ++pointCount\n                }\n            }\n\n            manifold.pointCount = pointCount\n        }\n\n\n        fun computeEdgeSeparation(axis: EPAxis) {\n            axis.type = EPAxis.Type.EDGE_A\n            axis.index = if (m_front) 0 else 1\n            axis.separation = Float.MAX_VALUE\n            val nx = m_normal.x\n            val ny = m_normal.y\n\n            for (i in 0 until m_polygonB.count) {\n                val v = m_polygonB.vertices[i]\n                val tempx = v.x - m_v1.x\n                val tempy = v.y - m_v1.y\n                val s = nx * tempx + ny * tempy\n                if (s < axis.separation) {\n                    axis.separation = s\n                }\n            }\n        }\n\n        fun computePolygonSeparation(axis: EPAxis) {\n            axis.type = EPAxis.Type.UNKNOWN\n            axis.index = -1\n            axis.separation = -Float.MAX_VALUE\n\n            perp.x = -m_normal.y\n            perp.y = m_normal.x\n\n            for (i in 0 until m_polygonB.count) {\n                val normalB = m_polygonB.normals[i]\n                val vB = m_polygonB.vertices[i]\n                n.x = -normalB.x\n                n.y = -normalB.y\n\n                // float s1 = Vec2.dot(n, temp.set(vB).subLocal(m_v1));\n                // float s2 = Vec2.dot(n, temp.set(vB).subLocal(m_v2));\n                var tempx = vB.x - m_v1.x\n                var tempy = vB.y - m_v1.y\n                val s1 = n.x * tempx + n.y * tempy\n                tempx = vB.x - m_v2.x\n                tempy = vB.y - m_v2.y\n                val s2 = n.x * tempx + n.y * tempy\n                val s = MathUtils.min(s1, s2)\n\n                if (s > m_radius) {\n                    // No collision\n                    axis.type = EPAxis.Type.EDGE_B\n                    axis.index = i\n                    axis.separation = s\n                    return\n                }\n\n                // Adjacency\n                if (n.x * perp.x + n.y * perp.y >= 0.0f) {\n                    if (Vec2.dot(temp.set(n).subLocal(m_upperLimit), m_normal) < -Settings.angularSlop) {\n                        continue\n                    }\n                } else {\n                    if (Vec2.dot(temp.set(n).subLocal(m_lowerLimit), m_normal) < -Settings.angularSlop) {\n                        continue\n                    }\n                }\n\n                if (s > axis.separation) {\n                    axis.type = EPAxis.Type.EDGE_B\n                    axis.index = i\n                    axis.separation = s\n                }\n            }\n        }\n    }\n\n    // #### COLLISION STUFF (not from collision.h or collision.cpp) ####\n\n    // djm pooling\n    private val d = Vec2()\n\n    companion object {\n\n        val NULL_FEATURE = Int.MAX_VALUE\n\n        /**\n         * Compute the point states given two manifolds. The states pertain to the transition from\n         * manifold1 to manifold2. So state1 is either persist or remove while state2 is either add or\n         * persist.\n         *\n         * @param state1\n         * @param state2\n         * @param manifold1\n         * @param manifold2\n         */\n\n        fun getPointStates(state1: Array<PointState>, state2: Array<PointState>,\n                           manifold1: Manifold, manifold2: Manifold) {\n\n            for (i in 0 until Settings.maxManifoldPoints) {\n                state1[i] = PointState.NULL_STATE\n                state2[i] = PointState.NULL_STATE\n            }\n\n            // Detect persists and removes.\n            for (i in 0 until manifold1.pointCount) {\n                val id = manifold1.points[i].id\n\n                state1[i] = PointState.REMOVE_STATE\n\n                for (j in 0 until manifold2.pointCount) {\n                    if (manifold2.points[j].id.isEqual(id)) {\n                        state1[i] = PointState.PERSIST_STATE\n                        break\n                    }\n                }\n            }\n\n            // Detect persists and adds\n            for (i in 0 until manifold2.pointCount) {\n                val id = manifold2.points[i].id\n\n                state2[i] = PointState.ADD_STATE\n\n                for (j in 0 until manifold1.pointCount) {\n                    if (manifold1.points[j].id.isEqual(id)) {\n                        state2[i] = PointState.PERSIST_STATE\n                        break\n                    }\n                }\n            }\n        }\n\n        /**\n         * Clipping for contact manifolds. Sutherland-Hodgman clipping.\n         *\n         * @param vOut\n         * @param vIn\n         * @param normal\n         * @param offset\n         * @return\n         */\n\n        fun clipSegmentToLine(vOut: Array<ClipVertex>, vIn: Array<ClipVertex>,\n                              normal: Vec2, offset: Float, vertexIndexA: Int): Int {\n\n            // Start with no output points\n            var numOut = 0\n            val vIn0 = vIn[0]\n            val vIn1 = vIn[1]\n            val vIn0v = vIn0.v\n            val vIn1v = vIn1.v\n\n            // Calculate the distance of end points to the line\n            val distance0 = Vec2.dot(normal, vIn0v) - offset\n            val distance1 = Vec2.dot(normal, vIn1v) - offset\n\n            // If the points are behind the plane\n            if (distance0 <= 0.0f) {\n                vOut[numOut++].set(vIn0)\n            }\n            if (distance1 <= 0.0f) {\n                vOut[numOut++].set(vIn1)\n            }\n\n            // If the points are on different sides of the plane\n            if (distance0 * distance1 < 0.0f) {\n                // Find intersection point of edge and plane\n                val interp = distance0 / (distance0 - distance1)\n\n                val vOutNO = vOut[numOut]\n                // vOut[numOut].v = vIn[0].v + interp * (vIn[1].v - vIn[0].v);\n                vOutNO.v.x = vIn0v.x + interp * (vIn1v.x - vIn0v.x)\n                vOutNO.v.y = vIn0v.y + interp * (vIn1v.y - vIn0v.y)\n\n                // VertexA is hitting edgeB.\n                vOutNO.id.indexA = vertexIndexA.toByte()\n                vOutNO.id.indexB = vIn0.id.indexB\n                vOutNO.id.typeA = ContactID.Type.VERTEX.ordinal.toByte()\n                vOutNO.id.typeB = ContactID.Type.FACE.ordinal.toByte()\n                ++numOut\n            }\n\n            return numOut\n        }\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n/*\n * JBox2D - A Java Port of Erin Catto's Box2D\n *\n * JBox2D homepage: http://jbox2d.sourceforge.net/\n * Box2D homepage: http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n *\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n *\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\npackage org.jbox2d.collision\n\n/**\n * Contact ids to facilitate warm starting. Note: the ContactFeatures class is just embedded in here\n */\nclass ContactID : Comparable<ContactID> {\n\n\n    var indexA: Byte = 0\n\n    var indexB: Byte = 0\n\n    var typeA: Byte = 0\n\n    var typeB: Byte = 0\n\n    val key: Int\n        get() = indexA.toInt() shl 24 or (indexB.toInt() shl 16) or (typeA.toInt() shl 8) or typeB.toInt()\n\n    enum class Type {\n        VERTEX, FACE\n    }\n\n    fun isEqual(cid: ContactID): Boolean {\n        return key == cid.key\n    }\n\n    constructor() {}\n\n    constructor(c: ContactID) {\n        set(c)\n    }\n\n    fun set(c: ContactID) {\n        indexA = c.indexA\n        indexB = c.indexB\n        typeA = c.typeA\n        typeB = c.typeB\n    }\n\n    fun flip() {\n        var tempA = indexA\n        indexA = indexB\n        indexB = tempA\n        tempA = typeA\n        typeA = typeB\n        typeB = tempA\n    }\n\n    /**\n     * zeros out the data\n     */\n    fun zero() {\n        indexA = 0\n        indexB = 0\n        typeA = 0\n        typeB = 0\n    }\n\n    override fun compareTo(o: ContactID): Int {\n        return key - o.key\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.collision\n\nimport org.jbox2d.collision.shapes.*\nimport org.jbox2d.common.MathUtils\nimport org.jbox2d.common.Rot\nimport org.jbox2d.common.Settings\nimport org.jbox2d.common.Transform\nimport org.jbox2d.common.Vec2\nimport org.jbox2d.internal.*\n\n// updated to rev 100\n/**\n * This is non-static for faster pooling. To get an instance, use the [SingletonPool], don't\n * construct a distance object.\n *\n * @author Daniel Murphy\n */\nclass Distance(val stats: Stats = Stats()) {\n\n    private val simplex = Simplex()\n    private val saveA = IntArray(3)\n    private val saveB = IntArray(3)\n    private val closestPoint = Vec2()\n    private val d = Vec2()\n    private val temp = Vec2()\n    private val normal = Vec2()\n\n    /**\n     * GJK using Voronoi regions (Christer Ericson) and Barycentric coordinates.\n     */\n    private inner class SimplexVertex {\n        val wA = Vec2() // support point in shapeA\n        val wB = Vec2() // support point in shapeB\n        val w = Vec2() // wB - wA\n        var a: Float = 0.toFloat() // barycentric coordinate for closest point\n        var indexA: Int = 0 // wA index\n        var indexB: Int = 0 // wB index\n\n        fun set(sv: SimplexVertex) {\n            wA.set(sv.wA)\n            wB.set(sv.wB)\n            w.set(sv.w)\n            a = sv.a\n            indexA = sv.indexA\n            indexB = sv.indexB\n        }\n    }\n\n    /**\n     * Used to warm start Distance. Set count to zero on first call.\n     *\n     * @author daniel\n     */\n    class SimplexCache {\n        /** length or area  */\n\n        var metric: Float = 0.toFloat()\n\n        var count: Int = 0\n        /** vertices on shape A  */\n\n        val indexA = IntArray(3)\n        /** vertices on shape B  */\n\n        val indexB = IntArray(3)\n\n        init {\n            metric = 0f\n            count = 0\n            indexA[0] = Int.MAX_VALUE\n            indexA[1] = Int.MAX_VALUE\n            indexA[2] = Int.MAX_VALUE\n            indexB[0] = Int.MAX_VALUE\n            indexB[1] = Int.MAX_VALUE\n            indexB[2] = Int.MAX_VALUE\n        }\n\n        fun set(sc: SimplexCache) {\n            arraycopy(sc.indexA, 0, indexA, 0, indexA.size)\n            arraycopy(sc.indexB, 0, indexB, 0, indexB.size)\n            metric = sc.metric\n            count = sc.count\n        }\n    }\n\n    private inner class Simplex {\n        val m_v1 = SimplexVertex()\n        val m_v2 = SimplexVertex()\n        val m_v3 = SimplexVertex()\n        val vertices = arrayOf(m_v1, m_v2, m_v3)\n        var m_count: Int = 0\n\n        private val e12 = Vec2()\n\n        // djm pooled\n        private val case2 = Vec2()\n        private val case22 = Vec2()\n\n        // djm pooled, and from above\n        private val case3 = Vec2()\n        private val case33 = Vec2()\n\n        // djm pooled, from above\n        // return Vec2.cross(m_v2.w - m_v1.w, m_v3.w - m_v1.w);\n        val metric: Float\n            get() {\n                when (m_count) {\n                    0 -> {\n                        assert(false)\n                        return 0.0f\n                    }\n\n                    1 -> return 0.0f\n\n                    2 -> return MathUtils.distance(m_v1.w, m_v2.w)\n\n                    3 -> {\n                        case3.set(m_v2.w).subLocal(m_v1.w)\n                        case33.set(m_v3.w).subLocal(m_v1.w)\n                        return Vec2.cross(case3, case33)\n                    }\n\n                    else -> {\n                        assert(false)\n                        return 0.0f\n                    }\n                }\n            }\n\n        // djm pooled, and from above\n        private val e13 = Vec2()\n        private val e23 = Vec2()\n        private val w1 = Vec2()\n        private val w2 = Vec2()\n        private val w3 = Vec2()\n\n        fun readCache(cache: SimplexCache, proxyA: DistanceProxy, transformA: Transform,\n                      proxyB: DistanceProxy, transformB: Transform) {\n            assert(cache.count <= 3)\n\n            // Copy data from cache.\n            m_count = cache.count\n\n            for (i in 0 until m_count) {\n                val v = vertices[i]\n                v.indexA = cache.indexA[i]\n                v.indexB = cache.indexB[i]\n                val wALocal = proxyA.getVertex(v.indexA)\n                val wBLocal = proxyB.getVertex(v.indexB)\n                Transform.mulToOutUnsafe(transformA, wALocal, v.wA)\n                Transform.mulToOutUnsafe(transformB, wBLocal, v.wB)\n                v.w.set(v.wB).subLocal(v.wA)\n                v.a = 0.0f\n            }\n\n            // Compute the new simplex metric, if it is substantially different than\n            // old metric then flush the simplex.\n            if (m_count > 1) {\n                val metric1 = cache.metric\n                val metric2 = metric\n                if (metric2 < 0.5f * metric1 || 2.0f * metric1 < metric2 || metric2 < Settings.EPSILON) {\n                    // Reset the simplex.\n                    m_count = 0\n                }\n            }\n\n            // If the cache is empty or invalid ...\n            if (m_count == 0) {\n                val v = vertices[0]\n                v.indexA = 0\n                v.indexB = 0\n                val wALocal = proxyA.getVertex(0)\n                val wBLocal = proxyB.getVertex(0)\n                Transform.mulToOutUnsafe(transformA, wALocal, v.wA)\n                Transform.mulToOutUnsafe(transformB, wBLocal, v.wB)\n                v.w.set(v.wB).subLocal(v.wA)\n                m_count = 1\n            }\n        }\n\n        fun writeCache(cache: SimplexCache) {\n            cache.metric = metric\n            cache.count = m_count\n\n            for (i in 0 until m_count) {\n                cache.indexA[i] = vertices[i].indexA\n                cache.indexB[i] = vertices[i].indexB\n            }\n        }\n\n        fun getSearchDirection(out: Vec2) {\n            when (m_count) {\n                1 -> {\n                    out.set(m_v1.w).negateLocal()\n                    return\n                }\n                2 -> {\n                    e12.set(m_v2.w).subLocal(m_v1.w)\n                    // use out for a temp variable real quick\n                    out.set(m_v1.w).negateLocal()\n                    val sgn = Vec2.cross(e12, out)\n\n                    if (sgn > 0f) {\n                        // Origin is left of e12.\n                        Vec2.crossToOutUnsafe(1f, e12, out)\n                        return\n                    } else {\n                        // Origin is right of e12.\n                        Vec2.crossToOutUnsafe(e12, 1f, out)\n                        return\n                    }\n                }\n                else -> {\n                    assert(false)\n                    out.setZero()\n                    return\n                }\n            }\n        }\n\n        /**\n         * this returns pooled objects. don't keep or modify them\n         *\n         * @return\n         */\n        fun getClosestPoint(out: Vec2) {\n            when (m_count) {\n                0 -> {\n                    assert(false)\n                    out.setZero()\n                    return\n                }\n                1 -> {\n                    out.set(m_v1.w)\n                    return\n                }\n                2 -> {\n                    case22.set(m_v2.w).mulLocal(m_v2.a)\n                    case2.set(m_v1.w).mulLocal(m_v1.a).addLocal(case22)\n                    out.set(case2)\n                    return\n                }\n                3 -> {\n                    out.setZero()\n                    return\n                }\n                else -> {\n                    assert(false)\n                    out.setZero()\n                    return\n                }\n            }\n        }\n\n        fun getWitnessPoints(pA: Vec2, pB: Vec2) {\n            when (m_count) {\n                0 -> assert(false)\n\n                1 -> {\n                    pA.set(m_v1.wA)\n                    pB.set(m_v1.wB)\n                }\n\n                2 -> {\n                    case2.set(m_v1.wA).mulLocal(m_v1.a)\n                    pA.set(m_v2.wA).mulLocal(m_v2.a).addLocal(case2)\n                    // m_v1.a * m_v1.wA + m_v2.a * m_v2.wA;\n                    // *pB = m_v1.a * m_v1.wB + m_v2.a * m_v2.wB;\n                    case2.set(m_v1.wB).mulLocal(m_v1.a)\n                    pB.set(m_v2.wB).mulLocal(m_v2.a).addLocal(case2)\n                }\n\n                3 -> {\n                    pA.set(m_v1.wA).mulLocal(m_v1.a)\n                    case3.set(m_v2.wA).mulLocal(m_v2.a)\n                    case33.set(m_v3.wA).mulLocal(m_v3.a)\n                    pA.addLocal(case3).addLocal(case33)\n                    pB.set(pA)\n                }\n\n                else -> assert(false)\n            }// *pA = m_v1.a * m_v1.wA + m_v2.a * m_v2.wA + m_v3.a * m_v3.wA;\n            // *pB = *pA;\n        }\n\n        // djm pooled from above\n        /**\n         * Solve a line segment using barycentric coordinates.\n         */\n        fun solve2() {\n            // Solve a line segment using barycentric coordinates.\n            //\n            // p = a1 * w1 + a2 * w2\n            // a1 + a2 = 1\n            //\n            // The vector from the origin to the closest point on the line is\n            // perpendicular to the line.\n            // e12 = w2 - w1\n            // dot(p, e) = 0\n            // a1 * dot(w1, e) + a2 * dot(w2, e) = 0\n            //\n            // 2-by-2 linear system\n            // [1 1 ][a1] = [1]\n            // [w1.e12 w2.e12][a2] = [0]\n            //\n            // Define\n            // d12_1 = dot(w2, e12)\n            // d12_2 = -dot(w1, e12)\n            // d12 = d12_1 + d12_2\n            //\n            // Solution\n            // a1 = d12_1 / d12\n            // a2 = d12_2 / d12\n            val w1 = m_v1.w\n            val w2 = m_v2.w\n            e12.set(w2).subLocal(w1)\n\n            // w1 region\n            val d12_2 = -Vec2.dot(w1, e12)\n            if (d12_2 <= 0.0f) {\n                // a2 <= 0, so we clamp it to 0\n                m_v1.a = 1.0f\n                m_count = 1\n                return\n            }\n\n            // w2 region\n            val d12_1 = Vec2.dot(w2, e12)\n            if (d12_1 <= 0.0f) {\n                // a1 <= 0, so we clamp it to 0\n                m_v2.a = 1.0f\n                m_count = 1\n                m_v1.set(m_v2)\n                return\n            }\n\n            // Must be in e12 region.\n            val inv_d12 = 1.0f / (d12_1 + d12_2)\n            m_v1.a = d12_1 * inv_d12\n            m_v2.a = d12_2 * inv_d12\n            m_count = 2\n        }\n\n        /**\n         * Solve a line segment using barycentric coordinates.<br></br>\n         * Possible regions:<br></br>\n         * - points[2]<br></br>\n         * - edge points[0]-points[2]<br></br>\n         * - edge points[1]-points[2]<br></br>\n         * - inside the triangle\n         */\n        fun solve3() {\n            w1.set(m_v1.w)\n            w2.set(m_v2.w)\n            w3.set(m_v3.w)\n\n            // Edge12\n            // [1 1 ][a1] = [1]\n            // [w1.e12 w2.e12][a2] = [0]\n            // a3 = 0\n            e12.set(w2).subLocal(w1)\n            val w1e12 = Vec2.dot(w1, e12)\n            val w2e12 = Vec2.dot(w2, e12)\n            val d12_1 = w2e12\n            val d12_2 = -w1e12\n\n            // Edge13\n            // [1 1 ][a1] = [1]\n            // [w1.e13 w3.e13][a3] = [0]\n            // a2 = 0\n            e13.set(w3).subLocal(w1)\n            val w1e13 = Vec2.dot(w1, e13)\n            val w3e13 = Vec2.dot(w3, e13)\n            val d13_1 = w3e13\n            val d13_2 = -w1e13\n\n            // Edge23\n            // [1 1 ][a2] = [1]\n            // [w2.e23 w3.e23][a3] = [0]\n            // a1 = 0\n            e23.set(w3).subLocal(w2)\n            val w2e23 = Vec2.dot(w2, e23)\n            val w3e23 = Vec2.dot(w3, e23)\n            val d23_1 = w3e23\n            val d23_2 = -w2e23\n\n            // Triangle123\n            val n123 = Vec2.cross(e12, e13)\n\n            val d123_1 = n123 * Vec2.cross(w2, w3)\n            val d123_2 = n123 * Vec2.cross(w3, w1)\n            val d123_3 = n123 * Vec2.cross(w1, w2)\n\n            // w1 region\n            if (d12_2 <= 0.0f && d13_2 <= 0.0f) {\n                m_v1.a = 1.0f\n                m_count = 1\n                return\n            }\n\n            // e12\n            if (d12_1 > 0.0f && d12_2 > 0.0f && d123_3 <= 0.0f) {\n                val inv_d12 = 1.0f / (d12_1 + d12_2)\n                m_v1.a = d12_1 * inv_d12\n                m_v2.a = d12_2 * inv_d12\n                m_count = 2\n                return\n            }\n\n            // e13\n            if (d13_1 > 0.0f && d13_2 > 0.0f && d123_2 <= 0.0f) {\n                val inv_d13 = 1.0f / (d13_1 + d13_2)\n                m_v1.a = d13_1 * inv_d13\n                m_v3.a = d13_2 * inv_d13\n                m_count = 2\n                m_v2.set(m_v3)\n                return\n            }\n\n            // w2 region\n            if (d12_1 <= 0.0f && d23_2 <= 0.0f) {\n                m_v2.a = 1.0f\n                m_count = 1\n                m_v1.set(m_v2)\n                return\n            }\n\n            // w3 region\n            if (d13_1 <= 0.0f && d23_1 <= 0.0f) {\n                m_v3.a = 1.0f\n                m_count = 1\n                m_v1.set(m_v3)\n                return\n            }\n\n            // e23\n            if (d23_1 > 0.0f && d23_2 > 0.0f && d123_1 <= 0.0f) {\n                val inv_d23 = 1.0f / (d23_1 + d23_2)\n                m_v2.a = d23_1 * inv_d23\n                m_v3.a = d23_2 * inv_d23\n                m_count = 2\n                m_v1.set(m_v3)\n                return\n            }\n\n            // Must be in triangle123\n            val inv_d123 = 1.0f / (d123_1 + d123_2 + d123_3)\n            m_v1.a = d123_1 * inv_d123\n            m_v2.a = d123_2 * inv_d123\n            m_v3.a = d123_3 * inv_d123\n            m_count = 3\n        }\n    }\n\n    /**\n     * A distance proxy is used by the GJK algorithm. It encapsulates any shape. TODO: see if we can\n     * just do assignments with m_vertices, instead of copying stuff over\n     *\n     * @author daniel\n     */\n    class DistanceProxy {\n\n        val m_vertices: Array<Vec2> = Array(Settings.maxPolygonVertices) { Vec2() }\n        /**\n         * Get the vertex count.\n         *\n         * @return\n         */\n\n        var vertexCount: Int = 0\n\n        var m_radius: Float = 0f\n\n        val m_buffer: Array<Vec2> = Array(2) { Vec2() }\n\n        /**\n         * Initialize the proxy using the given shape. The shape must remain in scope while the proxy is\n         * in use.\n         */\n        fun set(shape: Shape, index: Int) {\n            when (shape.getType()) {\n                ShapeType.CIRCLE -> {\n                    val circle = shape as CircleShape\n                    m_vertices[0].set(circle.p)\n                    vertexCount = 1\n                    m_radius = circle.radius\n                }\n                ShapeType.POLYGON -> {\n                    val poly = shape as PolygonShape\n                    vertexCount = poly.count\n                    m_radius = poly.radius\n                    for (i in 0 until vertexCount) {\n                        m_vertices[i].set(poly.vertices[i])\n                    }\n                }\n                ShapeType.CHAIN -> {\n                    val chain = shape as ChainShape\n                    assert(0 <= index && index < chain.count)\n\n                    m_buffer[0] = chain.vertices!![index]\n                    if (index + 1 < chain.count) {\n                        m_buffer[1] = chain.vertices!![index + 1]\n                    } else {\n                        m_buffer[1] = chain.vertices!![0]\n                    }\n\n                    m_vertices[0].set(m_buffer[0])\n                    m_vertices[1].set(m_buffer[1])\n                    vertexCount = 2\n                    m_radius = chain.radius\n                }\n                ShapeType.EDGE -> {\n                    val edge = shape as EdgeShape\n                    m_vertices[0].set(edge.vertex1)\n                    m_vertices[1].set(edge.vertex2)\n                    vertexCount = 2\n                    m_radius = edge.radius\n                }\n                else -> assert(false)\n            }\n        }\n\n        /**\n         * Get the supporting vertex index in the given direction.\n         *\n         * @param d\n         * @return\n         */\n        fun getSupport(d: Vec2): Int {\n            var bestIndex = 0\n            var bestValue = Vec2.dot(m_vertices[0], d)\n            for (i in 1 until vertexCount) {\n                val value = Vec2.dot(m_vertices[i], d)\n                if (value > bestValue) {\n                    bestIndex = i\n                    bestValue = value\n                }\n            }\n\n            return bestIndex\n        }\n\n        /**\n         * Get the supporting vertex in the given direction.\n         *\n         * @param d\n         * @return\n         */\n        fun getSupportVertex(d: Vec2): Vec2 {\n            var bestIndex = 0\n            var bestValue = Vec2.dot(m_vertices[0], d)\n            for (i in 1 until vertexCount) {\n                val value = Vec2.dot(m_vertices[i], d)\n                if (value > bestValue) {\n                    bestIndex = i\n                    bestValue = value\n                }\n            }\n\n            return m_vertices[bestIndex]\n        }\n\n        /**\n         * Get a vertex by index. Used by Distance.\n         *\n         * @param index\n         * @return\n         */\n        fun getVertex(index: Int): Vec2 {\n            assert(0 <= index && index < vertexCount)\n            return m_vertices[index]\n        }\n    }\n\n    /**\n     * Compute the closest points between two shapes. Supports any combination of: CircleShape and\n     * PolygonShape. The simplex cache is input/output. On the first call set SimplexCache.count to\n     * zero.\n     *\n     * @param output\n     * @param cache\n     * @param input\n     */\n    fun distance(output: DistanceOutput, cache: SimplexCache,\n                 input: DistanceInput) {\n        stats.GJK_CALLS++\n\n        val proxyA = input.proxyA\n        val proxyB = input.proxyB\n\n        val transformA = input.transformA\n        val transformB = input.transformB\n\n        // Initialize the simplex.\n        simplex.readCache(cache, proxyA, transformA, proxyB, transformB)\n\n        // Get simplex vertices as an array.\n        val vertices = simplex.vertices\n\n        // These store the vertices of the last simplex so that we\n        // can check for duplicates and prevent cycling.\n        // (pooled above)\n        var saveCount = 0\n\n        simplex.getClosestPoint(closestPoint)\n        var distanceSqr1 = closestPoint.lengthSquared()\n        var distanceSqr2 = distanceSqr1\n\n        // Main iteration loop\n        var iter = 0\n        while (iter < MAX_ITERS) {\n\n            // Copy simplex so we can identify duplicates.\n            saveCount = simplex.m_count\n            for (i in 0 until saveCount) {\n                saveA[i] = vertices[i].indexA\n                saveB[i] = vertices[i].indexB\n            }\n\n            when (simplex.m_count) {\n                1 -> {\n                }\n                2 -> simplex.solve2()\n                3 -> simplex.solve3()\n                else -> assert(false)\n            }\n\n            // If we have 3 points, then the origin is in the corresponding triangle.\n            if (simplex.m_count == 3) {\n                break\n            }\n\n            // Compute closest point.\n            simplex.getClosestPoint(closestPoint)\n            distanceSqr2 = closestPoint.lengthSquared()\n\n            // ensure progress\n            if (distanceSqr2 >= distanceSqr1) {\n                // break;\n            }\n            distanceSqr1 = distanceSqr2\n\n            // get search direction;\n            simplex.getSearchDirection(d)\n\n            // Ensure the search direction is numerically fit.\n            if (d.lengthSquared() < Settings.EPSILON * Settings.EPSILON) {\n                // The origin is probably contained by a line segment\n                // or triangle. Thus the shapes are overlapped.\n\n                // We can't return zero here even though there may be overlap.\n                // In case the simplex is a point, segment, or triangle it is difficult\n                // to determine if the origin is contained in the CSO or very close to it.\n                break\n            }\n            /*\n       * SimplexVertex* vertex = vertices + simplex.m_count; vertex.indexA =\n       * proxyA.GetSupport(MulT(transformA.R, -d)); vertex.wA = Mul(transformA,\n       * proxyA.GetVertex(vertex.indexA)); Vec2 wBLocal; vertex.indexB =\n       * proxyB.GetSupport(MulT(transformB.R, d)); vertex.wB = Mul(transformB,\n       * proxyB.GetVertex(vertex.indexB)); vertex.w = vertex.wB - vertex.wA;\n       */\n\n            // Compute a tentative new simplex vertex using support points.\n            val vertex = vertices[simplex.m_count]\n\n            Rot.mulTransUnsafe(transformA.q, d.negateLocal(), temp)\n            vertex.indexA = proxyA.getSupport(temp)\n            Transform.mulToOutUnsafe(transformA, proxyA.getVertex(vertex.indexA), vertex.wA)\n            // Vec2 wBLocal;\n            Rot.mulTransUnsafe(transformB.q, d.negateLocal(), temp)\n            vertex.indexB = proxyB.getSupport(temp)\n            Transform.mulToOutUnsafe(transformB, proxyB.getVertex(vertex.indexB), vertex.wB)\n            vertex.w.set(vertex.wB).subLocal(vertex.wA)\n\n            // Iteration count is equated to the number of support point calls.\n            ++iter\n            ++stats.GJK_ITERS\n\n            // Check for duplicate support points. This is the main termination criteria.\n            var duplicate = false\n            for (i in 0 until saveCount) {\n                if (vertex.indexA == saveA[i] && vertex.indexB == saveB[i]) {\n                    duplicate = true\n                    break\n                }\n            }\n\n            // If we found a duplicate support point we must exit to avoid cycling.\n            if (duplicate) {\n                break\n            }\n\n            // New vertex is ok and needed.\n            ++simplex.m_count\n        }\n\n        stats.GJK_MAX_ITERS = MathUtils.max(stats.GJK_MAX_ITERS, iter)\n\n        // Prepare output.\n        simplex.getWitnessPoints(output.pointA, output.pointB)\n        output.distance = MathUtils.distance(output.pointA, output.pointB)\n        output.iterations = iter\n\n        // Cache the simplex.\n        simplex.writeCache(cache)\n\n        // Apply radii if requested.\n        if (input.useRadii) {\n            val rA = proxyA.m_radius\n            val rB = proxyB.m_radius\n\n            if (output.distance > rA + rB && output.distance > Settings.EPSILON) {\n                // Shapes are still no overlapped.\n                // Move the witness points to the outer surface.\n                output.distance -= rA + rB\n                normal.set(output.pointB).subLocal(output.pointA)\n                normal.normalize()\n                temp.set(normal).mulLocal(rA)\n                output.pointA.addLocal(temp)\n                temp.set(normal).mulLocal(rB)\n                output.pointB.subLocal(temp)\n            } else {\n                // Shapes are overlapped when radii are considered.\n                // Move the witness points to the middle.\n                // Vec2 p = 0.5f * (output.pointA + output.pointB);\n                output.pointA.addLocal(output.pointB).mulLocal(.5f)\n                output.pointB.set(output.pointA)\n                output.distance = 0.0f\n            }\n        }\n    }\n\n    companion object {\n\n        val MAX_ITERS = 20\n\n    }\n\n    class Stats {\n        var GJK_CALLS = 0\n\n        var GJK_ITERS = 0\n\n        var GJK_MAX_ITERS = 20\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.collision\n\nimport org.jbox2d.collision.Distance.DistanceProxy\nimport org.jbox2d.common.Transform\n\n/**\n * Input for Distance.\n * You have to option to use the shape radii\n * in the computation.\n *\n */\nclass DistanceInput {\n\n    var proxyA = DistanceProxy()\n\n    var proxyB = DistanceProxy()\n\n    var transformA = Transform()\n\n    var transformB = Transform()\n\n    var useRadii: Boolean = false\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.collision\n\nimport org.jbox2d.common.Vec2\n\n/**\n * Output for Distance.\n * @author Daniel\n */\nclass DistanceOutput {\n    /** Closest point on shapeA  */\n\n    val pointA = Vec2()\n\n    /** Closest point on shapeB  */\n\n    val pointB = Vec2()\n\n\n    var distance: Float = 0.toFloat()\n\n    /** number of gjk iterations used  */\n\n    var iterations: Int = 0\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.collision\n\nimport org.jbox2d.common.Settings\nimport org.jbox2d.common.Vec2\n\n/**\n * A manifold for two touching convex shapes. Box2D supports multiple types of contact:\n *\n *  * clip point versus plane with radius\n *  * point versus point with radius (circles)\n *\n * The local point usage depends on the manifold type:\n *\n *  * e_circles: the local center of circleA\n *  * e_faceA: the center of faceA\n *  * e_faceB: the center of faceB\n *\n * Similarly the local normal usage:\n *\n *  * e_circles: not used\n *  * e_faceA: the normal on polygonA\n *  * e_faceB: the normal on polygonB\n *\n * We store contacts in this way so that position correction can account for movement, which is\n * critical for continuous physics. All contact scenarios must be expressed in one of these types.\n * This structure is stored across time steps, so we keep it small.\n */\nclass Manifold {\n\n    /** The points of contact.  */\n\n    val points: Array<ManifoldPoint>\n\n    /** not use for Type::e_points  */\n\n    val localNormal: Vec2\n\n    /** usage depends on manifold type  */\n\n    val localPoint: Vec2\n\n\n    var type: ManifoldType = ManifoldType.CIRCLES\n\n    /** The number of manifold points.  */\n\n    var pointCount: Int = 0\n\n    enum class ManifoldType {\n        CIRCLES, FACE_A, FACE_B\n    }\n\n    /**\n     * creates a manifold with 0 points, with it's points array full of instantiated ManifoldPoints.\n     */\n    constructor() {\n        points = Array(Settings.maxManifoldPoints) { ManifoldPoint() }\n        localNormal = Vec2()\n        localPoint = Vec2()\n        pointCount = 0\n    }\n\n    /**\n     * Creates this manifold as a copy of the other\n     *\n     * @param other\n     */\n    constructor(other: Manifold) {\n        localNormal = other.localNormal.clone()\n        localPoint = other.localPoint.clone()\n        pointCount = other.pointCount\n        type = other.type\n        // djm: this is correct now\n        points = Array(Settings.maxManifoldPoints) { ManifoldPoint(other.points[it]) }\n    }\n\n    /**\n     * copies this manifold from the given one\n     *\n     * @param cp manifold to copy from\n     */\n    fun set(cp: Manifold) {\n        for (i in 0 until cp.pointCount) {\n            points[i].set(cp.points[i])\n        }\n\n        type = cp.type\n        localNormal.set(cp.localNormal)\n        localPoint.set(cp.localPoint)\n        pointCount = cp.pointCount\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n/*\n * JBox2D - A Java Port of Erin Catto's Box2D\n *\n * JBox2D homepage: http://jbox2d.sourceforge.net/\n * Box2D homepage: http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n *\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n *\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\npackage org.jbox2d.collision\n\nimport org.jbox2d.common.Vec2\n\n// updated to rev 100\n/**\n * A manifold point is a contact point belonging to a contact\n * manifold. It holds details related to the geometry and dynamics\n * of the contact points.\n * The local point usage depends on the manifold type:\n *  * e_circles: the local center of circleB\n *  * e_faceA: the local center of cirlceB or the clip point of polygonB\n *  * e_faceB: the clip point of polygonA\n * This structure is stored across time steps, so we keep it small.<br></br>\n * Note: the impulses are used for internal caching and may not\n * provide reliable contact forces, especially for high speed collisions.\n */\nclass ManifoldPoint {\n    /** usage depends on manifold type  */\n\n    val localPoint: Vec2\n    /** the non-penetration impulse  */\n\n    var normalImpulse: Float = 0.toFloat()\n    /** the friction impulse  */\n\n    var tangentImpulse: Float = 0.toFloat()\n    /** uniquely identifies a contact point between two shapes  */\n\n    val id: ContactID\n\n    /**\n     * Blank manifold point with everything zeroed out.\n     */\n    constructor() {\n        localPoint = Vec2()\n        tangentImpulse = 0f\n        normalImpulse = tangentImpulse\n        id = ContactID()\n    }\n\n    /**\n     * Creates a manifold point as a copy of the given point\n     * @param cp point to copy from\n     */\n    constructor(cp: ManifoldPoint) {\n        localPoint = cp.localPoint.clone()\n        normalImpulse = cp.normalImpulse\n        tangentImpulse = cp.tangentImpulse\n        id = ContactID(cp.id)\n    }\n\n    /**\n     * Sets this manifold point form the given one\n     * @param cp the point to copy from\n     */\n    fun set(cp: ManifoldPoint) {\n        localPoint.set(cp.localPoint)\n        normalImpulse = cp.normalImpulse\n        tangentImpulse = cp.tangentImpulse\n        id.set(cp.id)\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.collision\n\nimport org.jbox2d.common.Vec2\n\n// updated to rev 100\n/**\n * Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\n */\nclass RayCastInput {\n\n    val p1: Vec2\n\n    val p2: Vec2\n\n    var maxFraction: Float = 0.toFloat()\n\n    init {\n        p1 = Vec2()\n        p2 = Vec2()\n        maxFraction = 0f\n    }\n\n    fun set(rci: RayCastInput) {\n        p1.set(rci.p1)\n        p2.set(rci.p2)\n        maxFraction = rci.maxFraction\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.collision\n\nimport org.jbox2d.common.Vec2\n\n// updated to rev 100\n/**\n * Ray-cast output data. The ray hits at p1 + fraction * (p2 - p1), where p1 and p2\n * come from b2RayCastInput.\n */\nclass RayCastOutput {\n\n    val normal: Vec2\n\n    var fraction: Float = 0.toFloat()\n\n    init {\n        normal = Vec2()\n        fraction = 0f\n    }\n\n    fun set(rco: RayCastOutput) {\n        normal.set(rco.normal)\n        fraction = rco.fraction\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.collision\n\nimport org.jbox2d.collision.Distance.DistanceProxy\nimport org.jbox2d.collision.Distance.SimplexCache\nimport org.jbox2d.common.MathUtils\nimport org.jbox2d.common.Rot\nimport org.jbox2d.common.Settings\nimport org.jbox2d.common.Sweep\nimport org.jbox2d.common.Transform\nimport org.jbox2d.common.Vec2\nimport org.jbox2d.internal.*\nimport org.jbox2d.pooling.IWorldPool\n\n/**\n * Class used for computing the time of impact. This class should not be constructed usually, just\n * retrieve from the [IWorldPool.getTimeOfImpact].\n *\n * @author daniel\n */\nclass TimeOfImpact(private val pool: IWorldPool, private val stats: TimeOfImpact.Stats = TimeOfImpact.Stats()) {\n\n\n    // djm pooling\n    private val cache = SimplexCache()\n    private val distanceInput = DistanceInput()\n    private val xfA = Transform()\n    private val xfB = Transform()\n    private val distanceOutput = DistanceOutput()\n    private val fcn = SeparationFunction()\n    private val indexes = IntArray(2)\n    private val sweepA = Sweep()\n    private val sweepB = Sweep()\n\n    /**\n     * Input parameters for TOI\n     *\n     * @author Daniel Murphy\n     */\n    class TOIInput {\n\n        val proxyA = DistanceProxy()\n\n        val proxyB = DistanceProxy()\n\n        val sweepA = Sweep()\n\n        val sweepB = Sweep()\n        /**\n         * defines sweep interval [0, tMax]\n         */\n\n        var tMax: Float = 0.toFloat()\n    }\n\n    enum class TOIOutputState {\n        UNKNOWN, FAILED, OVERLAPPED, TOUCHING, SEPARATED\n    }\n\n    /**\n     * Output parameters for TimeOfImpact\n     *\n     * @author daniel\n     */\n    class TOIOutput {\n\n        var state: TOIOutputState? = null\n\n        var t: Float = 0.toFloat()\n    }\n\n    /**\n     * Compute the upper bound on time before two shapes penetrate. Time is represented as a fraction\n     * between [0,tMax]. This uses a swept separating axis and may miss some intermediate,\n     * non-tunneling collision. If you change the time interval, you should call this function again.\n     * Note: use Distance to compute the contact point and normal at the time of impact.\n     *\n     * @param output\n     * @param input\n     */\n    fun timeOfImpact(output: TOIOutput, input: TOIInput) {\n        // CCD via the local separating axis method. This seeks progression\n        // by computing the largest time at which separation is maintained.\n\n        ++stats.toiCalls\n\n        output.state = TOIOutputState.UNKNOWN\n        output.t = input.tMax\n\n        val proxyA = input.proxyA\n        val proxyB = input.proxyB\n\n        sweepA.set(input.sweepA)\n        sweepB.set(input.sweepB)\n\n        // Large rotations can make the root finder fail, so we normalize the\n        // sweep angles.\n        sweepA.normalize()\n        sweepB.normalize()\n\n        val tMax = input.tMax\n\n        val totalRadius = proxyA.m_radius + proxyB.m_radius\n        // djm: whats with all these constants?\n        val target = MathUtils.max(Settings.linearSlop, totalRadius - 3.0f * Settings.linearSlop)\n        val tolerance = 0.25f * Settings.linearSlop\n\n        assert(target > tolerance)\n\n        var t1 = 0f\n        var iter = 0\n\n        cache.count = 0\n        distanceInput.proxyA = input.proxyA\n        distanceInput.proxyB = input.proxyB\n        distanceInput.useRadii = false\n\n        // The outer loop progressively attempts to compute new separating axes.\n        // This loop terminates when an axis is repeated (no progress is made).\n        while (true) {\n            sweepA.getTransform(xfA, t1)\n            sweepB.getTransform(xfB, t1)\n            // System.out.printf(\"sweepA: %f, %f, sweepB: %f, %f\\n\",\n            // sweepA.c.x, sweepA.c.y, sweepB.c.x, sweepB.c.y);\n            // Get the distance between shapes. We can also use the results\n            // to get a separating axis\n            distanceInput.transformA = xfA\n            distanceInput.transformB = xfB\n            pool.distance.distance(distanceOutput, cache, distanceInput)\n\n            // System.out.printf(\"Dist: %f at points %f, %f and %f, %f.  %d iterations\\n\",\n            // distanceOutput.distance, distanceOutput.pointA.x, distanceOutput.pointA.y,\n            // distanceOutput.pointB.x, distanceOutput.pointB.y,\n            // distanceOutput.iterations);\n\n            // If the shapes are overlapped, we give up on continuous collision.\n            if (distanceOutput.distance <= 0f) {\n                // Failure!\n                output.state = TOIOutputState.OVERLAPPED\n                output.t = 0f\n                break\n            }\n\n            if (distanceOutput.distance < target + tolerance) {\n                // Victory!\n                output.state = TOIOutputState.TOUCHING\n                output.t = t1\n                break\n            }\n\n            // Initialize the separating axis.\n            fcn.initialize(cache, proxyA, sweepA, proxyB, sweepB, t1)\n\n            // Compute the TOI on the separating axis. We do this by successively\n            // resolving the deepest point. This loop is bounded by the number of\n            // vertices.\n            var done = false\n            var t2 = tMax\n            var pushBackIter = 0\n            while (true) {\n\n                // Find the deepest point at t2. Store the witness point indices.\n                var s2 = fcn.findMinSeparation(indexes, t2)\n                // System.out.printf(\"s2: %f\\n\", s2);\n                // Is the final configuration separated?\n                if (s2 > target + tolerance) {\n                    // Victory!\n                    output.state = TOIOutputState.SEPARATED\n                    output.t = tMax\n                    done = true\n                    break\n                }\n\n                // Has the separation reached tolerance?\n                if (s2 > target - tolerance) {\n                    // Advance the sweeps\n                    t1 = t2\n                    break\n                }\n\n                // Compute the initial separation of the witness points.\n                var s1 = fcn.evaluate(indexes[0], indexes[1], t1)\n                // Check for initial overlap. This might happen if the root finder\n                // runs out of iterations.\n                // System.out.printf(\"s1: %f, target: %f, tolerance: %f\\n\", s1, target,\n                // tolerance);\n                if (s1 < target - tolerance) {\n                    output.state = TOIOutputState.FAILED\n                    output.t = t1\n                    done = true\n                    break\n                }\n\n                // Check for touching\n                if (s1 <= target + tolerance) {\n                    // Victory! t1 should hold the TOI (could be 0.0).\n                    output.state = TOIOutputState.TOUCHING\n                    output.t = t1\n                    done = true\n                    break\n                }\n\n                // Compute 1D root of: f(x) - target = 0\n                var rootIterCount = 0\n                var a1 = t1\n                var a2 = t2\n                while (true) {\n                    // Use a mix of the secant rule and bisection.\n                    val t: Float\n                    if (rootIterCount and 1 == 1) {\n                        // Secant rule to improve convergence.\n                        t = a1 + (target - s1) * (a2 - a1) / (s2 - s1)\n                    } else {\n                        // Bisection to guarantee progress.\n                        t = 0.5f * (a1 + a2)\n                    }\n\n                    ++rootIterCount\n                    ++stats.toiRootIters\n\n                    val s = fcn.evaluate(indexes[0], indexes[1], t)\n\n                    if (MathUtils.abs(s - target) < tolerance) {\n                        // t2 holds a tentative value for t1\n                        t2 = t\n                        break\n                    }\n\n                    // Ensure we continue to bracket the root.\n                    if (s > target) {\n                        a1 = t\n                        s1 = s\n                    } else {\n                        a2 = t\n                        s2 = s\n                    }\n\n                    if (rootIterCount == MAX_ROOT_ITERATIONS) {\n                        break\n                    }\n                }\n\n                stats.toiMaxRootIters = MathUtils.max(stats.toiMaxRootIters, rootIterCount)\n\n                ++pushBackIter\n\n                if (pushBackIter == Settings.maxPolygonVertices || rootIterCount == MAX_ROOT_ITERATIONS) {\n                    break\n                }\n            }\n\n            ++iter\n            ++stats.toiIters\n\n            if (done) {\n                // System.out.println(\"done\");\n                break\n            }\n\n            if (iter == MAX_ITERATIONS) {\n                // System.out.println(\"failed, root finder stuck\");\n                // Root finder got stuck. Semi-victory.\n                output.state = TOIOutputState.FAILED\n                output.t = t1\n                break\n            }\n        }\n\n        // System.out.printf(\"final sweeps: %f, %f, %f; %f, %f, %f\", input.s)\n        stats.toiMaxIters = MathUtils.max(stats.toiMaxIters, iter)\n    }\n\n    companion object {\n        val MAX_ITERATIONS = 20\n        val MAX_ROOT_ITERATIONS = 50\n    }\n\n    class Stats {\n        var toiCalls = 0\n        var toiIters = 0\n        var toiMaxIters = 0\n        var toiRootIters = 0\n        var toiMaxRootIters = 0\n    }\n}\n\n\ninternal enum class Type {\n    POINTS, FACE_A, FACE_B\n}\n\n\ninternal class SeparationFunction {\n\n    lateinit var m_proxyA: DistanceProxy\n    lateinit var m_proxyB: DistanceProxy\n    lateinit var m_type: Type\n    val m_localPoint = Vec2()\n    val m_axis = Vec2()\n    lateinit var m_sweepA: Sweep\n    lateinit var m_sweepB: Sweep\n\n    // djm pooling\n    private val localPointA = Vec2()\n    private val localPointB = Vec2()\n    private val pointA = Vec2()\n    private val pointB = Vec2()\n    private val localPointA1 = Vec2()\n    private val localPointA2 = Vec2()\n    private val normal = Vec2()\n    private val localPointB1 = Vec2()\n    private val localPointB2 = Vec2()\n    private val temp = Vec2()\n    private val xfa = Transform()\n    private val xfb = Transform()\n\n    private val axisA = Vec2()\n    private val axisB = Vec2()\n\n    // TODO_ERIN might not need to return the separation\n\n    fun initialize(cache: SimplexCache, proxyA: DistanceProxy, sweepA: Sweep,\n                   proxyB: DistanceProxy, sweepB: Sweep, t1: Float): Float {\n        m_proxyA = proxyA\n        m_proxyB = proxyB\n        val count = cache.count\n        assert(0 < count && count < 3)\n\n        m_sweepA = sweepA\n        m_sweepB = sweepB\n\n        m_sweepA.getTransform(xfa, t1)\n        m_sweepB.getTransform(xfb, t1)\n\n        // log.debug(\"initializing separation.\\n\" +\n        // \"cache: \"+cache.count+\"-\"+cache.metric+\"-\"+cache.indexA+\"-\"+cache.indexB+\"\\n\"\n        // \"distance: \"+proxyA.\n\n        if (count == 1) {\n            m_type = Type.POINTS\n            /*\n       * Vec2 localPointA = m_proxyA.GetVertex(cache.indexA[0]); Vec2 localPointB =\n       * m_proxyB.GetVertex(cache.indexB[0]); Vec2 pointA = Mul(transformA, localPointA); Vec2\n       * pointB = Mul(transformB, localPointB); m_axis = pointB - pointA; m_axis.Normalize();\n       */\n            localPointA.set(m_proxyA.getVertex(cache.indexA[0]))\n            localPointB.set(m_proxyB.getVertex(cache.indexB[0]))\n            Transform.mulToOutUnsafe(xfa, localPointA, pointA)\n            Transform.mulToOutUnsafe(xfb, localPointB, pointB)\n            m_axis.set(pointB).subLocal(pointA)\n            val s = m_axis.normalize()\n            return s\n        } else if (cache.indexA[0] == cache.indexA[1]) {\n            // Two points on B and one on A.\n            m_type = Type.FACE_B\n\n            localPointB1.set(m_proxyB.getVertex(cache.indexB[0]))\n            localPointB2.set(m_proxyB.getVertex(cache.indexB[1]))\n\n            temp.set(localPointB2).subLocal(localPointB1)\n            Vec2.crossToOutUnsafe(temp, 1f, m_axis)\n            m_axis.normalize()\n\n            Rot.mulToOutUnsafe(xfb.q, m_axis, normal)\n\n            m_localPoint.set(localPointB1).addLocal(localPointB2).mulLocal(.5f)\n            Transform.mulToOutUnsafe(xfb, m_localPoint, pointB)\n\n            localPointA.set(proxyA.getVertex(cache.indexA[0]))\n            Transform.mulToOutUnsafe(xfa, localPointA, pointA)\n\n            temp.set(pointA).subLocal(pointB)\n            var s = Vec2.dot(temp, normal)\n            if (s < 0.0f) {\n                m_axis.negateLocal()\n                s = -s\n            }\n            return s\n        } else {\n            // Two points on A and one or two points on B.\n            m_type = Type.FACE_A\n\n            localPointA1.set(m_proxyA.getVertex(cache.indexA[0]))\n            localPointA2.set(m_proxyA.getVertex(cache.indexA[1]))\n\n            temp.set(localPointA2).subLocal(localPointA1)\n            Vec2.crossToOutUnsafe(temp, 1.0f, m_axis)\n            m_axis.normalize()\n\n            Rot.mulToOutUnsafe(xfa.q, m_axis, normal)\n\n            m_localPoint.set(localPointA1).addLocal(localPointA2).mulLocal(.5f)\n            Transform.mulToOutUnsafe(xfa, m_localPoint, pointA)\n\n            localPointB.set(m_proxyB.getVertex(cache.indexB[0]))\n            Transform.mulToOutUnsafe(xfb, localPointB, pointB)\n\n            temp.set(pointB).subLocal(pointA)\n            var s = Vec2.dot(temp, normal)\n            if (s < 0.0f) {\n                m_axis.negateLocal()\n                s = -s\n            }\n            return s\n        }\n    }\n\n    // float FindMinSeparation(int* indexA, int* indexB, float t) const\n    fun findMinSeparation(indexes: IntArray, t: Float): Float {\n\n        m_sweepA.getTransform(xfa, t)\n        m_sweepB.getTransform(xfb, t)\n\n        when (m_type) {\n            Type.POINTS -> {\n                Rot.mulTransUnsafe(xfa.q, m_axis, axisA)\n                Rot.mulTransUnsafe(xfb.q, m_axis.negateLocal(), axisB)\n                m_axis.negateLocal()\n\n                indexes[0] = m_proxyA.getSupport(axisA)\n                indexes[1] = m_proxyB.getSupport(axisB)\n\n                localPointA.set(m_proxyA.getVertex(indexes[0]))\n                localPointB.set(m_proxyB.getVertex(indexes[1]))\n\n                Transform.mulToOutUnsafe(xfa, localPointA, pointA)\n                Transform.mulToOutUnsafe(xfb, localPointB, pointB)\n\n                val separation = Vec2.dot(pointB.subLocal(pointA), m_axis)\n                return separation\n            }\n            Type.FACE_A -> {\n                Rot.mulToOutUnsafe(xfa.q, m_axis, normal)\n                Transform.mulToOutUnsafe(xfa, m_localPoint, pointA)\n\n                Rot.mulTransUnsafe(xfb.q, normal.negateLocal(), axisB)\n                normal.negateLocal()\n\n                indexes[0] = -1\n                indexes[1] = m_proxyB.getSupport(axisB)\n\n                localPointB.set(m_proxyB.getVertex(indexes[1]))\n                Transform.mulToOutUnsafe(xfb, localPointB, pointB)\n\n                val separation = Vec2.dot(pointB.subLocal(pointA), normal)\n                return separation\n            }\n            Type.FACE_B -> {\n                Rot.mulToOutUnsafe(xfb.q, m_axis, normal)\n                Transform.mulToOutUnsafe(xfb, m_localPoint, pointB)\n\n                Rot.mulTransUnsafe(xfa.q, normal.negateLocal(), axisA)\n                normal.negateLocal()\n\n                indexes[1] = -1\n                indexes[0] = m_proxyA.getSupport(axisA)\n\n                localPointA.set(m_proxyA.getVertex(indexes[0]))\n                Transform.mulToOutUnsafe(xfa, localPointA, pointA)\n\n                val separation = Vec2.dot(pointA.subLocal(pointB), normal)\n                return separation\n            }\n            else -> {\n                assert(false)\n                indexes[0] = -1\n                indexes[1] = -1\n                return 0f\n            }\n        }\n    }\n\n    fun evaluate(indexA: Int, indexB: Int, t: Float): Float {\n        m_sweepA.getTransform(xfa, t)\n        m_sweepB.getTransform(xfb, t)\n\n        when (m_type) {\n            Type.POINTS -> {\n                localPointA.set(m_proxyA.getVertex(indexA))\n                localPointB.set(m_proxyB.getVertex(indexB))\n\n                Transform.mulToOutUnsafe(xfa, localPointA, pointA)\n                Transform.mulToOutUnsafe(xfb, localPointB, pointB)\n\n                val separation = Vec2.dot(pointB.subLocal(pointA), m_axis)\n                return separation\n            }\n            Type.FACE_A -> {\n                Rot.mulToOutUnsafe(xfa.q, m_axis, normal)\n                Transform.mulToOutUnsafe(xfa, m_localPoint, pointA)\n\n                localPointB.set(m_proxyB.getVertex(indexB))\n                Transform.mulToOutUnsafe(xfb, localPointB, pointB)\n                val separation = Vec2.dot(pointB.subLocal(pointA), normal)\n                return separation\n            }\n            Type.FACE_B -> {\n                Rot.mulToOutUnsafe(xfb.q, m_axis, normal)\n                Transform.mulToOutUnsafe(xfb, m_localPoint, pointB)\n\n                localPointA.set(m_proxyA.getVertex(indexA))\n                Transform.mulToOutUnsafe(xfa, localPointA, pointA)\n\n                val separation = Vec2.dot(pointA.subLocal(pointB), normal)\n                return separation\n            }\n            else -> {\n                assert(false)\n                return 0f\n            }\n        }\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.collision\n\nimport org.jbox2d.common.MathUtils\nimport org.jbox2d.common.Rot\nimport org.jbox2d.common.Settings\nimport org.jbox2d.common.Transform\nimport org.jbox2d.common.Vec2\n\n/**\n * This is used to compute the current state of a contact manifold.\n *\n * @author daniel\n */\nclass WorldManifold {\n    /**\n     * World vector pointing from A to B\n     */\n\n    val normal: Vec2 = Vec2()\n\n    /**\n     * World contact point (point of intersection)\n     */\n\n    val points: Array<Vec2> = Array(Settings.maxManifoldPoints) { Vec2() }\n\n    /**\n     * A negative value indicates overlap, in meters.\n     */\n\n    val separations: FloatArray = FloatArray(Settings.maxManifoldPoints)\n\n    private val pool3 = Vec2()\n    private val pool4 = Vec2()\n\n    fun initialize(manifold: Manifold, xfA: Transform, radiusA: Float,\n                   xfB: Transform, radiusB: Float) {\n        if (manifold.pointCount == 0) {\n            return\n        }\n\n        when (manifold.type) {\n            Manifold.ManifoldType.CIRCLES -> {\n                val pointA = pool3\n                val pointB = pool4\n\n                normal.x = 1f\n                normal.y = 0f\n                val v = manifold.localPoint\n                // Transform.mulToOutUnsafe(xfA, manifold.localPoint, pointA);\n                // Transform.mulToOutUnsafe(xfB, manifold.points[0].localPoint, pointB);\n                pointA.x = xfA.q.c * v.x - xfA.q.s * v.y + xfA.p.x\n                pointA.y = xfA.q.s * v.x + xfA.q.c * v.y + xfA.p.y\n                val mp0p = manifold.points[0].localPoint\n                pointB.x = xfB.q.c * mp0p.x - xfB.q.s * mp0p.y + xfB.p.x\n                pointB.y = xfB.q.s * mp0p.x + xfB.q.c * mp0p.y + xfB.p.y\n\n                if (MathUtils.distanceSquared(pointA, pointB) > Settings.EPSILON * Settings.EPSILON) {\n                    normal.x = pointB.x - pointA.x\n                    normal.y = pointB.y - pointA.y\n                    normal.normalize()\n                }\n\n                val cAx = normal.x * radiusA + pointA.x\n                val cAy = normal.y * radiusA + pointA.y\n\n                val cBx = -normal.x * radiusB + pointB.x\n                val cBy = -normal.y * radiusB + pointB.y\n\n                points[0].x = (cAx + cBx) * .5f\n                points[0].y = (cAy + cBy) * .5f\n                separations[0] = (cBx - cAx) * normal.x + (cBy - cAy) * normal.y\n            }\n            Manifold.ManifoldType.FACE_A -> {\n                val planePoint = pool3\n\n                Rot.mulToOutUnsafe(xfA.q, manifold.localNormal, normal)\n                Transform.mulToOut(xfA, manifold.localPoint, planePoint)\n\n                val clipPoint = pool4\n\n                for (i in 0 until manifold.pointCount) {\n                    // b2Vec2 clipPoint = b2Mul(xfB, manifold->points[i].localPoint);\n                    // b2Vec2 cA = clipPoint + (radiusA - b2Dot(clipPoint - planePoint,\n                    // normal)) * normal;\n                    // b2Vec2 cB = clipPoint - radiusB * normal;\n                    // points[i] = 0.5f * (cA + cB);\n                    Transform.mulToOut(xfB, manifold.points[i].localPoint, clipPoint)\n                    // use cA as temporary for now\n                    // cA.set(clipPoint).subLocal(planePoint);\n                    // float scalar = radiusA - Vec2.dot(cA, normal);\n                    // cA.set(normal).mulLocal(scalar).addLocal(clipPoint);\n                    // cB.set(normal).mulLocal(radiusB).subLocal(clipPoint).negateLocal();\n                    // points[i].set(cA).addLocal(cB).mulLocal(0.5f);\n\n                    val scalar = radiusA - ((clipPoint.x - planePoint.x) * normal.x + (clipPoint.y - planePoint.y) * normal.y)\n\n                    val cAx = normal.x * scalar + clipPoint.x\n                    val cAy = normal.y * scalar + clipPoint.y\n\n                    val cBx = -normal.x * radiusB + clipPoint.x\n                    val cBy = -normal.y * radiusB + clipPoint.y\n\n                    points[i].x = (cAx + cBx) * .5f\n                    points[i].y = (cAy + cBy) * .5f\n                    separations[i] = (cBx - cAx) * normal.x + (cBy - cAy) * normal.y\n                }\n            }\n            Manifold.ManifoldType.FACE_B -> {\n                val planePoint = pool3\n                Rot.mulToOutUnsafe(xfB.q, manifold.localNormal, normal)\n                Transform.mulToOut(xfB, manifold.localPoint, planePoint)\n\n                // final Mat22 R = xfB.q;\n                // normal.x = R.ex.x * manifold.localNormal.x + R.ey.x * manifold.localNormal.y;\n                // normal.y = R.ex.y * manifold.localNormal.x + R.ey.y * manifold.localNormal.y;\n                // final Vec2 v = manifold.localPoint;\n                // planePoint.x = xfB.p.x + xfB.q.ex.x * v.x + xfB.q.ey.x * v.y;\n                // planePoint.y = xfB.p.y + xfB.q.ex.y * v.x + xfB.q.ey.y * v.y;\n\n                val clipPoint = pool4\n\n                for (i in 0 until manifold.pointCount) {\n                    // b2Vec2 clipPoint = b2Mul(xfA, manifold->points[i].localPoint);\n                    // b2Vec2 cB = clipPoint + (radiusB - b2Dot(clipPoint - planePoint,\n                    // normal)) * normal;\n                    // b2Vec2 cA = clipPoint - radiusA * normal;\n                    // points[i] = 0.5f * (cA + cB);\n\n                    Transform.mulToOut(xfA, manifold.points[i].localPoint, clipPoint)\n                    // cB.set(clipPoint).subLocal(planePoint);\n                    // float scalar = radiusB - Vec2.dot(cB, normal);\n                    // cB.set(normal).mulLocal(scalar).addLocal(clipPoint);\n                    // cA.set(normal).mulLocal(radiusA).subLocal(clipPoint).negateLocal();\n                    // points[i].set(cA).addLocal(cB).mulLocal(0.5f);\n\n                    // points[i] = 0.5f * (cA + cB);\n\n                    //\n                    // clipPoint.x = xfA.p.x + xfA.q.ex.x * manifold.points[i].localPoint.x + xfA.q.ey.x *\n                    // manifold.points[i].localPoint.y;\n                    // clipPoint.y = xfA.p.y + xfA.q.ex.y * manifold.points[i].localPoint.x + xfA.q.ey.y *\n                    // manifold.points[i].localPoint.y;\n\n                    val scalar = radiusB - ((clipPoint.x - planePoint.x) * normal.x + (clipPoint.y - planePoint.y) * normal.y)\n\n                    val cBx = normal.x * scalar + clipPoint.x\n                    val cBy = normal.y * scalar + clipPoint.y\n\n                    val cAx = -normal.x * radiusA + clipPoint.x\n                    val cAy = -normal.y * radiusA + clipPoint.y\n\n                    points[i].x = (cAx + cBx) * .5f\n                    points[i].y = (cAy + cBy) * .5f\n                    separations[i] = (cAx - cBx) * normal.x + (cAy - cBy) * normal.y\n                }\n                // Ensure normal points from A to B.\n                normal.x = -normal.x\n                normal.y = -normal.y\n            }\n        }\n    }\n}\n","package org.jbox2d.collision.broadphase\n\nimport org.jbox2d.callbacks.DebugDraw\nimport org.jbox2d.callbacks.PairCallback\nimport org.jbox2d.callbacks.TreeCallback\nimport org.jbox2d.callbacks.TreeRayCastCallback\nimport org.jbox2d.collision.AABB\nimport org.jbox2d.collision.RayCastInput\nimport org.jbox2d.common.Vec2\n\n\ninterface BroadPhase {\n\n    /**\n     * Get the number of proxies.\n     *\n     * @return\n     */\n    val proxyCount: Int\n\n    /**\n     * Get the height of the embedded tree.\n     *\n     * @return\n     */\n    val treeHeight: Int\n\n    val treeBalance: Int\n\n    val treeQuality: Float\n\n    /**\n     * Create a proxy with an initial AABB. Pairs are not reported until updatePairs is called.\n     *\n     * @param aabb\n     * @param userData\n     * @return\n     */\n    fun createProxy(aabb: AABB, userData: Any): Int\n\n    /**\n     * Destroy a proxy. It is up to the client to remove any pairs.\n     *\n     * @param proxyId\n     */\n    fun destroyProxy(proxyId: Int)\n\n    /**\n     * Call MoveProxy as many times as you like, then when you are done call UpdatePairs to finalized\n     * the proxy pairs (for your time step).\n     */\n    fun moveProxy(proxyId: Int, aabb: AABB, displacement: Vec2)\n\n    fun touchProxy(proxyId: Int)\n\n    fun getUserData(proxyId: Int): Any?\n\n    fun getFatAABB(proxyId: Int): AABB\n\n    fun testOverlap(proxyIdA: Int, proxyIdB: Int): Boolean\n\n    fun drawTree(argDraw: DebugDraw)\n\n    /**\n     * Update the pairs. This results in pair callbacks. This can only add pairs.\n     *\n     * @param callback\n     */\n    fun updatePairs(callback: PairCallback)\n\n    /**\n     * Query an AABB for overlapping proxies. The callback class is called for each proxy that\n     * overlaps the supplied AABB.\n     *\n     * @param callback\n     * @param aabb\n     */\n    fun query(callback: TreeCallback, aabb: AABB)\n\n    /**\n     * Ray-cast against the proxies in the tree. This relies on the callback to perform a exact\n     * ray-cast in the case were the proxy contains a shape. The callback also performs the any\n     * collision filtering. This has performance roughly equal to k * log(n), where k is the number of\n     * collisions and n is the number of proxies in the tree.\n     *\n     * @param input the ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\n     * @param callback a callback class that is called for each proxy that is hit by the ray.\n     */\n    fun raycast(callback: TreeRayCastCallback, input: RayCastInput)\n\n    companion object {\n\n\n        val NULL_PROXY = -1\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.collision.broadphase\n\nimport org.jbox2d.callbacks.DebugDraw\nimport org.jbox2d.callbacks.PairCallback\nimport org.jbox2d.callbacks.TreeCallback\nimport org.jbox2d.callbacks.TreeRayCastCallback\nimport org.jbox2d.collision.AABB\nimport org.jbox2d.collision.RayCastInput\nimport org.jbox2d.common.Vec2\nimport org.jbox2d.internal.Arrays_sort\nimport org.jbox2d.internal.arraycopy\n\n/**\n * The broad-phase is used for computing pairs and performing volume queries and ray casts. This\n * broad-phase does not persist pairs. Instead, this reports potentially new pairs. It is up to the\n * client to consume the new pairs and to track subsequent overlap.\n *\n * @author Daniel Murphy\n */\nclass DefaultBroadPhaseBuffer(private val m_tree: BroadPhaseStrategy) : TreeCallback, BroadPhase {\n\n    override var proxyCount: Int = 0\n        private set\n\n    private var m_moveBuffer: IntArray? = null\n    private var m_moveCapacity: Int = 0\n    private var m_moveCount: Int = 0\n\n    private var m_pairBuffer: LongArray? = null\n    private var m_pairCapacity: Int = 0\n    private var m_pairCount: Int = 0\n\n    private var m_queryProxyId: Int = 0\n\n    override val treeHeight: Int\n        get() = m_tree.height\n\n    override val treeBalance: Int\n        get() = m_tree.maxBalance\n\n    override val treeQuality: Float\n        get() = m_tree.areaRatio\n\n    init {\n        proxyCount = 0\n\n        m_pairCapacity = 16\n        m_pairCount = 0\n        m_pairBuffer = LongArray(m_pairCapacity)\n\n        m_moveCapacity = 16\n        m_moveCount = 0\n        m_moveBuffer = IntArray(m_moveCapacity)\n        m_queryProxyId = BroadPhase.NULL_PROXY\n    }\n\n    override fun createProxy(aabb: AABB, userData: Any): Int {\n        val proxyId = m_tree.createProxy(aabb, userData)\n        ++proxyCount\n        bufferMove(proxyId)\n        return proxyId\n    }\n\n    override fun destroyProxy(proxyId: Int) {\n        unbufferMove(proxyId)\n        --proxyCount\n        m_tree.destroyProxy(proxyId)\n    }\n\n    override fun moveProxy(proxyId: Int, aabb: AABB, displacement: Vec2) {\n        val buffer = m_tree.moveProxy(proxyId, aabb, displacement)\n        if (buffer) {\n            bufferMove(proxyId)\n        }\n    }\n\n    override fun touchProxy(proxyId: Int) {\n        bufferMove(proxyId)\n    }\n\n    override fun getUserData(proxyId: Int): Any? {\n        return m_tree.getUserData(proxyId)\n    }\n\n    override fun getFatAABB(proxyId: Int): AABB {\n        return m_tree.getFatAABB(proxyId)\n    }\n\n    override fun testOverlap(proxyIdA: Int, proxyIdB: Int): Boolean {\n        // return AABB.testOverlap(proxyA.aabb, proxyB.aabb);\n        // return m_tree.overlap(proxyIdA, proxyIdB);\n        val a = m_tree.getFatAABB(proxyIdA)\n        val b = m_tree.getFatAABB(proxyIdB)\n        if (b.lowerBound.x - a.upperBound.x > 0.0f || b.lowerBound.y - a.upperBound.y > 0.0f) {\n            return false\n        }\n\n        return !(a.lowerBound.x - b.upperBound.x > 0.0f || a.lowerBound.y - b.upperBound.y > 0.0f)\n\n    }\n\n    override fun drawTree(argDraw: DebugDraw) {\n        m_tree.drawTree(argDraw)\n    }\n\n    override fun updatePairs(callback: PairCallback) {\n        // Reset pair buffer\n        m_pairCount = 0\n\n        // Perform tree queries for all moving proxies.\n        for (i in 0 until m_moveCount) {\n            m_queryProxyId = m_moveBuffer!![i]\n            if (m_queryProxyId == BroadPhase.NULL_PROXY) {\n                continue\n            }\n\n            // We have to query the tree with the fat AABB so that\n            // we don't fail to create a pair that may touch later.\n            val fatAABB = m_tree.getFatAABB(m_queryProxyId)\n\n            // Query tree, create pairs and add them pair buffer.\n            // log.debug(\"quering aabb: \"+m_queryProxy.aabb);\n            m_tree.query(this, fatAABB)\n        }\n        // log.debug(\"Number of pairs found: \"+m_pairCount);\n\n        // Reset move buffer\n        m_moveCount = 0\n\n        // Sort the pair buffer to expose duplicates.\n        Arrays_sort(m_pairBuffer!!, 0, m_pairCount)\n\n        // Send the pairs back to the client.\n        var i = 0\n        while (i < m_pairCount) {\n            val primaryPair = m_pairBuffer!![i]\n            val userDataA = m_tree.getUserData((primaryPair shr 32).toInt())\n            val userDataB = m_tree.getUserData(primaryPair.toInt())\n\n            // log.debug(\"returning pair: \"+userDataA+\", \"+userDataB);\n            callback.addPair(userDataA, userDataB)\n            ++i\n\n            // Skip any duplicate pairs.\n            while (i < m_pairCount) {\n                val pair = m_pairBuffer!![i]\n                if (pair != primaryPair) {\n                    break\n                }\n                ++i\n            }\n        }\n    }\n\n    override fun query(callback: TreeCallback, aabb: AABB) {\n        m_tree.query(callback, aabb)\n    }\n\n    override fun raycast(callback: TreeRayCastCallback, input: RayCastInput) {\n        m_tree.raycast(callback, input)\n    }\n\n    protected fun bufferMove(proxyId: Int) {\n        if (m_moveCount == m_moveCapacity) {\n            val old = m_moveBuffer\n            m_moveCapacity *= 2\n            m_moveBuffer = IntArray(m_moveCapacity)\n            arraycopy(old!!, 0, m_moveBuffer!!, 0, old.size)\n        }\n\n        m_moveBuffer!![m_moveCount] = proxyId\n        ++m_moveCount\n    }\n\n    protected fun unbufferMove(proxyId: Int) {\n        for (i in 0 until m_moveCount) {\n            if (m_moveBuffer!![i] == proxyId) {\n                m_moveBuffer!![i] = BroadPhase.NULL_PROXY\n            }\n        }\n    }\n\n    /**\n     * This is called from DynamicTree::query when we are gathering pairs.\n     */\n    override fun treeCallback(proxyId: Int): Boolean {\n        // A proxy cannot form a pair with itself.\n        if (proxyId == m_queryProxyId) {\n            return true\n        }\n\n        // Grow the pair buffer as needed.\n        if (m_pairCount == m_pairCapacity) {\n            val oldBuffer = m_pairBuffer\n            m_pairCapacity *= 2\n            m_pairBuffer = LongArray(m_pairCapacity)\n            arraycopy(oldBuffer!!, 0, m_pairBuffer!!, 0, oldBuffer.size)\n            for (i in oldBuffer.size until m_pairCapacity) {\n                m_pairBuffer!![i] = 0\n            }\n        }\n\n        if (proxyId < m_queryProxyId) {\n            m_pairBuffer!![m_pairCount] = (proxyId.toLong() shl 32) or m_queryProxyId.toLong()\n        } else {\n            m_pairBuffer!![m_pairCount] = (m_queryProxyId.toLong() shl 32) or proxyId.toLong()\n        }\n\n        ++m_pairCount\n        return true\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.collision.broadphase\n\nimport org.jbox2d.callbacks.DebugDraw\nimport org.jbox2d.callbacks.TreeCallback\nimport org.jbox2d.callbacks.TreeRayCastCallback\nimport org.jbox2d.collision.AABB\nimport org.jbox2d.collision.RayCastInput\nimport org.jbox2d.common.Color3f\nimport org.jbox2d.common.MathUtils\nimport org.jbox2d.common.Settings\nimport org.jbox2d.common.Vec2\nimport org.jbox2d.internal.arraycopy\nimport org.jbox2d.internal.assert\n\n/**\n * A dynamic tree arranges data in a binary tree to accelerate queries such as volume queries and\n * ray casts. Leafs are proxies with an AABB. In the tree we expand the proxy AABB by _fatAABBFactor\n * so that the proxy AABB is bigger than the client object. This allows the client object to move by\n * small amounts without triggering a tree update.\n *\n * @author daniel\n */\nclass DynamicTree : BroadPhaseStrategy {\n\n    private var m_root: DynamicTreeNode? = null\n    private var m_nodes: Array<DynamicTreeNode> = Array(16) { DynamicTreeNode(it) }\n    private var m_nodeCount: Int = 0\n    private var m_nodeCapacity: Int = 16\n\n    private var m_freeList: Int = 0\n\n    private val drawVecs = Array<Vec2>(4) { Vec2() }\n    private var nodeStack = arrayOfNulls<DynamicTreeNode>(20)\n    private var nodeStackIndex = 0\n\n    private val r = Vec2()\n    private val aabb = AABB()\n    private val subInput = RayCastInput()\n\n    override val height: Int\n        get() = if (m_root == null) {\n            0\n        } else m_root!!.height\n\n    override val maxBalance: Int\n        get() {\n            var maxBalance = 0\n            for (i in 0 until m_nodeCapacity) {\n                val node = m_nodes!![i]\n                if (node.height <= 1) {\n                    continue\n                }\n\n                assert(!(node.child1 == null))\n\n                val child1 = node.child1\n                val child2 = node.child2\n                val balance = MathUtils.abs(child2!!.height - child1!!.height)\n                maxBalance = MathUtils.max(maxBalance, balance)\n            }\n\n            return maxBalance\n        }\n\n    override// Free node in pool\n    val areaRatio: Float\n        get() {\n            if (m_root == null) {\n                return 0.0f\n            }\n\n            val root = m_root\n            val rootArea = root!!.aabb.perimeter\n\n            var totalArea = 0.0f\n            for (i in 0 until m_nodeCapacity) {\n                val node = m_nodes!![i]\n                if (node.height < 0) {\n                    continue\n                }\n\n                totalArea += node.aabb.perimeter\n            }\n\n            return totalArea / rootArea\n        }\n\n    private val combinedAABB = AABB()\n\n    private val color = Color3f()\n    private val textVec = Vec2()\n\n    init {\n        // Build a linked list for the free list.\n        for (i in m_nodeCapacity - 1 downTo 0) {\n            m_nodes!![i].parent = if (i == m_nodeCapacity - 1) null else m_nodes!![i + 1]\n            m_nodes!![i].height = -1\n        }\n    }\n\n    override fun createProxy(aabb: AABB, userData: Any): Int {\n        assert(aabb.isValid)\n        val node = allocateNode()\n        val proxyId = node.id\n        // Fatten the aabb\n        val nodeAABB = node.aabb\n        nodeAABB.lowerBound.x = aabb.lowerBound.x - Settings.aabbExtension\n        nodeAABB.lowerBound.y = aabb.lowerBound.y - Settings.aabbExtension\n        nodeAABB.upperBound.x = aabb.upperBound.x + Settings.aabbExtension\n        nodeAABB.upperBound.y = aabb.upperBound.y + Settings.aabbExtension\n        node.userData = userData\n\n        insertLeaf(proxyId)\n\n        return proxyId\n    }\n\n    override fun destroyProxy(proxyId: Int) {\n        assert(0 <= proxyId && proxyId < m_nodeCapacity)\n        val node = m_nodes!![proxyId]\n        assert(node.child1 == null)\n\n        removeLeaf(node)\n        freeNode(node)\n    }\n\n    override fun moveProxy(proxyId: Int, aabb: AABB, displacement: Vec2): Boolean {\n        assert(aabb.isValid)\n        assert(0 <= proxyId && proxyId < m_nodeCapacity)\n        val node = m_nodes!![proxyId]\n        assert(node.child1 == null)\n\n        val nodeAABB = node.aabb\n        // if (nodeAABB.contains(aabb)) {\n        if (nodeAABB.lowerBound.x <= aabb.lowerBound.x && nodeAABB.lowerBound.y <= aabb.lowerBound.y\n                && aabb.upperBound.x <= nodeAABB.upperBound.x && aabb.upperBound.y <= nodeAABB.upperBound.y) {\n            return false\n        }\n\n        removeLeaf(node)\n\n        // Extend AABB\n        val lowerBound = nodeAABB.lowerBound\n        val upperBound = nodeAABB.upperBound\n        lowerBound.x = aabb.lowerBound.x - Settings.aabbExtension\n        lowerBound.y = aabb.lowerBound.y - Settings.aabbExtension\n        upperBound.x = aabb.upperBound.x + Settings.aabbExtension\n        upperBound.y = aabb.upperBound.y + Settings.aabbExtension\n\n        // Predict AABB displacement.\n        val dx = displacement.x * Settings.aabbMultiplier\n        val dy = displacement.y * Settings.aabbMultiplier\n        if (dx < 0.0f) {\n            lowerBound.x += dx\n        } else {\n            upperBound.x += dx\n        }\n\n        if (dy < 0.0f) {\n            lowerBound.y += dy\n        } else {\n            upperBound.y += dy\n        }\n\n        insertLeaf(proxyId)\n        return true\n    }\n\n    override fun getUserData(proxyId: Int): Any? {\n        assert(0 <= proxyId && proxyId < m_nodeCapacity)\n        return m_nodes!![proxyId].userData\n    }\n\n    override fun getFatAABB(proxyId: Int): AABB {\n        assert(0 <= proxyId && proxyId < m_nodeCapacity)\n        return m_nodes!![proxyId].aabb\n    }\n\n    override fun query(callback: TreeCallback, aabb: AABB) {\n        assert(aabb.isValid)\n        nodeStackIndex = 0\n        nodeStack[nodeStackIndex++] = m_root\n\n        while (nodeStackIndex > 0) {\n            val node = nodeStack[--nodeStackIndex] ?: continue\n\n            if (AABB.testOverlap(node.aabb, aabb)) {\n                if (node.child1 == null) {\n                    val proceed = callback.treeCallback(node.id)\n                    if (!proceed) {\n                        return\n                    }\n                } else {\n                    if (nodeStack.size - nodeStackIndex - 2 <= 0) {\n                        val newBuffer = arrayOfNulls<DynamicTreeNode>(nodeStack.size * 2)\n                        arraycopy(nodeStack, 0, newBuffer, 0, nodeStack.size)\n                        nodeStack = newBuffer\n                    }\n                    nodeStack[nodeStackIndex++] = node.child1\n                    nodeStack[nodeStackIndex++] = node.child2\n                }\n            }\n        }\n    }\n\n    override fun raycast(callback: TreeRayCastCallback, input: RayCastInput) {\n        val p1 = input.p1\n        val p2 = input.p2\n        val p1x = p1.x\n        val p2x = p2.x\n        val p1y = p1.y\n        val p2y = p2.y\n        val vx: Float\n        val vy: Float\n        val rx: Float\n        val ry: Float\n        val absVx: Float\n        val absVy: Float\n        var cx: Float\n        var cy: Float\n        var hx: Float\n        var hy: Float\n        var tempx: Float\n        var tempy: Float\n        r.x = p2x - p1x\n        r.y = p2y - p1y\n        assert(r.x * r.x + r.y * r.y > 0f)\n        r.normalize()\n        rx = r.x\n        ry = r.y\n\n        // v is perpendicular to the segment.\n        vx = -1f * ry\n        vy = 1f * rx\n        absVx = MathUtils.abs(vx)\n        absVy = MathUtils.abs(vy)\n\n        // Separating axis for segment (Gino, p80).\n        // |dot(v, p1 - c)| > dot(|v|, h)\n\n        var maxFraction = input.maxFraction\n\n        // Build a bounding box for the segment.\n        val segAABB = aabb\n        // Vec2 t = p1 + maxFraction * (p2 - p1);\n        // before inline\n        // temp.set(p2).subLocal(p1).mulLocal(maxFraction).addLocal(p1);\n        // Vec2.minToOut(p1, temp, segAABB.lowerBound);\n        // Vec2.maxToOut(p1, temp, segAABB.upperBound);\n        tempx = (p2x - p1x) * maxFraction + p1x\n        tempy = (p2y - p1y) * maxFraction + p1y\n        segAABB.lowerBound.x = if (p1x < tempx) p1x else tempx\n        segAABB.lowerBound.y = if (p1y < tempy) p1y else tempy\n        segAABB.upperBound.x = if (p1x > tempx) p1x else tempx\n        segAABB.upperBound.y = if (p1y > tempy) p1y else tempy\n        // end inline\n\n        nodeStackIndex = 0\n        nodeStack[nodeStackIndex++] = m_root\n        while (nodeStackIndex > 0) {\n            val node = nodeStack[--nodeStackIndex] ?: continue\n\n            val nodeAABB = node.aabb\n            if (!AABB.testOverlap(nodeAABB, segAABB)) {\n                continue\n            }\n\n            // Separating axis for segment (Gino, p80).\n            // |dot(v, p1 - c)| > dot(|v|, h)\n            // node.aabb.getCenterToOut(c);\n            // node.aabb.getExtentsToOut(h);\n            cx = (nodeAABB.lowerBound.x + nodeAABB.upperBound.x) * .5f\n            cy = (nodeAABB.lowerBound.y + nodeAABB.upperBound.y) * .5f\n            hx = (nodeAABB.upperBound.x - nodeAABB.lowerBound.x) * .5f\n            hy = (nodeAABB.upperBound.y - nodeAABB.lowerBound.y) * .5f\n            tempx = p1x - cx\n            tempy = p1y - cy\n            val separation = MathUtils.abs(vx * tempx + vy * tempy) - (absVx * hx + absVy * hy)\n            if (separation > 0.0f) {\n                continue\n            }\n\n            if (node.child1 == null) {\n                subInput.p1.x = p1x\n                subInput.p1.y = p1y\n                subInput.p2.x = p2x\n                subInput.p2.y = p2y\n                subInput.maxFraction = maxFraction\n\n                val value = callback.raycastCallback(subInput, node.id)\n\n                if (value == 0.0f) {\n                    // The client has terminated the ray cast.\n                    return\n                }\n\n                if (value > 0.0f) {\n                    // Update segment bounding box.\n                    maxFraction = value\n                    // temp.set(p2).subLocal(p1).mulLocal(maxFraction).addLocal(p1);\n                    // Vec2.minToOut(p1, temp, segAABB.lowerBound);\n                    // Vec2.maxToOut(p1, temp, segAABB.upperBound);\n                    tempx = (p2x - p1x) * maxFraction + p1x\n                    tempy = (p2y - p1y) * maxFraction + p1y\n                    segAABB.lowerBound.x = if (p1x < tempx) p1x else tempx\n                    segAABB.lowerBound.y = if (p1y < tempy) p1y else tempy\n                    segAABB.upperBound.x = if (p1x > tempx) p1x else tempx\n                    segAABB.upperBound.y = if (p1y > tempy) p1y else tempy\n                }\n            } else {\n                if (nodeStack.size - nodeStackIndex - 2 <= 0) {\n                    val newBuffer = arrayOfNulls<DynamicTreeNode>(nodeStack.size * 2)\n                    arraycopy(nodeStack, 0, newBuffer, 0, nodeStack.size)\n                    nodeStack = newBuffer\n                }\n                nodeStack[nodeStackIndex++] = node.child1\n                nodeStack[nodeStackIndex++] = node.child2\n            }\n        }\n    }\n\n    override fun computeHeight(): Int {\n        return computeHeight(m_root!!)\n    }\n\n    private fun computeHeight(node: DynamicTreeNode): Int {\n        assert(0 <= node.id && node.id < m_nodeCapacity)\n\n        if (node.child1 == null) {\n            return 0\n        }\n        val height1 = computeHeight(node.child1!!)\n        val height2 = computeHeight(node.child2!!)\n        return 1 + MathUtils.max(height1, height2)\n    }\n\n    /**\n     * Validate this tree. For testing.\n     */\n    fun validate() {\n        validateStructure(m_root)\n        validateMetrics(m_root)\n\n        var freeCount = 0\n        var freeNode: DynamicTreeNode? = if (m_freeList != NULL_NODE) m_nodes!![m_freeList] else null\n        while (freeNode != null) {\n            assert(0 <= freeNode.id && freeNode.id < m_nodeCapacity)\n            assert(freeNode === m_nodes!![freeNode.id])\n            freeNode = freeNode.parent\n            ++freeCount\n        }\n\n        assert(height == computeHeight())\n\n        assert(m_nodeCount + freeCount == m_nodeCapacity)\n    }\n\n    /**\n     * Build an optimal tree. Very expensive. For testing.\n     */\n    fun rebuildBottomUp() {\n        val nodes = IntArray(m_nodeCount)\n        var count = 0\n\n        // Build array of leaves. Free the rest.\n        for (i in 0 until m_nodeCapacity) {\n            if (m_nodes!![i].height < 0) {\n                // free node in pool\n                continue\n            }\n\n            val node = m_nodes!![i]\n            if (node.child1 == null) {\n                node.parent = null\n                nodes[count] = i\n                ++count\n            } else {\n                freeNode(node)\n            }\n        }\n\n        val b = AABB()\n        while (count > 1) {\n            var minCost = Float.MAX_VALUE\n            var iMin = -1\n            var jMin = -1\n            for (i in 0 until count) {\n                val aabbi = m_nodes!![nodes[i]].aabb\n\n                for (j in i + 1 until count) {\n                    val aabbj = m_nodes!![nodes[j]].aabb\n                    b.combine(aabbi, aabbj)\n                    val cost = b.perimeter\n                    if (cost < minCost) {\n                        iMin = i\n                        jMin = j\n                        minCost = cost\n                    }\n                }\n            }\n\n            val index1 = nodes[iMin]\n            val index2 = nodes[jMin]\n            val child1 = m_nodes!![index1]\n            val child2 = m_nodes!![index2]\n\n            val parent = allocateNode()\n            parent.child1 = child1\n            parent.child2 = child2\n            parent.height = 1 + MathUtils.max(child1.height, child2.height)\n            parent.aabb.combine(child1.aabb, child2.aabb)\n            parent.parent = null\n\n            child1.parent = parent\n            child2.parent = parent\n\n            nodes[jMin] = nodes[count - 1]\n            nodes[iMin] = parent.id\n            --count\n        }\n\n        m_root = m_nodes!![nodes[0]]\n\n        validate()\n    }\n\n    private fun allocateNode(): DynamicTreeNode {\n        if (m_freeList == NULL_NODE) {\n            assert(m_nodeCount == m_nodeCapacity)\n\n            val old = m_nodes\n            m_nodeCapacity *= 2\n            m_nodes = arrayOfNulls<DynamicTreeNode>(m_nodeCapacity) as Array<DynamicTreeNode>\n            arraycopy(old!!, 0, m_nodes!!, 0, old.size)\n\n            // Build a linked list for the free list.\n            for (i in m_nodeCapacity - 1 downTo m_nodeCount) {\n                m_nodes!![i] = DynamicTreeNode(i)\n                m_nodes!![i].parent = if (i == m_nodeCapacity - 1) null else m_nodes!![i + 1]\n                m_nodes!![i].height = -1\n            }\n            m_freeList = m_nodeCount\n        }\n        val nodeId = m_freeList\n        val treeNode = m_nodes!![nodeId]\n        m_freeList = if (treeNode.parent != null) treeNode.parent!!.id else NULL_NODE\n\n        treeNode.parent = null\n        treeNode.child1 = null\n        treeNode.child2 = null\n        treeNode.height = 0\n        treeNode.userData = null\n        ++m_nodeCount\n        return treeNode\n    }\n\n    /**\n     * returns a node to the pool\n     */\n    private fun freeNode(node: DynamicTreeNode) {\n        assert(node != null)\n        assert(0 < m_nodeCount)\n        node.parent = if (m_freeList != NULL_NODE) m_nodes!![m_freeList] else null\n        node.height = -1\n        m_freeList = node.id\n        m_nodeCount--\n    }\n\n    private fun insertLeaf(leaf_index: Int) {\n        val leaf = m_nodes!![leaf_index]\n        if (m_root == null) {\n            m_root = leaf\n            m_root!!.parent = null\n            return\n        }\n\n        // find the best sibling\n        val leafAABB = leaf.aabb\n        var index = m_root\n        while (index!!.child1 != null) {\n            val node = index\n            val child1 = node.child1\n            val child2 = node.child2\n\n            val area = node.aabb.perimeter\n\n            combinedAABB.combine(node.aabb, leafAABB)\n            val combinedArea = combinedAABB.perimeter\n\n            // Cost of creating a new parent for this node and the new leaf\n            val cost = 2.0f * combinedArea\n\n            // Minimum cost of pushing the leaf further down the tree\n            val inheritanceCost = 2.0f * (combinedArea - area)\n\n            // Cost of descending into child1\n            val cost1: Float\n            if (child1!!.child1 == null) {\n                combinedAABB.combine(leafAABB, child1.aabb)\n                cost1 = combinedAABB.perimeter + inheritanceCost\n            } else {\n                combinedAABB.combine(leafAABB, child1.aabb)\n                val oldArea = child1.aabb.perimeter\n                val newArea = combinedAABB.perimeter\n                cost1 = newArea - oldArea + inheritanceCost\n            }\n\n            // Cost of descending into child2\n            val cost2: Float\n            if (child2!!.child1 == null) {\n                combinedAABB.combine(leafAABB, child2.aabb)\n                cost2 = combinedAABB.perimeter + inheritanceCost\n            } else {\n                combinedAABB.combine(leafAABB, child2.aabb)\n                val oldArea = child2.aabb.perimeter\n                val newArea = combinedAABB.perimeter\n                cost2 = newArea - oldArea + inheritanceCost\n            }\n\n            // Descend according to the minimum cost.\n            if (cost < cost1 && cost < cost2) {\n                break\n            }\n\n            // Descend\n            if (cost1 < cost2) {\n                index = child1\n            } else {\n                index = child2\n            }\n        }\n\n        val sibling = index\n        val oldParent = m_nodes!![sibling.id].parent\n        val newParent = allocateNode()\n        newParent.parent = oldParent\n        newParent.userData = null\n        newParent.aabb.combine(leafAABB, sibling.aabb)\n        newParent.height = sibling.height + 1\n\n        if (oldParent != null) {\n            // The sibling was not the root.\n            if (oldParent.child1 === sibling) {\n                oldParent.child1 = newParent\n            } else {\n                oldParent.child2 = newParent\n            }\n\n            newParent.child1 = sibling\n            newParent.child2 = leaf\n            sibling.parent = newParent\n            leaf.parent = newParent\n        } else {\n            // The sibling was the root.\n            newParent.child1 = sibling\n            newParent.child2 = leaf\n            sibling.parent = newParent\n            leaf.parent = newParent\n            m_root = newParent\n        }\n\n        // Walk back up the tree fixing heights and AABBs\n        index = leaf.parent\n        while (index != null) {\n            index = balance(index)\n\n            val child1 = index.child1\n            val child2 = index.child2\n\n            assert(child1 != null)\n            assert(child2 != null)\n\n            index.height = 1 + MathUtils.max(child1!!.height, child2!!.height)\n            index.aabb.combine(child1.aabb, child2.aabb)\n\n            index = index.parent\n        }\n        // validate();\n    }\n\n    private fun removeLeaf(leaf: DynamicTreeNode) {\n        if (leaf === m_root) {\n            m_root = null\n            return\n        }\n\n        val parent = leaf.parent\n        val grandParent = parent?.parent\n        val sibling: DynamicTreeNode\n        if (parent!!.child1 === leaf) {\n            sibling = parent!!.child2!!\n        } else {\n            sibling = parent!!.child1!!\n        }\n\n        if (grandParent != null) {\n            // Destroy parent and connect sibling to grandParent.\n            if (grandParent.child1 === parent) {\n                grandParent.child1 = sibling\n            } else {\n                grandParent.child2 = sibling\n            }\n            sibling.parent = grandParent\n            freeNode(parent)\n\n            // Adjust ancestor bounds.\n            var index = grandParent\n            while (index != null) {\n                index = balance(index)\n\n                val child1 = index.child1\n                val child2 = index.child2\n\n                index.aabb.combine(child1!!.aabb, child2!!.aabb)\n                index.height = 1 + MathUtils.max(child1.height, child2.height)\n\n                index = index.parent\n            }\n        } else {\n            m_root = sibling\n            sibling.parent = null\n            freeNode(parent)\n        }\n\n        // validate();\n    }\n\n    // Perform a left or right rotation if node A is imbalanced.\n    // Returns the new root index.\n    private fun balance(iA: DynamicTreeNode?): DynamicTreeNode {\n        assert(iA != null)\n\n        val A = iA\n        if (A!!.child1 == null || A.height < 2) {\n            return iA\n        }\n\n        val iB = A.child1\n        val iC = A.child2\n        assert(0 <= iB!!.id && iB.id < m_nodeCapacity)\n        assert(0 <= iC!!.id && iC.id < m_nodeCapacity)\n\n        val B = iB\n        val C = iC\n\n        val balance = C.height - B.height\n\n        // Rotate C up\n        if (balance > 1) {\n            val iF = C.child1\n            val iG = C.child2\n            val F = iF\n            val G = iG\n            assert(F != null)\n            assert(G != null)\n            assert(0 <= iF!!.id && iF.id < m_nodeCapacity)\n            assert(0 <= iG!!.id && iG.id < m_nodeCapacity)\n\n            // Swap A and C\n            C.child1 = iA\n            C.parent = A.parent\n            A.parent = iC\n\n            // A's old parent should point to C\n            if (C.parent != null) {\n                if (C.parent!!.child1 === iA) {\n                    C.parent!!.child1 = iC\n                } else {\n                    assert(C.parent!!.child2 === iA)\n                    C.parent!!.child2 = iC\n                }\n            } else {\n                m_root = iC\n            }\n\n            // Rotate\n            if (F!!.height > G!!.height) {\n                C.child2 = iF\n                A.child2 = iG\n                G.parent = iA\n                A.aabb.combine(B.aabb, G.aabb)\n                C.aabb.combine(A.aabb, F.aabb)\n\n                A.height = 1 + MathUtils.max(B.height, G.height)\n                C.height = 1 + MathUtils.max(A.height, F.height)\n            } else {\n                C.child2 = iG\n                A.child2 = iF\n                F.parent = iA\n                A.aabb.combine(B.aabb, F.aabb)\n                C.aabb.combine(A.aabb, G.aabb)\n\n                A.height = 1 + MathUtils.max(B.height, F.height)\n                C.height = 1 + MathUtils.max(A.height, G.height)\n            }\n\n            return iC\n        }\n\n        // Rotate B up\n        if (balance < -1) {\n            val iD = B.child1\n            val iE = B.child2\n            val D = iD\n            val E = iE\n            assert(0 <= iD!!.id && iD.id < m_nodeCapacity)\n            assert(0 <= iE!!.id && iE.id < m_nodeCapacity)\n\n            // Swap A and B\n            B.child1 = iA\n            B.parent = A.parent\n            A.parent = iB\n\n            // A's old parent should point to B\n            if (B.parent != null) {\n                if (B.parent!!.child1 === iA) {\n                    B.parent!!.child1 = iB\n                } else {\n                    assert(B.parent!!.child2 === iA)\n                    B.parent!!.child2 = iB\n                }\n            } else {\n                m_root = iB\n            }\n\n            // Rotate\n            if (D!!.height > E!!.height) {\n                B.child2 = iD\n                A.child1 = iE\n                E.parent = iA\n                A.aabb.combine(C.aabb, E.aabb)\n                B.aabb.combine(A.aabb, D.aabb)\n\n                A.height = 1 + MathUtils.max(C.height, E.height)\n                B.height = 1 + MathUtils.max(A.height, D.height)\n            } else {\n                B.child2 = iE\n                A.child1 = iD\n                D.parent = iA\n                A.aabb.combine(C.aabb, D.aabb)\n                B.aabb.combine(A.aabb, E.aabb)\n\n                A.height = 1 + MathUtils.max(C.height, D.height)\n                B.height = 1 + MathUtils.max(A.height, E.height)\n            }\n\n            return iB\n        }\n\n        return iA\n    }\n\n    private fun validateStructure(node: DynamicTreeNode?) {\n        if (node == null) {\n            return\n        }\n        assert(node === m_nodes!![node.id])\n\n        if (node === m_root) {\n            assert(node.parent == null)\n        }\n\n        val child1 = node.child1\n        val child2 = node.child2\n\n        if (node.child1 == null) {\n            assert(child1 == null)\n            assert(child2 == null)\n            assert(node.height == 0)\n            return\n        }\n\n        assert(child1 != null && 0 <= child1.id && child1.id < m_nodeCapacity)\n        assert(child2 != null && 0 <= child2.id && child2.id < m_nodeCapacity)\n\n        assert(child1!!.parent === node)\n        assert(child2!!.parent === node)\n\n        validateStructure(child1)\n        validateStructure(child2)\n    }\n\n    private fun validateMetrics(node: DynamicTreeNode?) {\n        if (node == null) {\n            return\n        }\n\n        val child1 = node.child1\n        val child2 = node.child2\n\n        if (node.child1 == null) {\n            assert(child1 == null)\n            assert(child2 == null)\n            assert(node.height == 0)\n            return\n        }\n\n        assert(child1 != null && 0 <= child1.id && child1.id < m_nodeCapacity)\n        assert(child2 != null && 0 <= child2.id && child2.id < m_nodeCapacity)\n\n        val height1 = child1!!.height\n        val height2 = child2!!.height\n        val height: Int\n        height = 1 + MathUtils.max(height1, height2)\n        assert(node.height == height)\n\n        val aabb = AABB()\n        aabb.combine(child1.aabb, child2.aabb)\n\n        assert(aabb.lowerBound == node.aabb.lowerBound)\n        assert(aabb.upperBound == node.aabb.upperBound)\n\n        validateMetrics(child1)\n        validateMetrics(child2)\n    }\n\n    override fun drawTree(argDraw: DebugDraw) {\n        if (m_root == null) {\n            return\n        }\n        val height = computeHeight()\n        drawTree(argDraw, m_root!!, 0, height)\n    }\n\n    fun drawTree(argDraw: DebugDraw, node: DynamicTreeNode, spot: Int, height: Int) {\n        node.aabb.getVertices(drawVecs!!)\n\n        color.set(1f, (height - spot) * 1f / height, (height - spot) * 1f / height)\n        argDraw.drawPolygon(drawVecs!! as Array<Vec2>, 4, color)\n\n        argDraw.viewportTranform!!.getWorldToScreen(node.aabb.upperBound, textVec)\n        argDraw.drawString(textVec.x, textVec.y, node.id.toString() + \"-\" + (spot + 1) + \"/\" + height, color)\n\n        if (node.child1 != null) {\n            drawTree(argDraw, node.child1!!, spot + 1, height)\n        }\n        if (node.child2 != null) {\n            drawTree(argDraw, node.child2!!, spot + 1, height)\n        }\n    }\n\n    companion object {\n\n        val MAX_STACK_SIZE = 64\n\n        val NULL_NODE = -1\n    }\n}\n","package org.jbox2d.internal\n\ninternal inline fun <T> arraycopy(src: Array<T>, srcPos: Int, dst: Array<T>, dstPos: Int, size: Int): Unit =\n    run { src.copyInto(dst, dstPos, srcPos, srcPos + size) }\n\ninternal inline fun arraycopy(src: BooleanArray, srcPos: Int, dst: BooleanArray, dstPos: Int, size: Int): Unit =\n    run { src.copyInto(dst, dstPos, srcPos, srcPos + size) }\n\ninternal inline fun arraycopy(src: LongArray, srcPos: Int, dst: LongArray, dstPos: Int, size: Int): Unit =\n    run { src.copyInto(dst, dstPos, srcPos, srcPos + size) }\n\ninternal inline fun arraycopy(src: ByteArray, srcPos: Int, dst: ByteArray, dstPos: Int, size: Int): Unit =\n    run { src.copyInto(dst, dstPos, srcPos, srcPos + size) }\n\ninternal inline fun arraycopy(src: ShortArray, srcPos: Int, dst: ShortArray, dstPos: Int, size: Int): Unit =\n    run { src.copyInto(dst, dstPos, srcPos, srcPos + size) }\n\ninternal inline fun arraycopy(src: IntArray, srcPos: Int, dst: IntArray, dstPos: Int, size: Int): Unit =\n    run { src.copyInto(dst, dstPos, srcPos, srcPos + size) }\n\ninternal inline fun arraycopy(src: FloatArray, srcPos: Int, dst: FloatArray, dstPos: Int, size: Int): Unit =\n    run { src.copyInto(dst, dstPos, srcPos, srcPos + size) }\n\ninternal inline fun arraycopy(src: DoubleArray, srcPos: Int, dst: DoubleArray, dstPos: Int, size: Int): Unit =\n    run { src.copyInto(dst, dstPos, srcPos, srcPos + size) }\n\ninternal inline fun assert(boolean: Boolean) = check(boolean)\ninternal inline fun assert(boolean: Boolean, message: () -> String) = check(boolean)\n\ninternal fun <T : Comparable<T>> Arrays_sort(array: Array<T>, fromIndex: Int, toIndex: Int) {\n    val sorted = array.copyOfRange(fromIndex, toIndex).sortedArray()\n    arraycopy(sorted, 0, array, fromIndex, toIndex - fromIndex)\n}\n\ninternal fun Arrays_sort(array: LongArray, fromIndex: Int, toIndex: Int) {\n    val sorted = array.copyOfRange(fromIndex, toIndex).sortedArray()\n    arraycopy(sorted, 0, array, fromIndex, toIndex - fromIndex)\n}\n\nexpect fun System_nanoTime(): Long\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.collision.broadphase\n\nimport org.jbox2d.collision.AABB\nimport org.jbox2d.userdata.Box2dTypedUserData\n\nclass DynamicTreeNode(internal val id: Int) : Box2dTypedUserData by Box2dTypedUserData.Mixin() {\n    /**\n     * Enlarged AABB\n     */\n\n    val aabb = AABB()\n\n\n    var userData: Any? = Unit\n\n\n    internal var parent: DynamicTreeNode? = null\n\n    internal var child1: DynamicTreeNode? = null\n\n    internal var child2: DynamicTreeNode? = null\n\n    internal var height: Int = 0\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.collision.shapes\n\nimport org.jbox2d.collision.AABB\nimport org.jbox2d.collision.RayCastInput\nimport org.jbox2d.collision.RayCastOutput\nimport org.jbox2d.common.MathUtils\nimport org.jbox2d.common.Settings\nimport org.jbox2d.common.Transform\nimport org.jbox2d.common.Vec2\nimport org.jbox2d.internal.assert\n\n/**\n * A circle shape.\n */\nclass CircleShape() : Shape(ShapeType.CIRCLE) {\n\n    val p: Vec2 = Vec2()\n\n    /**\n     * Get the vertex count.\n     *\n     * @return\n     */\n    val vertexCount: Int get() = 1\n\n    constructor(radius: Number) : this() {\n        this.radius = radius.toFloat()\n    }\n\n    override fun clone(): Shape {\n        val shape = CircleShape()\n        shape.p.x = p.x\n        shape.p.y = p.y\n        shape.radius = radius\n        return shape\n    }\n\n    override fun getChildCount(): Int = 1\n\n    /**\n     * Get the supporting vertex index in the given direction.\n     *\n     * @param d\n     * @return\n     */\n    fun getSupport(d: Vec2): Int = 0\n\n    /**\n     * Get the supporting vertex in the given direction.\n     *\n     * @param d\n     * @return\n     */\n    fun getSupportVertex(d: Vec2): Vec2 = p\n\n    /**\n     * Get a vertex by index.\n     *\n     * @param index\n     * @return\n     */\n    fun getVertex(index: Int): Vec2 {\n        assert(index == 0)\n        return p\n    }\n\n    override fun testPoint(transform: Transform, p: Vec2): Boolean {\n        // Rot.mulToOutUnsafe(transform.q, m_p, center);\n        // center.addLocal(transform.p);\n        //\n        // final Vec2 d = center.subLocal(p).negateLocal();\n        // return Vec2.dot(d, d) <= m_radius * m_radius;\n        val q = transform.q\n        val tp = transform.p\n        val centerx = -(q.c * this.p.x - q.s * this.p.y + tp.x - p.x)\n        val centery = -(q.s * this.p.x + q.c * this.p.y + tp.y - p.y)\n\n        return centerx * centerx + centery * centery <= radius * radius\n    }\n\n    override fun computeDistanceToOut(xf: Transform, p: Vec2, childIndex: Int, normalOut: Vec2): Float {\n        val xfq = xf.q\n        val centerx = xfq.c * this.p.x - xfq.s * this.p.y + xf.p.x\n        val centery = xfq.s * this.p.x + xfq.c * this.p.y + xf.p.y\n        val dx = p.x - centerx\n        val dy = p.y - centery\n        val d1 = MathUtils.sqrt(dx * dx + dy * dy)\n        normalOut.x = dx * 1 / d1\n        normalOut.y = dy * 1 / d1\n        return d1 - radius\n    }\n\n    // Collision Detection in Interactive 3D Environments by Gino van den Bergen\n    // From Section 3.1.2\n    // x = s + a * r\n    // norm(x) = radius\n    override fun raycast(\n        output: RayCastOutput, input: RayCastInput,\n        transform: Transform, childIndex: Int\n    ): Boolean {\n\n        val inputp1 = input.p1\n        val inputp2 = input.p2\n        val tq = transform.q\n        val tp = transform.p\n\n        // Rot.mulToOutUnsafe(transform.q, m_p, position);\n        // position.addLocal(transform.p);\n        val positionx = tq.c * p.x - tq.s * p.y + tp.x\n        val positiony = tq.s * p.x + tq.c * p.y + tp.y\n\n        val sx = inputp1.x - positionx\n        val sy = inputp1.y - positiony\n        // final float b = Vec2.dot(s, s) - m_radius * m_radius;\n        val b = sx * sx + sy * sy - radius * radius\n\n        // Solve quadratic equation.\n        val rx = inputp2.x - inputp1.x\n        val ry = inputp2.y - inputp1.y\n        // final float c = Vec2.dot(s, r);\n        // final float rr = Vec2.dot(r, r);\n        val c = sx * rx + sy * ry\n        val rr = rx * rx + ry * ry\n        val sigma = c * c - rr * b\n\n        // Check for negative discriminant and short segment.\n        if (sigma < 0.0f || rr < Settings.EPSILON) {\n            return false\n        }\n\n        // Find the point of intersection of the line with the circle.\n        var a = -(c + MathUtils.sqrt(sigma))\n\n        // Is the intersection point on the segment?\n        if (0.0f <= a && a <= input.maxFraction * rr) {\n            a /= rr\n            output.fraction = a\n            output.normal.x = rx * a + sx\n            output.normal.y = ry * a + sy\n            output.normal.normalize()\n            return true\n        }\n\n        return false\n    }\n\n    override fun computeAABB(aabb: AABB, transform: Transform, childIndex: Int) {\n        val tq = transform.q\n        val tp = transform.p\n        val px = tq.c * p.x - tq.s * p.y + tp.x\n        val py = tq.s * p.x + tq.c * p.y + tp.y\n\n        aabb.lowerBound.x = px - radius\n        aabb.lowerBound.y = py - radius\n        aabb.upperBound.x = px + radius\n        aabb.upperBound.y = py + radius\n    }\n\n    override fun computeMass(massData: MassData, density: Float) {\n        massData.mass = density * Settings.PI * radius * radius\n        massData.center.x = p.x\n        massData.center.y = p.y\n\n        // inertia about the local origin\n        // massData.I = massData.mass * (0.5f * m_radius * m_radius + Vec2.dot(m_p, m_p));\n        massData.I = massData.mass * (0.5f * radius * radius + (p.x * p.x + p.y * p.y))\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.collision.shapes\n\nimport org.jbox2d.collision.AABB\nimport org.jbox2d.collision.RayCastInput\nimport org.jbox2d.collision.RayCastOutput\nimport org.jbox2d.common.MathUtils\nimport org.jbox2d.common.Settings\nimport org.jbox2d.common.Transform\nimport org.jbox2d.common.Vec2\n\n/**\n * A line segment (edge) shape. These can be connected in chains or loops to other edge shapes. The\n * connectivity information is used to ensure correct contact normals.\n *\n * @author Daniel\n */\nclass EdgeShape() : Shape(ShapeType.EDGE) {\n\n    /**\n     * edge vertex 1\n     */\n\n    val vertex1 = Vec2()\n    /**\n     * edge vertex 2\n     */\n\n    val vertex2 = Vec2()\n\n    /**\n     * optional adjacent vertex 1. Used for smooth collision\n     */\n\n    val vertex0 = Vec2()\n    /**\n     * optional adjacent vertex 2. Used for smooth collision\n     */\n\n    val vertex3 = Vec2()\n\n    var hasVertex0 = false\n\n    var hasVertex3 = false\n\n    // for pooling\n    private val normal = Vec2()\n\n    constructor(x1: Number, y1: Number, x2: Number, y2: Number) : this() {\n        set(Vec2(x1.toFloat(), y1.toFloat()), Vec2(x2.toFloat(), y2.toFloat()))\n    }\n\n    init {\n        radius = Settings.polygonRadius\n    }\n\n    override fun getChildCount(): Int {\n        return 1\n    }\n\n    fun set(v1: Vec2, v2: Vec2) {\n        vertex1.set(v1)\n        vertex2.set(v2)\n        hasVertex3 = false\n        hasVertex0 = hasVertex3\n    }\n\n    override fun testPoint(xf: Transform, p: Vec2): Boolean {\n        return false\n    }\n\n    override fun computeDistanceToOut(xf: Transform, p: Vec2, childIndex: Int, normalOut: Vec2): Float {\n        val xfqc = xf.q.c\n        val xfqs = xf.q.s\n        val xfpx = xf.p.x\n        val xfpy = xf.p.y\n        val v1x = xfqc * vertex1.x - xfqs * vertex1.y + xfpx\n        val v1y = xfqs * vertex1.x + xfqc * vertex1.y + xfpy\n        val v2x = xfqc * vertex2.x - xfqs * vertex2.y + xfpx\n        val v2y = xfqs * vertex2.x + xfqc * vertex2.y + xfpy\n\n        var dx = p.x - v1x\n        var dy = p.y - v1y\n        val sx = v2x - v1x\n        val sy = v2y - v1y\n        val ds = dx * sx + dy * sy\n        if (ds > 0) {\n            val s2 = sx * sx + sy * sy\n            if (ds > s2) {\n                dx = p.x - v2x\n                dy = p.y - v2y\n            } else {\n                dx -= ds / s2 * sx\n                dy -= ds / s2 * sy\n            }\n        }\n\n        val d1 = MathUtils.sqrt(dx * dx + dy * dy)\n        if (d1 > 0) {\n            normalOut.x = 1 / d1 * dx\n            normalOut.y = 1 / d1 * dy\n        } else {\n            normalOut.x = 0f\n            normalOut.y = 0f\n        }\n        return d1\n    }\n\n    // p = p1 + t * d\n    // v = v1 + s * e\n    // p1 + t * d = v1 + s * e\n    // s * e - t * d = p1 - v1\n    override fun raycast(output: RayCastOutput, input: RayCastInput, xf: Transform, childIndex: Int): Boolean {\n\n        var tempx: Float\n        var tempy: Float\n        val v1 = vertex1\n        val v2 = vertex2\n        val xfq = xf.q\n        val xfp = xf.p\n\n        // Put the ray into the edge's frame of reference.\n        // b2Vec2 p1 = b2MulT(xf.q, input.p1 - xf.p);\n        // b2Vec2 p2 = b2MulT(xf.q, input.p2 - xf.p);\n        tempx = input.p1.x - xfp.x\n        tempy = input.p1.y - xfp.y\n        val p1x = xfq.c * tempx + xfq.s * tempy\n        val p1y = -xfq.s * tempx + xfq.c * tempy\n\n        tempx = input.p2.x - xfp.x\n        tempy = input.p2.y - xfp.y\n        val p2x = xfq.c * tempx + xfq.s * tempy\n        val p2y = -xfq.s * tempx + xfq.c * tempy\n\n        val dx = p2x - p1x\n        val dy = p2y - p1y\n\n        // final Vec2 normal = pool2.set(v2).subLocal(v1);\n        // normal.set(normal.y, -normal.x);\n        normal.x = v2.y - v1.y\n        normal.y = v1.x - v2.x\n        normal.normalize()\n        val normalx = normal.x\n        val normaly = normal.y\n\n        // q = p1 + t * d\n        // dot(normal, q - v1) = 0\n        // dot(normal, p1 - v1) + t * dot(normal, d) = 0\n        tempx = v1.x - p1x\n        tempy = v1.y - p1y\n        val numerator = normalx * tempx + normaly * tempy\n        val denominator = normalx * dx + normaly * dy\n\n        if (denominator == 0.0f) {\n            return false\n        }\n\n        val t = numerator / denominator\n        if (t < 0.0f || 1.0f < t) {\n            return false\n        }\n\n        // Vec2 q = p1 + t * d;\n        val qx = p1x + t * dx\n        val qy = p1y + t * dy\n\n        // q = v1 + s * r\n        // s = dot(q - v1, r) / dot(r, r)\n        // Vec2 r = v2 - v1;\n        val rx = v2.x - v1.x\n        val ry = v2.y - v1.y\n        val rr = rx * rx + ry * ry\n        if (rr == 0.0f) {\n            return false\n        }\n        tempx = qx - v1.x\n        tempy = qy - v1.y\n        // float s = Vec2.dot(pool5, r) / rr;\n        val s = (tempx * rx + tempy * ry) / rr\n        if (s < 0.0f || 1.0f < s) {\n            return false\n        }\n\n        output.fraction = t\n        if (numerator > 0.0f) {\n            // output.normal = -b2Mul(xf.q, normal);\n            output.normal.x = -xfq.c * normal.x + xfq.s * normal.y\n            output.normal.y = -xfq.s * normal.x - xfq.c * normal.y\n        } else {\n            // output->normal = b2Mul(xf.q, normal);\n            output.normal.x = xfq.c * normal.x - xfq.s * normal.y\n            output.normal.y = xfq.s * normal.x + xfq.c * normal.y\n        }\n        return true\n    }\n\n    override fun computeAABB(aabb: AABB, xf: Transform, childIndex: Int) {\n        val lowerBound = aabb.lowerBound\n        val upperBound = aabb.upperBound\n        val xfq = xf.q\n\n        val v1x = xfq.c * vertex1.x - xfq.s * vertex1.y + xf.p.x\n        val v1y = xfq.s * vertex1.x + xfq.c * vertex1.y + xf.p.y\n        val v2x = xfq.c * vertex2.x - xfq.s * vertex2.y + xf.p.x\n        val v2y = xfq.s * vertex2.x + xfq.c * vertex2.y + xf.p.y\n\n        lowerBound.x = if (v1x < v2x) v1x else v2x\n        lowerBound.y = if (v1y < v2y) v1y else v2y\n        upperBound.x = if (v1x > v2x) v1x else v2x\n        upperBound.y = if (v1y > v2y) v1y else v2y\n\n        lowerBound.x -= radius\n        lowerBound.y -= radius\n        upperBound.x += radius\n        upperBound.y += radius\n    }\n\n    override fun computeMass(massData: MassData, density: Float) {\n        massData.mass = 0.0f\n        massData.center.set(vertex1).addLocal(vertex2).mulLocal(0.5f)\n        massData.I = 0.0f\n    }\n\n    override fun clone(): Shape {\n        val edge = EdgeShape()\n        edge.radius = this.radius\n        edge.hasVertex0 = this.hasVertex0\n        edge.hasVertex3 = this.hasVertex3\n        edge.vertex0.set(this.vertex0)\n        edge.vertex1.set(this.vertex1)\n        edge.vertex2.set(this.vertex2)\n        edge.vertex3.set(this.vertex3)\n        return edge\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n/*\n * JBox2D - A Java Port of Erin Catto's Box2D\n *\n * JBox2D homepage: http://jbox2d.sourceforge.net/\n * Box2D homepage: http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n *\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n *\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\npackage org.jbox2d.collision.shapes\n\nimport org.jbox2d.common.Vec2\n\n// Updated to rev 100\n\n/** This holds the mass data computed for a shape.  */\nclass MassData {\n    /** The mass of the shape, usually in kilograms.  */\n    var mass: Float = 0.toFloat()\n    /** The position of the shape's centroid relative to the shape's origin.  */\n\n    val center: Vec2\n    /** The rotational inertia of the shape about the local origin.  */\n\n    var I: Float = 0.toFloat()\n\n    /**\n     * Blank mass data\n     */\n    constructor() {\n        I = 0f\n        mass = I\n        center = Vec2()\n    }\n\n    /**\n     * Copies from the given mass data\n     *\n     * @param md\n     * mass data to copy from\n     */\n    constructor(md: MassData) {\n        mass = md.mass\n        I = md.I\n        center = md.center.clone()\n    }\n\n    fun set(md: MassData) {\n        mass = md.mass\n        I = md.I\n        center.set(md.center)\n    }\n\n    /** Return a copy of this object.  */\n    fun clone(): MassData {\n        return MassData(this)\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.collision.shapes\n\nimport com.soywiz.korma.geom.Angle\nimport org.jbox2d.collision.AABB\nimport org.jbox2d.collision.RayCastInput\nimport org.jbox2d.collision.RayCastOutput\nimport org.jbox2d.common.MathUtils\nimport org.jbox2d.common.Rot\nimport org.jbox2d.common.Settings\nimport org.jbox2d.common.Transform\nimport org.jbox2d.common.Vec2\nimport org.jbox2d.internal.assert\nimport org.jbox2d.pooling.arrays.IntArrayPool\nimport org.jbox2d.pooling.arrays.Vec2ArrayPool\n\n/**\n * A convex polygon shape. Polygons have a maximum number of vertices equal to _maxPolygonVertices.\n * In most cases you should not need many vertices for a convex polygon.\n */\nclass PolygonShape : Shape(ShapeType.POLYGON) {\n\n    /**\n     * Local position of the shape centroid in parent body frame.\n     */\n\n    val centroid = Vec2()\n\n    /**\n     * The vertices of the shape. Note: use getVertexCount(), not m_vertices.length, to get number of\n     * active vertices.\n     */\n    /** Get the vertices in local coordinates.  */\n\n    val vertices: Array<Vec2> = Array(Settings.maxPolygonVertices) { Vec2() }\n\n    /**\n     * The normals of the shape. Note: use getVertexCount(), not m_normals.length, to get number of\n     * active normals.\n     */\n    /** Get the edge normal vectors. There is one for each vertex.  */\n\n    val normals: Array<Vec2> = Array(Settings.maxPolygonVertices) { Vec2() }\n\n    /**\n     * Number of active vertices in the shape.\n     */\n    /**\n     * Get the vertex count.\n     *\n     * @return\n     */\n\n    var count: Int = 0\n\n    // pooling\n    private val pool1 = Vec2()\n    private val pool2 = Vec2()\n    private val pool3 = Vec2()\n    private val pool4 = Vec2()\n    private val poolt1 = Transform()\n\n    init {\n        radius = Settings.polygonRadius\n        centroid.setZero()\n    }\n\n    override fun clone(): Shape {\n        val shape = PolygonShape()\n        shape.centroid.set(this.centroid)\n        for (i in shape.normals.indices) {\n            shape.normals[i].set(normals[i])\n            shape.vertices[i].set(vertices[i])\n        }\n        shape.radius = this.radius\n        shape.count = this.count\n        return shape\n    }\n\n    /**\n     * Create a convex hull from the given array of points. The count must be in the range [3,\n     * Settings.maxPolygonVertices].\n     *\n     * @warning the points may be re-ordered, even if they form a convex polygon.\n     * @warning collinear points are removed.\n     */\n    fun set(vertices: Array<Vec2>, count: Int) {\n        set(vertices, count, null, null)\n    }\n\n    /**\n     * Create a convex hull from the given array of points. The count must be in the range [3,\n     * Settings.maxPolygonVertices]. This method takes an arraypool for pooling.\n     *\n     * @warning the points may be re-ordered, even if they form a convex polygon.\n     * @warning collinear points are removed.\n     */\n    fun set(verts: Array<Vec2>, num: Int, vecPool: Vec2ArrayPool?,\n                     intPool: IntArrayPool?) {\n        assert(3 <= num && num <= Settings.maxPolygonVertices)\n        if (num < 3) {\n            setAsBox(1.0f, 1.0f)\n            return\n        }\n\n        var n = MathUtils.min(num, Settings.maxPolygonVertices)\n\n        // Perform welding and copy vertices into local buffer.\n        val ps : Array<Vec2?>\n        if (vecPool != null)\n            ps = vecPool[Settings.maxPolygonVertices] as Array<Vec2?>\n        else\n            ps = arrayOfNulls<Vec2>(Settings.maxPolygonVertices)\n        var tempCount = 0\n        for (i in 0 until n) {\n            val v = verts[i]\n            var unique = true\n            for (j in 0 until tempCount) {\n                if (MathUtils.distanceSquared(v, ps[j]!!) < 0.5f * Settings.linearSlop) {\n                    unique = false\n                    break\n                }\n            }\n\n            if (unique) {\n                ps[tempCount++] = v\n            }\n        }\n\n        n = tempCount\n        if (n < 3) {\n            // Polygon is degenerate.\n            assert(false)\n            setAsBox(1.0f, 1.0f)\n            return\n        }\n\n        // Create the convex hull using the Gift wrapping algorithm\n        // http://en.wikipedia.org/wiki/Gift_wrapping_algorithm\n\n        // Find the right most point on the hull\n        var i0 = 0\n        var x0 = ps[0]!!.x\n        for (i in 1 until n) {\n            val x = ps[i]!!.x\n            if (x > x0 || x == x0 && ps[i]!!.y < ps[i0]!!.y) {\n                i0 = i\n                x0 = x\n            }\n        }\n\n        val hull = if (intPool != null)\n            intPool[Settings.maxPolygonVertices]\n        else\n            IntArray(Settings.maxPolygonVertices)\n        var m = 0\n        var ih = i0\n\n        while (true) {\n            hull[m] = ih\n\n            var ie = 0\n            for (j in 1 until n) {\n                if (ie == ih) {\n                    ie = j\n                    continue\n                }\n\n                val r = pool1.set(ps[ie]!!).subLocal(ps[hull[m]]!!)\n                val v = pool2.set(ps[j]!!).subLocal(ps[hull[m]]!!)\n                val c = Vec2.cross(r, v)\n                if (c < 0.0f) {\n                    ie = j\n                }\n\n                // Collinearity check\n                if (c == 0.0f && v.lengthSquared() > r.lengthSquared()) {\n                    ie = j\n                }\n            }\n\n            ++m\n            ih = ie\n\n            if (ie == i0) {\n                break\n            }\n        }\n\n        this.count = m\n\n        // Copy vertices.\n        for (i in 0 until count) {\n            vertices[i].set(ps[hull[i]]!!)\n        }\n\n        val edge = pool1\n\n        // Compute normals. Ensure the edges have non-zero length.\n        for (i in 0 until count) {\n            val i1 = i\n            val i2 = if (i + 1 < count) i + 1 else 0\n            edge.set(vertices[i2]).subLocal(vertices[i1])\n\n            assert(edge.lengthSquared() > Settings.EPSILON * Settings.EPSILON)\n            Vec2.crossToOutUnsafe(edge, 1f, normals[i])\n            normals[i].normalize()\n        }\n\n        // Compute the polygon centroid.\n        computeCentroidToOut(vertices, count, centroid)\n    }\n\n    /**\n     * Build vertices to represent an axis-aligned box.\n     *\n     * @param hx the half-width.\n     * @param hy the half-height.\n     */\n    fun setAsBox(hx: Float, hy: Float) {\n        count = 4\n        vertices[0].set(-hx, -hy)\n        vertices[1].set(hx, -hy)\n        vertices[2].set(hx, hy)\n        vertices[3].set(-hx, hy)\n        normals[0].set(0.0f, -1.0f)\n        normals[1].set(1.0f, 0.0f)\n        normals[2].set(0.0f, 1.0f)\n        normals[3].set(-1.0f, 0.0f)\n        centroid.setZero()\n    }\n\n    /**\n     * Build vertices to represent an oriented box.\n     *\n     * @param hx the half-width.\n     * @param hy the half-height.\n     * @param center the center of the box in local coordinates.\n     * @param angleRadians the rotation of the box in local coordinates.\n     */\n    fun setAsBoxRadians(hx: Float, hy: Float, center: Vec2, angleRadians: Float) {\n        count = 4\n        vertices[0].set(-hx, -hy)\n        vertices[1].set(hx, -hy)\n        vertices[2].set(hx, hy)\n        vertices[3].set(-hx, hy)\n        normals[0].set(0.0f, -1.0f)\n        normals[1].set(1.0f, 0.0f)\n        normals[2].set(0.0f, 1.0f)\n        normals[3].set(-1.0f, 0.0f)\n        centroid.set(center)\n\n        val xf = poolt1\n        xf.p.set(center)\n        xf.q.setRadians(angleRadians)\n\n        // Transform vertices and normals.\n        for (i in 0 until count) {\n            Transform.mulToOut(xf, vertices[i], vertices[i])\n            Rot.mulToOut(xf.q, normals[i], normals[i])\n        }\n    }\n\n    fun setAsBoxDegrees(hx: Float, hy: Float, center: Vec2, angleDegrees: Float) = setAsBoxRadians(hx, hy, center, angleDegrees * MathUtils.DEG2RAD)\n\n    fun setAsBox(hx: Float, hy: Float, center: Vec2, angle: Angle) = setAsBoxRadians(hx, hy, center, angle.radians.toFloat())\n\n    override fun getChildCount(): Int {\n        return 1\n    }\n\n    override fun testPoint(xf: Transform, p: Vec2): Boolean {\n        var tempx: Float\n        var tempy: Float\n        val xfq = xf.q\n\n        tempx = p.x - xf.p.x\n        tempy = p.y - xf.p.y\n        val pLocalx = xfq.c * tempx + xfq.s * tempy\n        val pLocaly = -xfq.s * tempx + xfq.c * tempy\n\n        if (m_debug) {\n            println(\"--testPoint debug--\")\n            println(\"Vertices: \")\n            for (i in 0 until count) {\n                println(vertices[i])\n            }\n            println(\"pLocal: $pLocalx, $pLocaly\")\n        }\n\n        for (i in 0 until count) {\n            val vertex = vertices[i]\n            val normal = normals[i]\n            tempx = pLocalx - vertex.x\n            tempy = pLocaly - vertex.y\n            val dot = normal.x * tempx + normal.y * tempy\n            if (dot > 0.0f) {\n                return false\n            }\n        }\n\n        return true\n    }\n\n    override fun computeAABB(aabb: AABB, xf: Transform, childIndex: Int) {\n        val lower = aabb.lowerBound\n        val upper = aabb.upperBound\n        val v1 = vertices[0]\n        val xfqc = xf.q.c\n        val xfqs = xf.q.s\n        val xfpx = xf.p.x\n        val xfpy = xf.p.y\n        lower.x = xfqc * v1.x - xfqs * v1.y + xfpx\n        lower.y = xfqs * v1.x + xfqc * v1.y + xfpy\n        upper.x = lower.x\n        upper.y = lower.y\n\n        for (i in 1 until count) {\n            val v2 = vertices[i]\n            // Vec2 v = Mul(xf, m_vertices[i]);\n            val vx = xfqc * v2.x - xfqs * v2.y + xfpx\n            val vy = xfqs * v2.x + xfqc * v2.y + xfpy\n            lower.x = if (lower.x < vx) lower.x else vx\n            lower.y = if (lower.y < vy) lower.y else vy\n            upper.x = if (upper.x > vx) upper.x else vx\n            upper.y = if (upper.y > vy) upper.y else vy\n        }\n\n        lower.x -= radius\n        lower.y -= radius\n        upper.x += radius\n        upper.y += radius\n    }\n\n    /**\n     * Get a vertex by index.\n     *\n     * @param index\n     * @return\n     */\n    fun getVertex(index: Int): Vec2 {\n        assert(0 <= index && index < count)\n        return vertices[index]\n    }\n\n    override fun computeDistanceToOut(xf: Transform, p: Vec2, childIndex: Int, normalOut: Vec2): Float {\n        val xfqc = xf.q.c\n        val xfqs = xf.q.s\n        var tx = p.x - xf.p.x\n        var ty = p.y - xf.p.y\n        val pLocalx = xfqc * tx + xfqs * ty\n        val pLocaly = -xfqs * tx + xfqc * ty\n\n        var maxDistance = -Float.MAX_VALUE\n        var normalForMaxDistanceX = pLocalx\n        var normalForMaxDistanceY = pLocaly\n\n        for (i in 0 until count) {\n            val vertex = vertices[i]\n            val normal = normals[i]\n            tx = pLocalx - vertex.x\n            ty = pLocaly - vertex.y\n            val dot = normal.x * tx + normal.y * ty\n            if (dot > maxDistance) {\n                maxDistance = dot\n                normalForMaxDistanceX = normal.x\n                normalForMaxDistanceY = normal.y\n            }\n        }\n\n        val distance: Float\n        if (maxDistance > 0) {\n            var minDistanceX = normalForMaxDistanceX\n            var minDistanceY = normalForMaxDistanceY\n            var minDistance2 = maxDistance * maxDistance\n            for (i in 0 until count) {\n                val vertex = vertices[i]\n                val distanceVecX = pLocalx - vertex.x\n                val distanceVecY = pLocaly - vertex.y\n                val distance2 = distanceVecX * distanceVecX + distanceVecY * distanceVecY\n                if (minDistance2 > distance2) {\n                    minDistanceX = distanceVecX\n                    minDistanceY = distanceVecY\n                    minDistance2 = distance2\n                }\n            }\n            distance = MathUtils.sqrt(minDistance2)\n            normalOut.x = xfqc * minDistanceX - xfqs * minDistanceY\n            normalOut.y = xfqs * minDistanceX + xfqc * minDistanceY\n            normalOut.normalize()\n        } else {\n            distance = maxDistance\n            normalOut.x = xfqc * normalForMaxDistanceX - xfqs * normalForMaxDistanceY\n            normalOut.y = xfqs * normalForMaxDistanceX + xfqc * normalForMaxDistanceY\n        }\n\n        return distance\n    }\n\n    override fun raycast(output: RayCastOutput, input: RayCastInput, xf: Transform,\n                         childIndex: Int): Boolean {\n        val xfqc = xf.q.c\n        val xfqs = xf.q.s\n        val xfp = xf.p\n        var tempx: Float\n        var tempy: Float\n        // b2Vec2 p1 = b2MulT(xf.q, input.p1 - xf.p);\n        // b2Vec2 p2 = b2MulT(xf.q, input.p2 - xf.p);\n        tempx = input.p1.x - xfp.x\n        tempy = input.p1.y - xfp.y\n        val p1x = xfqc * tempx + xfqs * tempy\n        val p1y = -xfqs * tempx + xfqc * tempy\n\n        tempx = input.p2.x - xfp.x\n        tempy = input.p2.y - xfp.y\n        val p2x = xfqc * tempx + xfqs * tempy\n        val p2y = -xfqs * tempx + xfqc * tempy\n\n        val dx = p2x - p1x\n        val dy = p2y - p1y\n\n        var lower = 0f\n        var upper = input.maxFraction\n\n        var index = -1\n\n        for (i in 0 until count) {\n            val normal = normals[i]\n            val vertex = vertices[i]\n            // p = p1 + a * d\n            // dot(normal, p - v) = 0\n            // dot(normal, p1 - v) + a * dot(normal, d) = 0\n            val tempxn = vertex.x - p1x\n            val tempyn = vertex.y - p1y\n            val numerator = normal.x * tempxn + normal.y * tempyn\n            val denominator = normal.x * dx + normal.y * dy\n\n            if (denominator == 0.0f) {\n                if (numerator < 0.0f) {\n                    return false\n                }\n            } else {\n                // Note: we want this predicate without division:\n                // lower < numerator / denominator, where denominator < 0\n                // Since denominator < 0, we have to flip the inequality:\n                // lower < numerator / denominator <==> denominator * lower >\n                // numerator.\n                if (denominator < 0.0f && numerator < lower * denominator) {\n                    // Increase lower.\n                    // The segment enters this half-space.\n                    lower = numerator / denominator\n                    index = i\n                } else if (denominator > 0.0f && numerator < upper * denominator) {\n                    // Decrease upper.\n                    // The segment exits this half-space.\n                    upper = numerator / denominator\n                }\n            }\n\n            if (upper < lower) {\n                return false\n            }\n        }\n\n        assert(0.0f <= lower && lower <= input.maxFraction)\n\n        if (index >= 0) {\n            output.fraction = lower\n            // normal = Mul(xf.R, m_normals[index]);\n            val normal = normals[index]\n            val out = output.normal\n            out.x = xfqc * normal.x - xfqs * normal.y\n            out.y = xfqs * normal.x + xfqc * normal.y\n            return true\n        }\n        return false\n    }\n\n    fun computeCentroidToOut(vs: Array<Vec2>, count: Int, out: Vec2) {\n        assert(count >= 3)\n\n        out.set(0.0f, 0.0f)\n        var area = 0.0f\n\n        // pRef is the reference point for forming triangles.\n        // It's location doesn't change the result (except for rounding error).\n        val pRef = pool1\n        pRef.setZero()\n\n        val e1 = pool2\n        val e2 = pool3\n\n        val inv3 = 1.0f / 3.0f\n\n        for (i in 0 until count) {\n            // Triangle vertices.\n            val p1 = pRef\n            val p2 = vs[i]\n            val p3 = if (i + 1 < count) vs[i + 1] else vs[0]\n\n            e1.set(p2).subLocal(p1)\n            e2.set(p3).subLocal(p1)\n\n            val D = Vec2.cross(e1, e2)\n\n            val triangleArea = 0.5f * D\n            area += triangleArea\n\n            // Area weighted centroid\n            e1.set(p1).addLocal(p2).addLocal(p3).mulLocal(triangleArea * inv3)\n            out.addLocal(e1)\n        }\n\n        // Centroid\n        assert(area > Settings.EPSILON)\n        out.mulLocal(1.0f / area)\n    }\n\n    override fun computeMass(massData: MassData, density: Float) {\n        // Polygon mass, centroid, and inertia.\n        // Let rho be the polygon density in mass per unit area.\n        // Then:\n        // mass = rho * int(dA)\n        // centroid.x = (1/mass) * rho * int(x * dA)\n        // centroid.y = (1/mass) * rho * int(y * dA)\n        // I = rho * int((x*x + y*y) * dA)\n        //\n        // We can compute these integrals by summing all the integrals\n        // for each triangle of the polygon. To evaluate the integral\n        // for a single triangle, we make a change of variables to\n        // the (u,v) coordinates of the triangle:\n        // x = x0 + e1x * u + e2x * v\n        // y = y0 + e1y * u + e2y * v\n        // where 0 <= u && 0 <= v && u + v <= 1.\n        //\n        // We integrate u from [0,1-v] and then v from [0,1].\n        // We also need to use the Jacobian of the transformation:\n        // D = cross(e1, e2)\n        //\n        // Simplification: triangle centroid = (1/3) * (p1 + p2 + p3)\n        //\n        // The rest of the derivation is handled by computer algebra.\n\n        assert(count >= 3)\n\n        val center = pool1\n        center.setZero()\n        var area = 0.0f\n        var I = 0.0f\n\n        // pRef is the reference point for forming triangles.\n        // It's location doesn't change the result (except for rounding error).\n        val s = pool2\n        s.setZero()\n        // This code would put the reference point inside the polygon.\n        for (i in 0 until count) {\n            s.addLocal(vertices[i])\n        }\n        s.mulLocal(1.0f / count)\n\n        val k_inv3 = 1.0f / 3.0f\n\n        val e1 = pool3\n        val e2 = pool4\n\n        for (i in 0 until count) {\n            // Triangle vertices.\n            e1.set(vertices[i]).subLocal(s)\n            e2.set(s).negateLocal().addLocal(if (i + 1 < count) vertices[i + 1] else vertices[0])\n\n            val D = Vec2.cross(e1, e2)\n\n            val triangleArea = 0.5f * D\n            area += triangleArea\n\n            // Area weighted centroid\n            center.x += triangleArea * k_inv3 * (e1.x + e2.x)\n            center.y += triangleArea * k_inv3 * (e1.y + e2.y)\n\n            val ex1 = e1.x\n            val ey1 = e1.y\n            val ex2 = e2.x\n            val ey2 = e2.y\n\n            val intx2 = ex1 * ex1 + ex2 * ex1 + ex2 * ex2\n            val inty2 = ey1 * ey1 + ey2 * ey1 + ey2 * ey2\n\n            I += 0.25f * k_inv3 * D * (intx2 + inty2)\n        }\n\n        // Total mass\n        massData.mass = density * area\n\n        // Center of mass\n        assert(area > Settings.EPSILON)\n        center.mulLocal(1.0f / area)\n        massData.center.set(center).addLocal(s)\n\n        // Inertia tensor relative to the local origin (point s)\n        massData.I = I * density\n\n        // Shift to center of mass then to original body origin.\n        massData.I += massData.mass * Vec2.dot(massData.center, massData.center)\n    }\n\n    /**\n     * Validate convexity. This is a very time consuming operation.\n     *\n     * @return\n     */\n    fun validate(): Boolean {\n        for (i in 0 until count) {\n            val i1 = i\n            val i2 = if (i < count - 1) i1 + 1 else 0\n            val p = vertices[i1]\n            val e = pool1.set(vertices[i2]).subLocal(p)\n\n            for (j in 0 until count) {\n                if (j == i1 || j == i2) {\n                    continue\n                }\n\n                val v = pool2.set(vertices[j]).subLocal(p)\n                val c = Vec2.cross(e, v)\n                if (c < 0.0f) {\n                    return false\n                }\n            }\n        }\n\n        return true\n    }\n\n    /** Get the centroid and apply the supplied transform.  */\n    fun centroid(xf: Transform): Vec2 {\n        return Transform.mul(xf, centroid)\n    }\n\n    /** Get the centroid and apply the supplied transform.  */\n    fun centroidToOut(xf: Transform, out: Vec2): Vec2 {\n        Transform.mulToOutUnsafe(xf, centroid, out)\n        return out\n    }\n\n    companion object {\n        /** Dump lots of debug information.  */\n        private val m_debug = false\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.collision.shapes\n\nimport org.jbox2d.collision.AABB\nimport org.jbox2d.collision.RayCastInput\nimport org.jbox2d.collision.RayCastOutput\nimport org.jbox2d.common.Transform\nimport org.jbox2d.common.Vec2\n\n/**\n * A shape is used for collision detection. You can create a shape however you like. Shapes used for\n * simulation in World are created automatically when a Fixture is created. Shapes may encapsulate a\n * one or more child shapes.\n */\nabstract class Shape(private val m_type: ShapeType) {\n    /**\n     * The radius of the underlying shape. This can refer to different things depending on the shape\n     * implementation\n     *\n     * @return\n     */\n    var radius: Float = 0f\n\n    /**\n     * Get the type of this shape. You can use this to down cast to the concrete shape.\n     *\n     * @return the shape type.\n     */\n    fun getType(): ShapeType = m_type\n\n    /**\n     * Get the number of child primitives\n     *\n     * @return\n     */\n    abstract fun getChildCount(): Int\n\n    /**\n     * Test a point for containment in this shape. This only works for convex shapes.\n     *\n     * @param xf the shape world transform.\n     * @param p a point in world coordinates.\n     */\n    abstract fun testPoint(xf: Transform, p: Vec2): Boolean\n\n    /**\n     * Cast a ray against a child shape.\n     *\n     * @param argOutput the ray-cast results.\n     * @param argInput the ray-cast input parameters.\n     * @param argTransform the transform to be applied to the shape.\n     * @param argChildIndex the child shape index\n     * @return if hit\n     */\n    abstract fun raycast(output: RayCastOutput, input: RayCastInput, transform: Transform,\n                         childIndex: Int): Boolean\n\n\n    /**\n     * Given a transform, compute the associated axis aligned bounding box for a child shape.\n     *\n     * @param argAabb returns the axis aligned box.\n     * @param argXf the world transform of the shape.\n     */\n    abstract fun computeAABB(aabb: AABB, xf: Transform, childIndex: Int)\n\n    /**\n     * Compute the mass properties of this shape using its dimensions and density. The inertia tensor\n     * is computed about the local origin.\n     *\n     * @param massData returns the mass data for this shape.\n     * @param density the density in kilograms per meter squared.\n     */\n    abstract fun computeMass(massData: MassData, density: Float)\n\n    /**\n     * Compute the distance from the current shape to the specified point. This only works for convex\n     * shapes.\n     *\n     * @param xf the shape world transform.\n     * @param p a point in world coordinates.\n     * @param normalOut returns the direction in which the distance increases.\n     * @return distance returns the distance from the current shape.\n     */\n    abstract fun computeDistanceToOut(xf: Transform, p: Vec2, childIndex: Int, normalOut: Vec2): Float\n\n    abstract fun clone(): Shape\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n/*\n * JBox2D - A Java Port of Erin Catto's Box2D\n *\n * JBox2D homepage: http://jbox2d.sourceforge.net/\n * Box2D homepage: http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n *\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n *\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\npackage org.jbox2d.common\n\n// updated to rev 100\n/**\n * Similar to javax.vecmath.Color3f holder\n * @author ewjordan\n */\nclass Color3f {\n\n\n    var x: Float = 0.toFloat()\n\n    var y: Float = 0.toFloat()\n\n    var z: Float = 0.toFloat()\n\n\n    constructor() {\n        z = 0f\n        y = z\n        x = y\n    }\n\n    constructor(r: Float, g: Float, b: Float) {\n        x = r\n        y = g\n        z = b\n    }\n\n    fun set(r: Float, g: Float, b: Float) {\n        x = r\n        y = g\n        z = b\n    }\n\n    fun set(argColor: Color3f) {\n        x = argColor.x\n        y = argColor.y\n        z = argColor.z\n    }\n\n\t// @TODO: Do not mutate those\n    companion object {\n\n        //@ThreadLocal\n        val WHITE = Color3f(1f, 1f, 1f)\n\n        //@ThreadLocal\n        val BLACK = Color3f(0f, 0f, 0f)\n\n        //@ThreadLocal\n        val BLUE = Color3f(0f, 0f, 1f)\n\n        //@ThreadLocal\n        val GREEN = Color3f(0f, 1f, 0f)\n\n        //@ThreadLocal\n        val RED = Color3f(1f, 0f, 0f)\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.common\n\nimport com.soywiz.korma.geom.Angle\nimport com.soywiz.korma.geom.radians\nimport org.jbox2d.internal.assert\n\n/**\n * A 2-by-2 matrix. Stored in column-major order.\n */\nclass Mat22 {\n\n\n    val ex: Vec2\n\n    val ey: Vec2\n\n    /**\n     * Extract the angle in radians from this matrix (assumed to be a rotation matrix).\n     *\n     * @return\n     */\n    val angleRadians: Float get() = MathUtils.atan2(ex.y, ex.x)\n\n    /**\n     * Extract the angle in degrees from this matrix (assumed to be a rotation matrix).\n     *\n     * @return\n     */\n    val angleDegrees: Float get() = angleRadians * MathUtils.RAD2DEG\n\n    /**\n     * Extract the angle from this matrix (assumed to be a rotation matrix).\n     *\n     * @return\n     */\n    val angle: Angle get() = angleRadians.radians\n\n    /** Convert the matrix to printable format.  */\n    override fun toString(): String {\n        var s = \"\"\n        s += \"[\" + ex.x + \",\" + ey.x + \"]\\n\"\n        s += \"[\" + ex.y + \",\" + ey.y + \"]\"\n        return s\n    }\n\n    /**\n     * Construct zero matrix. Note: this is NOT an identity matrix! djm fixed double allocation\n     * problem\n     */\n    constructor() {\n        ex = Vec2()\n        ey = Vec2()\n    }\n\n    /**\n     * Create a matrix with given vectors as columns.\n     *\n     * @param c1 Column 1 of matrix\n     * @param c2 Column 2 of matrix\n     */\n    constructor(c1: Vec2, c2: Vec2) {\n        ex = c1.clone()\n        ey = c2.clone()\n    }\n\n    /**\n     * Create a matrix from four floats.\n     *\n     * @param exx\n     * @param col2x\n     * @param exy\n     * @param col2y\n     */\n    constructor(exx: Float, col2x: Float, exy: Float, col2y: Float) {\n        ex = Vec2(exx, exy)\n        ey = Vec2(col2x, col2y)\n    }\n\n    /**\n     * Set as a copy of another matrix.\n     *\n     * @param m Matrix to copy\n     */\n    fun set(m: Mat22): Mat22 {\n        ex.x = m.ex.x\n        ex.y = m.ex.y\n        ey.x = m.ey.x\n        ey.y = m.ey.y\n        return this\n    }\n\n    fun set(exx: Float, col2x: Float, exy: Float, col2y: Float): Mat22 {\n        ex.x = exx\n        ex.y = exy\n        ey.x = col2x\n        ey.y = col2y\n        return this\n    }\n\n    /**\n     * Return a clone of this matrix. djm fixed double allocation\n     */\n    // @Override // annotation omitted for GWT-compatibility\n    fun clone(): Mat22 {\n        return Mat22(ex!!, ey!!)\n    }\n\n    /**\n     * Set as a matrix representing a rotation.\n     *\n     * @param angleRadians Rotation (in radians) that matrix represents.\n     */\n    fun setRadians(angleRadians: Float) {\n        val c = MathUtils.cos(angleRadians)\n        val s = MathUtils.sin(angleRadians)\n        ex.x = c\n        ey.x = -s\n        ex.y = s\n        ey.y = c\n    }\n\n    fun setDegrees(angleDegrees: Float) = setRadians(angleDegrees * MathUtils.DEG2RAD)\n\n    fun set(angle: Angle) = setRadians(angle.radians.toFloat())\n\n    /**\n     * Set as the identity matrix.\n     */\n    fun setIdentity() {\n        ex.x = 1.0f\n        ey.x = 0.0f\n        ex.y = 0.0f\n        ey.y = 1.0f\n    }\n\n    /**\n     * Set as the zero matrix.\n     */\n    fun setZero() {\n        ex.x = 0.0f\n        ey.x = 0.0f\n        ex.y = 0.0f\n        ey.y = 0.0f\n    }\n\n    /**\n     * Set by column vectors.\n     *\n     * @param c1 Column 1\n     * @param c2 Column 2\n     */\n    fun set(c1: Vec2, c2: Vec2) {\n        ex.x = c1.x\n        ey.x = c2.x\n        ex.y = c1.y\n        ey.y = c2.y\n    }\n\n    /** Returns the inverted Mat22 - does NOT invert the matrix locally!  */\n    fun invert(): Mat22 {\n        val a = ex.x\n        val b = ey.x\n        val c = ex.y\n        val d = ey.y\n        val B = Mat22()\n        var det = a * d - b * c\n        if (det != 0f) {\n            det = 1.0f / det\n        }\n        B.ex.x = det * d\n        B.ey.x = -det * b\n        B.ex.y = -det * c\n        B.ey.y = det * a\n        return B\n    }\n\n    fun invertLocal(): Mat22 {\n        val a = ex.x\n        val b = ey.x\n        val c = ex.y\n        val d = ey.y\n        var det = a * d - b * c\n        if (det != 0f) {\n            det = 1.0f / det\n        }\n        ex.x = det * d\n        ey.x = -det * b\n        ex.y = -det * c\n        ey.y = det * a\n        return this\n    }\n\n    fun invertToOut(out: Mat22) {\n        val a = ex.x\n        val b = ey.x\n        val c = ex.y\n        val d = ey.y\n        var det = a * d - b * c\n        // b2Assert(det != 0.0f);\n        det = 1.0f / det\n        out.ex.x = det * d\n        out.ey.x = -det * b\n        out.ex.y = -det * c\n        out.ey.y = det * a\n    }\n\n\n    /**\n     * Return the matrix composed of the absolute values of all elements. djm: fixed double allocation\n     *\n     * @return Absolute value matrix\n     */\n    fun abs(): Mat22 {\n        return Mat22(MathUtils.abs(ex.x), MathUtils.abs(ey.x), MathUtils.abs(ex.y),\n                MathUtils.abs(ey.y))\n    }\n\n    /* djm: added */\n    fun absLocal() {\n        ex.absLocal()\n        ey.absLocal()\n    }\n\n    /**\n     * Multiply a vector by this matrix.\n     *\n     * @param v Vector to multiply by matrix.\n     * @return Resulting vector\n     */\n    fun mul(v: Vec2): Vec2 {\n        return Vec2(ex.x * v.x + ey.x * v.y, ex.y * v.x + ey.y * v.y)\n    }\n\n    fun mulToOut(v: Vec2, out: Vec2) {\n        val tempy = ex.y * v.x + ey.y * v.y\n        out.x = ex.x * v.x + ey.x * v.y\n        out.y = tempy\n    }\n\n    fun mulToOutUnsafe(v: Vec2, out: Vec2) {\n        assert(v !== out)\n        out.x = ex.x * v.x + ey.x * v.y\n        out.y = ex.y * v.x + ey.y * v.y\n    }\n\n\n    /**\n     * Multiply another matrix by this one (this one on left). djm optimized\n     *\n     * @param R\n     * @return\n     */\n    fun mul(R: Mat22): Mat22 {\n        /*\n     * Mat22 C = new Mat22();C.set(this.mul(R.ex), this.mul(R.ey));return C;\n     */\n        val C = Mat22()\n        C.ex.x = ex.x * R.ex.x + ey.x * R.ex.y\n        C.ex.y = ex.y * R.ex.x + ey.y * R.ex.y\n        C.ey.x = ex.x * R.ey.x + ey.x * R.ey.y\n        C.ey.y = ex.y * R.ey.x + ey.y * R.ey.y\n        // C.set(ex,col2);\n        return C\n    }\n\n    fun mulLocal(R: Mat22): Mat22 {\n        mulToOut(R, this)\n        return this\n    }\n\n    fun mulToOut(R: Mat22, out: Mat22) {\n        val tempy1 = this.ex.y * R.ex.x + this.ey.y * R.ex.y\n        val tempx1 = this.ex.x * R.ex.x + this.ey.x * R.ex.y\n        out.ex.x = tempx1\n        out.ex.y = tempy1\n        val tempy2 = this.ex.y * R.ey.x + this.ey.y * R.ey.y\n        val tempx2 = this.ex.x * R.ey.x + this.ey.x * R.ey.y\n        out.ey.x = tempx2\n        out.ey.y = tempy2\n    }\n\n    fun mulToOutUnsafe(R: Mat22, out: Mat22) {\n        assert(out !== R)\n        assert(out !== this)\n        out.ex.x = this.ex.x * R.ex.x + this.ey.x * R.ex.y\n        out.ex.y = this.ex.y * R.ex.x + this.ey.y * R.ex.y\n        out.ey.x = this.ex.x * R.ey.x + this.ey.x * R.ey.y\n        out.ey.y = this.ex.y * R.ey.x + this.ey.y * R.ey.y\n    }\n\n    /**\n     * Multiply another matrix by the transpose of this one (transpose of this one on left). djm:\n     * optimized\n     *\n     * @param B\n     * @return\n     */\n    fun mulTrans(B: Mat22): Mat22 {\n        /*\n     * Vec2 c1 = new Vec2(Vec2.dot(this.ex, B.ex), Vec2.dot(this.ey, B.ex)); Vec2 c2 = new\n     * Vec2(Vec2.dot(this.ex, B.ey), Vec2.dot(this.ey, B.ey)); Mat22 C = new Mat22(); C.set(c1, c2);\n     * return C;\n     */\n        val C = Mat22()\n\n        C.ex.x = Vec2.dot(this.ex!!, B.ex!!)\n        C.ex.y = Vec2.dot(this.ey!!, B.ex)\n\n        C.ey.x = Vec2.dot(this.ex, B.ey!!)\n        C.ey.y = Vec2.dot(this.ey, B.ey)\n        return C\n    }\n\n    fun mulTransLocal(B: Mat22): Mat22 {\n        mulTransToOut(B, this)\n        return this\n    }\n\n    fun mulTransToOut(B: Mat22, out: Mat22) {\n        /*\n     * out.ex.x = Vec2.dot(this.ex, B.ex); out.ex.y = Vec2.dot(this.ey, B.ex); out.ey.x =\n     * Vec2.dot(this.ex, B.ey); out.ey.y = Vec2.dot(this.ey, B.ey);\n     */\n        val x1 = this.ex.x * B.ex.x + this.ex.y * B.ex.y\n        val y1 = this.ey.x * B.ex.x + this.ey.y * B.ex.y\n        val x2 = this.ex.x * B.ey.x + this.ex.y * B.ey.y\n        val y2 = this.ey.x * B.ey.x + this.ey.y * B.ey.y\n        out.ex.x = x1\n        out.ey.x = x2\n        out.ex.y = y1\n        out.ey.y = y2\n    }\n\n    fun mulTransToOutUnsafe(B: Mat22, out: Mat22) {\n        assert(B !== out)\n        assert(this !== out)\n        out.ex.x = this.ex.x * B.ex.x + this.ex.y * B.ex.y\n        out.ey.x = this.ex.x * B.ey.x + this.ex.y * B.ey.y\n        out.ex.y = this.ey.x * B.ex.x + this.ey.y * B.ex.y\n        out.ey.y = this.ey.x * B.ey.x + this.ey.y * B.ey.y\n    }\n\n    /**\n     * Multiply a vector by the transpose of this matrix.\n     *\n     * @param v\n     * @return\n     */\n    fun mulTrans(v: Vec2): Vec2 {\n        // return new Vec2(Vec2.dot(v, ex), Vec2.dot(v, col2));\n        return Vec2(v.x * ex.x + v.y * ex.y, v.x * ey.x + v.y * ey.y)\n    }\n\n    /* djm added */\n    fun mulTransToOut(v: Vec2, out: Vec2) {\n        /*\n     * out.x = Vec2.dot(v, ex); out.y = Vec2.dot(v, col2);\n     */\n        val tempx = v.x * ex.x + v.y * ex.y\n        out.y = v.x * ey.x + v.y * ey.y\n        out.x = tempx\n    }\n\n    /**\n     * Add this matrix to B, return the result.\n     *\n     * @param B\n     * @return\n     */\n    fun add(B: Mat22): Mat22 {\n        // return new Mat22(ex.add(B.ex), col2.add(B.ey));\n        val m = Mat22()\n        m.ex.x = ex.x + B.ex.x\n        m.ex.y = ex.y + B.ex.y\n        m.ey.x = ey.x + B.ey.x\n        m.ey.y = ey.y + B.ey.y\n        return m\n    }\n\n    /**\n     * Add B to this matrix locally.\n     *\n     * @param B\n     * @return\n     */\n    fun addLocal(B: Mat22): Mat22 {\n        // ex.addLocal(B.ex);\n        // col2.addLocal(B.ey);\n        ex.x += B.ex.x\n        ex.y += B.ex.y\n        ey.x += B.ey.x\n        ey.y += B.ey.y\n        return this\n    }\n\n    /**\n     * Solve A * x = b where A = this matrix.\n     *\n     * @return The vector x that solves the above equation.\n     */\n    fun solve(b: Vec2): Vec2 {\n        val a11 = ex.x\n        val a12 = ey.x\n        val a21 = ex.y\n        val a22 = ey.y\n        var det = a11 * a22 - a12 * a21\n        if (det != 0.0f) {\n            det = 1.0f / det\n        }\n        val x = Vec2(det * (a22 * b.x - a12 * b.y), det * (a11 * b.y - a21 * b.x))\n        return x\n    }\n\n    fun solveToOut(b: Vec2, out: Vec2) {\n        val a11 = ex.x\n        val a12 = ey.x\n        val a21 = ex.y\n        val a22 = ey.y\n        var det = a11 * a22 - a12 * a21\n        if (det != 0.0f) {\n            det = 1.0f / det\n        }\n        val tempy = det * (a11 * b.y - a21 * b.x)\n        out.x = det * (a22 * b.x - a12 * b.y)\n        out.y = tempy\n    }\n\n    override fun hashCode(): Int {\n        val prime = 31\n        var result = 1\n        result = prime * result + (ex?.hashCode() ?: 0)\n        result = prime * result + (ey?.hashCode() ?: 0)\n        return result\n    }\n\n    override fun equals(obj: Any?): Boolean {\n        if (this === obj) return true\n        if (obj == null) return false\n        if (this::class != obj::class) return false\n        val other = obj as Mat22?\n        if (ex == null) {\n            if (other?.ex != null) return false\n        } else if (ex != other?.ex) return false\n        if (ey == null) {\n            if (other?.ey != null) return false\n        } else if (ey != other?.ey) return false\n        return true\n    }\n\n    companion object {\n        /**\n         * Return the matrix composed of the absolute values of all elements.\n         *\n         * @return Absolute value matrix\n         */\n\n        fun abs(R: Mat22): Mat22 {\n            return R.abs()\n        }\n\n        /* djm created */\n\n        fun absToOut(R: Mat22, out: Mat22) {\n            out.ex.x = MathUtils.abs(R.ex.x)\n            out.ex.y = MathUtils.abs(R.ex.y)\n            out.ey.x = MathUtils.abs(R.ey.x)\n            out.ey.y = MathUtils.abs(R.ey.y)\n        }\n\n\n        fun mul(R: Mat22, v: Vec2): Vec2 {\n            // return R.mul(v);\n            return Vec2(R.ex.x * v.x + R.ey.x * v.y, R.ex.y * v.x + R.ey.y * v.y)\n        }\n\n\n        fun mulToOut(R: Mat22, v: Vec2, out: Vec2) {\n            val tempy = R.ex.y * v.x + R.ey.y * v.y\n            out.x = R.ex.x * v.x + R.ey.x * v.y\n            out.y = tempy\n        }\n\n\n        fun mulToOutUnsafe(R: Mat22, v: Vec2, out: Vec2) {\n            assert(v !== out)\n            out.x = R.ex.x * v.x + R.ey.x * v.y\n            out.y = R.ex.y * v.x + R.ey.y * v.y\n        }\n\n\n        fun mul(A: Mat22, B: Mat22): Mat22 {\n            // return A.mul(B);\n            val C = Mat22()\n            C.ex.x = A.ex.x * B.ex.x + A.ey.x * B.ex.y\n            C.ex.y = A.ex.y * B.ex.x + A.ey.y * B.ex.y\n            C.ey.x = A.ex.x * B.ey.x + A.ey.x * B.ey.y\n            C.ey.y = A.ex.y * B.ey.x + A.ey.y * B.ey.y\n            return C\n        }\n\n\n        fun mulToOut(A: Mat22, B: Mat22, out: Mat22) {\n            val tempy1 = A.ex.y * B.ex.x + A.ey.y * B.ex.y\n            val tempx1 = A.ex.x * B.ex.x + A.ey.x * B.ex.y\n            val tempy2 = A.ex.y * B.ey.x + A.ey.y * B.ey.y\n            val tempx2 = A.ex.x * B.ey.x + A.ey.x * B.ey.y\n            out.ex.x = tempx1\n            out.ex.y = tempy1\n            out.ey.x = tempx2\n            out.ey.y = tempy2\n        }\n\n\n        fun mulToOutUnsafe(A: Mat22, B: Mat22, out: Mat22) {\n            assert(out !== A)\n            assert(out !== B)\n            out.ex.x = A.ex.x * B.ex.x + A.ey.x * B.ex.y\n            out.ex.y = A.ex.y * B.ex.x + A.ey.y * B.ex.y\n            out.ey.x = A.ex.x * B.ey.x + A.ey.x * B.ey.y\n            out.ey.y = A.ex.y * B.ey.x + A.ey.y * B.ey.y\n        }\n\n\n        fun mulTrans(R: Mat22, v: Vec2): Vec2 {\n            return Vec2(v.x * R.ex.x + v.y * R.ex.y, v.x * R.ey.x + v.y * R.ey.y)\n        }\n\n\n        fun mulTransToOut(R: Mat22, v: Vec2, out: Vec2) {\n            val outx = v.x * R.ex.x + v.y * R.ex.y\n            out.y = v.x * R.ey.x + v.y * R.ey.y\n            out.x = outx\n        }\n\n\n        fun mulTransToOutUnsafe(R: Mat22, v: Vec2, out: Vec2) {\n            assert(out !== v)\n            out.y = v.x * R.ey.x + v.y * R.ey.y\n            out.x = v.x * R.ex.x + v.y * R.ex.y\n        }\n\n\n        fun mulTrans(A: Mat22, B: Mat22): Mat22 {\n            val C = Mat22()\n            C.ex.x = A.ex.x * B.ex.x + A.ex.y * B.ex.y\n            C.ex.y = A.ey.x * B.ex.x + A.ey.y * B.ex.y\n            C.ey.x = A.ex.x * B.ey.x + A.ex.y * B.ey.y\n            C.ey.y = A.ey.x * B.ey.x + A.ey.y * B.ey.y\n            return C\n        }\n\n\n        fun mulTransToOut(A: Mat22, B: Mat22, out: Mat22) {\n            val x1 = A.ex.x * B.ex.x + A.ex.y * B.ex.y\n            val y1 = A.ey.x * B.ex.x + A.ey.y * B.ex.y\n            val x2 = A.ex.x * B.ey.x + A.ex.y * B.ey.y\n            val y2 = A.ey.x * B.ey.x + A.ey.y * B.ey.y\n\n            out.ex.x = x1\n            out.ex.y = y1\n            out.ey.x = x2\n            out.ey.y = y2\n        }\n\n\n        fun mulTransToOutUnsafe(A: Mat22, B: Mat22, out: Mat22) {\n            assert(A !== out)\n            assert(B !== out)\n            out.ex.x = A.ex.x * B.ex.x + A.ex.y * B.ex.y\n            out.ex.y = A.ey.x * B.ex.x + A.ey.y * B.ex.y\n            out.ey.x = A.ex.x * B.ey.x + A.ex.y * B.ey.y\n            out.ey.y = A.ey.x * B.ey.x + A.ey.y * B.ey.y\n        }\n\n\n        fun createRotationalTransformRadians(angleRadians: Float, out: Mat22 = Mat22()): Mat22 {\n            val c = MathUtils.cos(angleRadians)\n            val s = MathUtils.sin(angleRadians)\n            out.ex.x = c\n            out.ey.x = -s\n            out.ex.y = s\n            out.ey.y = c\n            return out\n        }\n\n        fun createRotationalTransformDegrees(angleDegrees: Float, out: Mat22 = Mat22()): Mat22\n            = createRotationalTransformRadians(angleDegrees * MathUtils.DEG2RAD, out)\n\n        fun createRotationalTransform(angle: Angle, out: Mat22 = Mat22()): Mat22\n            = createRotationalTransformRadians(angle.radians.toFloat(), out)\n\n\n        fun createScaleTransform(scale: Float): Mat22 {\n            val mat = Mat22()\n            mat.ex.x = scale\n            mat.ey.y = scale\n            return mat\n        }\n\n\n        fun createScaleTransform(scale: Float, out: Mat22) {\n            out.ex.x = scale\n            out.ey.y = scale\n        }\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.common\n\nimport org.jbox2d.internal.assert\n\n/**\n * A 3-by-3 matrix. Stored in column-major order.\n *\n * @author Daniel Murphy\n */\nclass Mat33 {\n\n\n    val ex: Vec3\n\n    val ey: Vec3\n\n    val ez: Vec3\n\n    constructor() {\n        ex = Vec3()\n        ey = Vec3()\n        ez = Vec3()\n    }\n\n    constructor(exx: Float, exy: Float, exz: Float, eyx: Float, eyy: Float, eyz: Float, ezx: Float,\n                ezy: Float, ezz: Float) {\n        ex = Vec3(exx, exy, exz)\n        ey = Vec3(eyx, eyy, eyz)\n        ez = Vec3(ezx, ezy, ezz)\n    }\n\n    constructor(argCol1: Vec3, argCol2: Vec3, argCol3: Vec3) {\n        ex = argCol1.clone()\n        ey = argCol2.clone()\n        ez = argCol3.clone()\n    }\n\n    fun setZero() {\n        ex.setZero()\n        ey.setZero()\n        ez.setZero()\n    }\n\n    fun set(exx: Float, exy: Float, exz: Float, eyx: Float, eyy: Float, eyz: Float, ezx: Float,\n                     ezy: Float, ezz: Float) {\n        ex.x = exx\n        ex.y = exy\n        ex.z = exz\n        ey.x = eyx\n        ey.y = eyy\n        ey.z = eyz\n        ez.x = eyx\n        ez.y = eyy\n        ez.z = eyz\n    }\n\n    fun set(mat: Mat33) {\n        val vec = mat.ex\n        ex.x = vec.x\n        ex.y = vec.y\n        ex.z = vec.z\n        val vec1 = mat.ey\n        ey.x = vec1.x\n        ey.y = vec1.y\n        ey.z = vec1.z\n        val vec2 = mat.ez\n        ez.x = vec2.x\n        ez.y = vec2.y\n        ez.z = vec2.z\n    }\n\n    fun setIdentity() {\n        ex.x = 1.toFloat()\n        ex.y = 0.toFloat()\n        ex.z = 0.toFloat()\n        ey.x = 0.toFloat()\n        ey.y = 1.toFloat()\n        ey.z = 0.toFloat()\n        ez.x = 0.toFloat()\n        ez.y = 0.toFloat()\n        ez.z = 1.toFloat()\n    }\n\n    /**\n     * Solve A * x = b, where b is a column vector. This is more efficient than computing the inverse\n     * in one-shot cases.\n     *\n     * @param b\n     * @return\n     */\n    fun solve22(b: Vec2): Vec2 {\n        val x = Vec2()\n        solve22ToOut(b, x)\n        return x\n    }\n\n    /**\n     * Solve A * x = b, where b is a column vector. This is more efficient than computing the inverse\n     * in one-shot cases.\n     *\n     * @param b\n     * @return\n     */\n    fun solve22ToOut(b: Vec2, out: Vec2) {\n        val a11 = ex.x\n        val a12 = ey.x\n        val a21 = ex.y\n        val a22 = ey.y\n        var det = a11 * a22 - a12 * a21\n        if (det != 0.0f) {\n            det = 1.0f / det\n        }\n        out.x = det * (a22 * b.x - a12 * b.y)\n        out.y = det * (a11 * b.y - a21 * b.x)\n    }\n\n    // djm pooling from below\n    /**\n     * Solve A * x = b, where b is a column vector. This is more efficient than computing the inverse\n     * in one-shot cases.\n     *\n     * @param b\n     * @return\n     */\n    fun solve33(b: Vec3): Vec3 {\n        val x = Vec3()\n        solve33ToOut(b, x)\n        return x\n    }\n\n    /**\n     * Solve A * x = b, where b is a column vector. This is more efficient than computing the inverse\n     * in one-shot cases.\n     *\n     * @param b\n     * @param out the result\n     */\n    fun solve33ToOut(b: Vec3, out: Vec3) {\n        assert(b !== out)\n        Vec3.crossToOutUnsafe(ey!!, ez!!, out)\n        var det = Vec3.dot(ex!!, out)\n        if (det != 0.0f) {\n            det = 1.0f / det\n        }\n        Vec3.crossToOutUnsafe(ey, ez, out)\n        val x = det * Vec3.dot(b, out)\n        Vec3.crossToOutUnsafe(b, ez, out)\n        val y = det * Vec3.dot(ex, out)\n        Vec3.crossToOutUnsafe(ey, b, out)\n        val z = det * Vec3.dot(ex, out)\n        out.x = x\n        out.y = y\n        out.z = z\n    }\n\n    fun getInverse22(M: Mat33) {\n        val a = ex.x\n        val b = ey.x\n        val c = ex.y\n        val d = ey.y\n        var det = a * d - b * c\n        if (det != 0.0f) {\n            det = 1.0f / det\n        }\n\n        M.ex.x = det * d\n        M.ey.x = -det * b\n        M.ex.z = 0.0f\n        M.ex.y = -det * c\n        M.ey.y = det * a\n        M.ey.z = 0.0f\n        M.ez.x = 0.0f\n        M.ez.y = 0.0f\n        M.ez.z = 0.0f\n    }\n\n    // / Returns the zero matrix if singular.\n    fun getSymInverse33(M: Mat33) {\n        val bx = ey.y * ez.z - ey.z * ez.y\n        val by = ey.z * ez.x - ey.x * ez.z\n        val bz = ey.x * ez.y - ey.y * ez.x\n        var det = ex.x * bx + ex.y * by + ex.z * bz\n        if (det != 0.0f) {\n            det = 1.0f / det\n        }\n\n        val a11 = ex.x\n        val a12 = ey.x\n        val a13 = ez.x\n        val a22 = ey.y\n        val a23 = ez.y\n        val a33 = ez.z\n\n        M.ex.x = det * (a22 * a33 - a23 * a23)\n        M.ex.y = det * (a13 * a23 - a12 * a33)\n        M.ex.z = det * (a12 * a23 - a13 * a22)\n\n        M.ey.x = M.ex.y\n        M.ey.y = det * (a11 * a33 - a13 * a13)\n        M.ey.z = det * (a13 * a12 - a11 * a23)\n\n        M.ez.x = M.ex.z\n        M.ez.y = M.ey.z\n        M.ez.z = det * (a11 * a22 - a12 * a12)\n    }\n\n    override fun hashCode(): Int {\n        val prime = 31\n        var result = 1\n        result = prime * result + (ex?.hashCode() ?: 0)\n        result = prime * result + (ey?.hashCode() ?: 0)\n        result = prime * result + (ez?.hashCode() ?: 0)\n        return result\n    }\n\n    override fun equals(obj: Any?): Boolean {\n        if (this === obj) return true\n        if (obj == null) return false\n        if (this::class != obj::class) return false\n        val other = obj as Mat33?\n        if (ex == null) {\n            if (other?.ex != null) return false\n        } else if (ex != other?.ex) return false\n        if (ey == null) {\n            if (other?.ey != null) return false\n        } else if (ey != other?.ey) return false\n        if (ez == null) {\n            if (other?.ez != null) return false\n        } else if (ez != other?.ez) return false\n        return true\n    }\n\n    companion object {\n\n        //@ThreadLocal\n        val IDENTITY = Mat33(Vec3(1f, 0f, 0f), Vec3(0f, 1f, 0f), Vec3(0f, 0f, 1f))\n\n        // / Multiply a matrix times a vector.\n\n        fun mul(A: Mat33, v: Vec3): Vec3 {\n            return Vec3(v.x * A.ex.x + v.y * A.ey.x + v.z + A.ez.x, v.x * A.ex.y + v.y * A.ey.y + v.z * A.ez.y, v.x * A.ex.z + v.y * A.ey.z + v.z * A.ez.z)\n        }\n\n\n        fun mul22(A: Mat33, v: Vec2): Vec2 {\n            return Vec2(A.ex.x * v.x + A.ey.x * v.y, A.ex.y * v.x + A.ey.y * v.y)\n        }\n\n\n        fun mul22ToOut(A: Mat33, v: Vec2, out: Vec2) {\n            val tempx = A.ex.x * v.x + A.ey.x * v.y\n            out.y = A.ex.y * v.x + A.ey.y * v.y\n            out.x = tempx\n        }\n\n\n        fun mul22ToOutUnsafe(A: Mat33, v: Vec2, out: Vec2) {\n            assert(v !== out)\n            out.y = A.ex.y * v.x + A.ey.y * v.y\n            out.x = A.ex.x * v.x + A.ey.x * v.y\n        }\n\n\n        fun mulToOut(A: Mat33, v: Vec3, out: Vec3) {\n            val tempy = v.x * A.ex.y + v.y * A.ey.y + v.z * A.ez.y\n            val tempz = v.x * A.ex.z + v.y * A.ey.z + v.z * A.ez.z\n            out.x = v.x * A.ex.x + v.y * A.ey.x + v.z * A.ez.x\n            out.y = tempy\n            out.z = tempz\n        }\n\n\n        fun mulToOutUnsafe(A: Mat33, v: Vec3, out: Vec3) {\n            assert(out !== v)\n            out.x = v.x * A.ex.x + v.y * A.ey.x + v.z * A.ez.x\n            out.y = v.x * A.ex.y + v.y * A.ey.y + v.z * A.ez.y\n            out.z = v.x * A.ex.z + v.y * A.ey.z + v.z * A.ez.z\n        }\n\n\n        fun setScaleTransform(scale: Float, out: Mat33) {\n            out.ex.x = scale\n            out.ey.y = scale\n        }\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n/*\n * JBox2D - A Java Port of Erin Catto's Box2D\n *\n * JBox2D homepage: http://jbox2d.sourceforge.net/\n * Box2D homepage: http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n *\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n *\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\npackage org.jbox2d.common\n\nimport kotlin.math.ceil\nimport kotlin.math.floor\nimport kotlin.math.pow\nimport kotlin.math.round\nimport kotlin.random.Random\n\n/**\n * A few math methods that don't fit very well anywhere else.\n */\nclass MathUtils : PlatformMathUtils() {\n    companion object {\n\n        val PI = kotlin.math.PI.toFloat()\n\n        val TWOPI = (kotlin.math.PI * 2).toFloat()\n\n        val INV_PI = 1f / PI\n\n        val HALF_PI = PI / 2\n\n        val QUARTER_PI = PI / 4\n\n        val THREE_HALVES_PI = TWOPI - HALF_PI\n\n        /**\n         * Degrees to radians conversion factor\n         */\n\n        val DEG2RAD = PI / 180\n\n        /**\n         * Radians to degrees conversion factor\n         */\n\n        val RAD2DEG = 180 / PI\n\n\n        val sinLUT = FloatArray(Settings.SINCOS_LUT_LENGTH) {\n            kotlin.math.sin((it * Settings.SINCOS_LUT_PRECISION).toDouble()).toFloat()\n        }\n\n        fun sin(x: Float): Float {\n            return if (Settings.SINCOS_LUT_ENABLED) {\n                sinLUT(x)\n            } else {\n                kotlin.math.sin(x.toDouble()).toFloat()\n            }\n        }\n\n\n        fun sinLUT(x: Float): Float {\n            var x = x\n            x %= TWOPI\n\n            if (x < 0) {\n                x += TWOPI\n            }\n\n            if (Settings.SINCOS_LUT_LERP) {\n\n                x /= Settings.SINCOS_LUT_PRECISION\n\n                val index = x.toInt()\n\n                if (index != 0) {\n                    x %= index.toFloat()\n                }\n\n                // the next index is 0\n                return if (index == Settings.SINCOS_LUT_LENGTH - 1) {\n                    (1 - x) * sinLUT[index] + x * sinLUT[0]\n                } else {\n                    (1 - x) * sinLUT[index] + x * sinLUT[index + 1]\n                }\n\n            } else {\n                return sinLUT[MathUtils.round(x / Settings.SINCOS_LUT_PRECISION) % Settings.SINCOS_LUT_LENGTH]\n            }\n        }\n\n\n        fun cos(x: Float): Float {\n            return if (Settings.SINCOS_LUT_ENABLED) {\n                sinLUT(HALF_PI - x)\n            } else {\n                kotlin.math.cos(x.toDouble()).toFloat()\n            }\n        }\n\n\n        fun abs(x: Float): Float {\n            return if (Settings.FAST_ABS) {\n                if (x > 0) x else -x\n            } else {\n                kotlin.math.abs(x)\n            }\n        }\n\n\n        fun fastAbs(x: Float): Float {\n            return if (x > 0) x else -x\n        }\n\n\n        fun abs(x: Int): Int {\n            val y = x shr 31\n            return (x xor y) - y\n        }\n\n\n        fun floor(x: Float): Int = if (Settings.FAST_FLOOR) fastFloor(x) else floor(x.toDouble()).toInt()\n\n\n        fun fastFloor(x: Float): Int {\n            val y = x.toInt()\n            return if (x < y) y - 1 else y\n        }\n\n\n        fun ceil(x: Float): Int = if (Settings.FAST_CEIL) fastCeil(x) else ceil(x.toDouble()).toInt()\n\n\n        fun fastCeil(x: Float): Int {\n            val y = x.toInt()\n            return if (x > y) y + 1 else y\n        }\n\n\n        fun round(x: Float): Int = if (Settings.FAST_ROUND) floor(x + .5f) else round(x.toDouble()).toInt()\n\n        /**\n         * Rounds up the value to the nearest higher power^2 value.\n         *\n         * @param x\n         * @return power^2 value\n         */\n\n        fun ceilPowerOf2(x: Int): Int {\n            var pow2 = 1\n            while (pow2 < x) pow2 = pow2 shl 1\n            return pow2\n        }\n\n\n        fun max(a: Float, b: Float): Float = if (a > b) a else b\n        fun max(a: Int, b: Int): Int = if (a > b) a else b\n        fun min(a: Float, b: Float): Float = if (a < b) a else b\n        fun min(a: Int, b: Int): Int = if (a < b) a else b\n\n        fun map(`val`: Float, fromMin: Float, fromMax: Float,\n                toMin: Float, toMax: Float): Float {\n            val mult = (`val` - fromMin) / (fromMax - fromMin)\n            val res = toMin + mult * (toMax - toMin)\n            return res\n        }\n\n        /** Returns the closest value to 'a' that is in between 'low' and 'high'  */\n\n        fun clamp(a: Float, low: Float, high: Float): Float = max(low, min(a, high))\n\n\n        fun clamp(a: Vec2, low: Vec2, high: Vec2): Vec2 {\n            val min = Vec2()\n            min.x = if (a.x < high.x) a.x else high.x\n            min.y = if (a.y < high.y) a.y else high.y\n            min.x = if (low.x > min.x) low.x else min.x\n            min.y = if (low.y > min.y) low.y else min.y\n            return min\n        }\n\n\n        fun clampToOut(a: Vec2, low: Vec2, high: Vec2, dest: Vec2) {\n            dest.x = if (a.x < high.x) a.x else high.x\n            dest.y = if (a.y < high.y) a.y else high.y\n            dest.x = if (low.x > dest.x) low.x else dest.x\n            dest.y = if (low.y > dest.y) low.y else dest.y\n        }\n\n        /**\n         * Next Largest Power of 2: Given a binary integer value x, the next largest power of 2 can be\n         * computed by a SWAR algorithm that recursively \"folds\" the upper bits into the lower bits. This\n         * process yields a bit vector with the same most significant 1 as x, but all 1's below it. Adding\n         * 1 to that value yields the next largest power of 2.\n         */\n\n        fun nextPowerOfTwo(x: Int): Int {\n            var x = x\n            x = x or (x shr 1)\n            x = x or (x shr 2)\n            x = x or (x shr 4)\n            x = x or (x shr 8)\n            x = x or (x shr 16)\n            return x + 1\n        }\n\n\n        fun isPowerOfTwo(x: Int): Boolean {\n            return x > 0 && x and x - 1 == 0\n        }\n\n\n        fun pow(a: Float, b: Float): Float {\n            return if (Settings.FAST_POW) {\n                PlatformMathUtils.fastPow(a, b)\n            } else {\n                a.toDouble().pow(b.toDouble()).toFloat()\n            }\n        }\n\n\n        fun atan2(y: Float, x: Float): Float {\n            return if (Settings.FAST_ATAN2) {\n                fastAtan2(y, x)\n            } else {\n                kotlin.math.atan2(y.toDouble(), x.toDouble()).toFloat()\n            }\n        }\n\n\n        fun fastAtan2(y: Float, x: Float): Float {\n            if (x == 0.0f) {\n                if (y > 0.0f) return HALF_PI\n                return if (y == 0.0f) 0.0f else -HALF_PI\n            }\n            val atan: Float\n            val z = y / x\n            if (abs(z) < 1.0f) {\n                atan = z / (1.0f + 0.28f * z * z)\n                if (x < 0.0f) {\n                    return if (y < 0.0f) atan - PI else atan + PI\n                }\n            } else {\n                atan = HALF_PI - z / (z * z + 0.28f)\n                if (y < 0.0f) return atan - PI\n            }\n            return atan\n        }\n\n\n        fun reduceAngle(theta: Float): Float {\n            var theta = theta\n            theta %= TWOPI\n            if (abs(theta) > PI) {\n                theta -= TWOPI\n            }\n            if (abs(theta) > HALF_PI) {\n                theta = PI - theta\n            }\n            return theta\n        }\n\n\n        fun randomFloat(argLow: Float, argHigh: Float): Float {\n\n            return kotlin.random.Random.nextFloat() * (argHigh - argLow) + argLow\n        }\n\n\n        fun randomFloat(r: Random, argLow: Float, argHigh: Float): Float {\n            return r.nextFloat() * (argHigh - argLow) + argLow\n        }\n\n\n        fun sqrt(x: Float): Float {\n            return kotlin.math.sqrt(x.toDouble()).toFloat()\n        }\n\n\n        fun distanceSquared(v1: Vec2, v2: Vec2): Float {\n            val dx = v1.x - v2.x\n            val dy = v1.y - v2.y\n            return dx * dx + dy * dy\n        }\n\n\n        fun distance(v1: Vec2, v2: Vec2): Float {\n            return sqrt(distanceSquared(v1, v2))\n        }\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.common\n\nimport com.soywiz.korma.geom.Angle\nimport com.soywiz.korma.geom.radians\nimport org.jbox2d.internal.assert\n\n/**\n * Represents a rotation\n *\n * @author Daniel\n */\nclass Rot {\n\n\n    var s: Float = 0.toFloat()\n\n    var c: Float = 0.toFloat() // sin and cos\n\n    val angleRadians: Float get() = MathUtils.atan2(s, c)\n\n    val angleDegrees: Float get() = angleRadians * MathUtils.RAD2DEG\n\n    val angle: Angle get() = angleRadians.radians\n\n    constructor() {\n        setIdentity()\n    }\n\n    constructor(angle: Angle) {\n        set(angle)\n    }\n\n    override fun toString(): String {\n        return \"Rot(s:$s, c:$c)\"\n    }\n\n    fun setRadians(angleRadians: Float): Rot {\n        s = MathUtils.sin(angleRadians)\n        c = MathUtils.cos(angleRadians)\n        return this\n    }\n\n    fun set(angle: Angle): Rot = setRadians(angle.radians.toFloat())\n\n    fun setDegrees(angleDegrees: Float): Rot = setRadians(angleDegrees * MathUtils.DEG2RAD)\n\n    fun set(other: Rot): Rot {\n        s = other.s\n        c = other.c\n        return this\n    }\n\n    fun setIdentity(): Rot {\n        s = 0f\n        c = 1f\n        return this\n    }\n\n    fun getXAxis(xAxis: Vec2) {\n        xAxis.set(c, s)\n    }\n\n    fun getYAxis(yAxis: Vec2) {\n        yAxis.set(-s, c)\n    }\n\n    // @Override // annotation omitted for GWT-compatibility\n    fun clone(): Rot {\n        val copy = Rot()\n        copy.s = s\n        copy.c = c\n        return copy\n    }\n\n    companion object {\n\n        fun mul(q: Rot, r: Rot, out: Rot) {\n            val tempc = q.c * r.c - q.s * r.s\n            out.s = q.s * r.c + q.c * r.s\n            out.c = tempc\n        }\n\n\n        fun mulUnsafe(q: Rot, r: Rot, out: Rot) {\n            assert(r !== out)\n            assert(q !== out)\n            // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n            // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n            // s = qs * rc + qc * rs\n            // c = qc * rc - qs * rs\n            out.s = q.s * r.c + q.c * r.s\n            out.c = q.c * r.c - q.s * r.s\n        }\n\n\n        fun mulTrans(q: Rot, r: Rot, out: Rot) {\n            val tempc = q.c * r.c + q.s * r.s\n            out.s = q.c * r.s - q.s * r.c\n            out.c = tempc\n        }\n\n\n        fun mulTransUnsafe(q: Rot, r: Rot, out: Rot) {\n            // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n            // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n            // s = qc * rs - qs * rc\n            // c = qc * rc + qs * rs\n            out.s = q.c * r.s - q.s * r.c\n            out.c = q.c * r.c + q.s * r.s\n        }\n\n\n        fun mulToOut(q: Rot, v: Vec2, out: Vec2) {\n            val tempy = q.s * v.x + q.c * v.y\n            out.x = q.c * v.x - q.s * v.y\n            out.y = tempy\n        }\n\n\n        fun mulToOutUnsafe(q: Rot, v: Vec2, out: Vec2) {\n            out.x = q.c * v.x - q.s * v.y\n            out.y = q.s * v.x + q.c * v.y\n        }\n\n\n        fun mulTrans(q: Rot, v: Vec2, out: Vec2) {\n            val tempy = -q.s * v.x + q.c * v.y\n            out.x = q.c * v.x + q.s * v.y\n            out.y = tempy\n        }\n\n\n        fun mulTransUnsafe(q: Rot, v: Vec2, out: Vec2) {\n            out.x = q.c * v.x + q.s * v.y\n            out.y = -q.s * v.x + q.c * v.y\n        }\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.common\n\nimport kotlin.native.concurrent.*\n\n@ThreadLocal private var _FAST_ABS = true\n@ThreadLocal private var _FAST_FLOOR = true\n@ThreadLocal private var _FAST_CEIL = true\n@ThreadLocal private var _FAST_ROUND = false\n@ThreadLocal private var _FAST_ATAN2 = true\n@ThreadLocal private var _FAST_POW = true\n@ThreadLocal private var _CONTACT_STACK_INIT_SIZE = 10\n@ThreadLocal private var _SINCOS_LUT_ENABLED = true\n@ThreadLocal private var _SINCOS_LUT_LERP = false\n@ThreadLocal private var _maxManifoldPoints = 2\n@ThreadLocal private var _maxPolygonVertices = 8\n@ThreadLocal private var _aabbExtension = 0.1f\n@ThreadLocal private var _aabbMultiplier = 2.0f\n@ThreadLocal private var _linearSlop = 0.005f\n@ThreadLocal private var _angularSlop = 2.0f / 180.0f * Settings.PI\n@ThreadLocal private var _polygonRadius = 2.0f * _linearSlop\n@ThreadLocal private var _maxSubSteps = 8\n@ThreadLocal private var _maxTOIContacts = 32\n@ThreadLocal private var _velocityThreshold = 1.0f\n@ThreadLocal private var _maxLinearCorrection = 0.2f\n@ThreadLocal private var _maxAngularCorrection = 8.0f / 180.0f * Settings.PI\n@ThreadLocal private var _maxTranslation = 2.0f\n@ThreadLocal private var _maxTranslationSquared = _maxTranslation * _maxTranslation\n@ThreadLocal private var _maxRotation = 0.5f * Settings.PI\n@ThreadLocal private var _maxRotationSquared = _maxRotation * _maxRotation\n@ThreadLocal private var _baumgarte = 0.2f\n@ThreadLocal private var _toiBaugarte = 0.75f\n@ThreadLocal private var _timeToSleep = 0.5f\n@ThreadLocal private var _linearSleepTolerance = 0.01f\n@ThreadLocal private var _angularSleepTolerance = 2.0f / 180.0f * Settings.PI\n\n/**\n * Global tuning constants based on MKS units and various integer maximums (vertices per shape,\n * pairs, etc.).\n */\nobject Settings {\n\n    /** A \"close to zero\" float epsilon value for use  */\n\n    val EPSILON = 1.1920928955078125E-7f\n\n    /** Pi.  */\n\n    val PI = kotlin.math.PI.toFloat()\n\n    // JBox2D specific settings\n\n    var FAST_ABS: Boolean\n\t\tget() = _FAST_ABS\n\t\tset(value) { _FAST_ABS = value }\n\n    var FAST_FLOOR: Boolean\n\t\tget() = _FAST_FLOOR\n\t\tset(value) { _FAST_FLOOR = value }\n\n    var FAST_CEIL\n\t\tget() = _FAST_CEIL\n\t\tset(value) { _FAST_CEIL = value }\n\n    var FAST_ROUND\n\t\tget() = _FAST_ROUND\n\t\tset(value) { _FAST_ROUND = value }\n\n    var FAST_ATAN2\n\t\tget() = _FAST_ATAN2\n\t\tset(value) { _FAST_ATAN2 = value }\n\n    var FAST_POW\n\t\tget() = _FAST_POW\n\t\tset(value) { _FAST_POW = value }\n\n    var CONTACT_STACK_INIT_SIZE\n\t\tget() = _CONTACT_STACK_INIT_SIZE\n\t\tset(value) { _CONTACT_STACK_INIT_SIZE = value }\n\n    var SINCOS_LUT_ENABLED\n\t\tget() = _SINCOS_LUT_ENABLED\n\t\tset(value) { _SINCOS_LUT_ENABLED = value }\n    /**\n     * smaller the precision, the larger the table. If a small table is used (eg, precision is .006 or\n     * greater), make sure you set the table to lerp it's results. Accuracy chart is in the MathUtils\n     * source. Or, run the tests yourself in [SinCosTest].  Good lerp precision\n     * values:\n     *\n     *  * .0092\n     *  * .008201\n     *  * .005904\n     *  * .005204\n     *  * .004305\n     *  * .002807\n     *  * .001508\n     *  * 9.32500E-4\n     *  * 7.48000E-4\n     *  * 8.47000E-4\n     *  * .0005095\n     *  * .0001098\n     *  * 9.50499E-5\n     *  * 6.08500E-5\n     *  * 3.07000E-5\n     *  * 1.53999E-5\n     *\n     */\n\n    val SINCOS_LUT_PRECISION = .00011f\n\n    val SINCOS_LUT_LENGTH = kotlin.math.ceil(kotlin.math.PI * 2 / SINCOS_LUT_PRECISION).toInt()\n    /**\n     * Use if the table's precision is large (eg .006 or greater). Although it is more expensive, it\n     * greatly increases accuracy. Look in the MathUtils source for some test results on the accuracy\n     * and speed of lerp vs non lerp. Or, run the tests yourself in [SinCosTest].\n     */\n\n    var SINCOS_LUT_LERP\n\t\tget() = _SINCOS_LUT_LERP\n\t\tset(value) { _SINCOS_LUT_LERP = value }\n\n\n    // Collision\n\n    /**\n     * The maximum number of contact points between two convex shapes.\n     */\n\n    var maxManifoldPoints\n\t\tget() = _maxManifoldPoints\n\t\tset(value) { _maxManifoldPoints = value }\n\n    /**\n     * The maximum number of vertices on a convex polygon.\n     */\n\n    var maxPolygonVertices\n\t\tget() = _maxPolygonVertices\n\t\tset(value) { _maxPolygonVertices = value }\n\n    /**\n     * This is used to fatten AABBs in the dynamic tree. This allows proxies to move by a small amount\n     * without triggering a tree adjustment. This is in meters.\n     */\n\n    var aabbExtension\n\t\tget() = _aabbExtension\n\t\tset(value) { _aabbExtension = value }\n\n    /**\n     * This is used to fatten AABBs in the dynamic tree. This is used to predict the future position\n     * based on the current displacement. This is a dimensionless multiplier.\n     */\n\n    var aabbMultiplier\n\t\tget() = _aabbMultiplier\n\t\tset(value) { _aabbMultiplier = value }\n\n    /**\n     * A small length used as a collision and constraint tolerance. Usually it is chosen to be\n     * numerically significant, but visually insignificant.\n     */\n\n    var linearSlop\n\t\tget() = _linearSlop\n\t\tset(value) { _linearSlop = value }\n\n    /**\n     * A small angle used as a collision and constraint tolerance. Usually it is chosen to be\n     * numerically significant, but visually insignificant.\n     */\n\n    var angularSlop\n\t\tget() = _angularSlop\n\t\tset(value) { _angularSlop = value }\n\n    /**\n     * The radius of the polygon/edge shape skin. This should not be modified. Making this smaller\n     * means polygons will have and insufficient for continuous collision. Making it larger may create\n     * artifacts for vertex collision.\n     */\n\n    var polygonRadius\n\t\tget() = _polygonRadius\n\t\tset(value) { _polygonRadius = value }\n\n    /** Maximum number of sub-steps per contact in continuous physics simulation.  */\n\n    var maxSubSteps\n\t\tget() = _maxSubSteps\n\t\tset(value) { _maxSubSteps = value }\n\n    // Dynamics\n\n    /**\n     * Maximum number of contacts to be handled to solve a TOI island.\n     */\n\n    var maxTOIContacts\n\t\tget() = _maxTOIContacts\n\t\tset(value) { _maxTOIContacts = value }\n\n    /**\n     * A velocity threshold for elastic collisions. Any collision with a relative linear velocity\n     * below this threshold will be treated as inelastic.\n     */\n\n    var velocityThreshold\n\t\tget() = _velocityThreshold\n\t\tset(value) { _velocityThreshold = value }\n\n    /**\n     * The maximum linear position correction used when solving constraints. This helps to prevent\n     * overshoot.\n     */\n\n    var maxLinearCorrection\n\t\tget() = _maxLinearCorrection\n\t\tset(value) { _maxLinearCorrection = value }\n\n    /**\n     * The maximum angular position correction used when solving constraints. This helps to prevent\n     * overshoot.\n     */\n\n    var maxAngularCorrection\n\t\tget() = _maxAngularCorrection\n\t\tset(value) { _maxAngularCorrection = value }\n\n    /**\n     * The maximum linear velocity of a body. This limit is very large and is used to prevent\n     * numerical problems. You shouldn't need to adjust this.\n     */\n\n    var maxTranslation\n\t\tget() = _maxTranslation\n\t\tset(value) { _maxTranslation = value }\n\n    var maxTranslationSquared\n\t\tget() = _maxTranslationSquared\n\t\tset(value) { _maxTranslationSquared = value }\n\n    /**\n     * The maximum angular velocity of a body. This limit is very large and is used to prevent\n     * numerical problems. You shouldn't need to adjust this.\n     */\n\n    var maxRotation\n\t\tget() = _maxRotation\n\t\tset(value) { _maxRotation = value }\n\n    var maxRotationSquared\n\t\tget() = _maxRotationSquared\n\t\tset(value) { _maxRotationSquared = value }\n\n    /**\n     * This scale factor controls how fast overlap is resolved. Ideally this would be 1 so that\n     * overlap is removed in one time step. However using values close to 1 often lead to overshoot.\n     */\n\n    var baumgarte\n\t\tget() = _baumgarte\n\t\tset(value) { _baumgarte = value }\n\n    var toiBaugarte\n\t\tget() = _toiBaugarte\n\t\tset(value) { _toiBaugarte = value }\n\n\n    // Sleep\n\n    /**\n     * The time that a body must be still before it will go to sleep.\n     */\n\n    var timeToSleep\n\t\tget() = _timeToSleep\n\t\tset(value) { _timeToSleep = value }\n\n    /**\n     * A body cannot sleep if its linear velocity is above this tolerance.\n     */\n\n    var linearSleepTolerance\n\t\tget() = _linearSleepTolerance\n\t\tset(value) { _linearSleepTolerance = value }\n\n    /**\n     * A body cannot sleep if its angular velocity is above this tolerance.\n     */\n\n    var angularSleepTolerance\n\t\tget() = _angularSleepTolerance\n\t\tset(value) { _angularSleepTolerance = value }\n\n    // Particle\n\n    /**\n     * A symbolic constant that stands for particle allocation error.\n     */\n\n    val invalidParticleIndex = -1\n\n    /**\n     * The standard distance between particles, divided by the particle radius.\n     */\n\n    val particleStride = 0.75f\n\n    /**\n     * The minimum particle weight that produces pressure.\n     */\n\n    val minParticleWeight = 1.0f\n\n    /**\n     * The upper limit for particle weight used in pressure calculation.\n     */\n\n    val maxParticleWeight = 5.0f\n\n    /**\n     * The maximum distance between particles in a triad, divided by the particle radius.\n     */\n\n    val maxTriadDistance = 2\n\n    val maxTriadDistanceSquared = maxTriadDistance * maxTriadDistance\n\n    /**\n     * The initial size of particle data buffers.\n     */\n\n    val minParticleBufferCapacity = 256\n\n\n    /**\n     * Friction mixing law. Feel free to customize this. TODO djm: add customization\n     *\n     * @param friction1\n     * @param friction2\n     * @return\n     */\n\n    fun mixFriction(friction1: Float, friction2: Float): Float {\n        return MathUtils.sqrt(friction1 * friction2)\n    }\n\n    /**\n     * Restitution mixing law. Feel free to customize this. TODO djm: add customization\n     *\n     * @param restitution1\n     * @param restitution2\n     * @return\n     */\n\n    fun mixRestitution(restitution1: Float, restitution2: Float): Float {\n        return if (restitution1 > restitution2) restitution1 else restitution2\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.common\n\nimport org.jbox2d.internal.*\n\n/**\n * This describes the motion of a body/shape for TOI computation. Shapes are defined with respect to\n * the body origin, which may not coincide with the center of mass. However, to support dynamics we\n * must interpolate the center of mass position.\n */\nclass Sweep {\n\n    /** Local center of mass position  */\n\n    val localCenter: Vec2 = Vec2()\n    /** Center world positions  */\n\n    val c0: Vec2 = Vec2()\n\n    val c: Vec2 = Vec2()\n    /** World angles  */\n\n    var a0: Float = 0.toFloat()\n\n    var a: Float = 0.toFloat()\n\n    /** Fraction of the current time step in the range [0,1] c0 and a0 are the positions at alpha0.  */\n\n    var alpha0: Float = 0.toFloat()\n\n    override fun toString(): String {\n        var s = \"Sweep:\\nlocalCenter: $localCenter\\n\"\n        s += \"c0: $c0, c: $c\\n\"\n        s += \"a0: $a0, a: $a\\n\"\n        s += \"alpha0: $alpha0\"\n        return s\n    }\n\n    fun normalize() {\n        val d = MathUtils.TWOPI * MathUtils.floor(a0 / MathUtils.TWOPI)\n        a0 -= d\n        a -= d\n    }\n\n    fun set(other: Sweep): Sweep {\n        localCenter.set(other.localCenter)\n        c0.set(other.c0)\n        c.set(other.c)\n        a0 = other.a0\n        a = other.a\n        alpha0 = other.alpha0\n        return this\n    }\n\n    /**\n     * Get the interpolated transform at a specific time.\n     *\n     * @param xf the result is placed here - must not be null\n     * @param t the normalized time in [0,1].\n     */\n    fun getTransform(xf: Transform, beta: Float) {\n        assert(xf != null)\n        // xf->p = (1.0f - beta) * c0 + beta * c;\n        // float32 angle = (1.0f - beta) * a0 + beta * a;\n        // xf->q.Set(angle);\n        xf.p.x = (1.0f - beta) * c0.x + beta * c.x\n        xf.p.y = (1.0f - beta) * c0.y + beta * c.y\n        val angle = (1.0f - beta) * a0 + beta * a\n        xf.q.setRadians(angle)\n\n        // Shift to origin\n        // xf->p -= b2Mul(xf->q, localCenter);\n        val q = xf.q\n        xf.p.x -= q.c * localCenter.x - q.s * localCenter.y\n        xf.p.y -= q.s * localCenter.x + q.c * localCenter.y\n    }\n\n    /**\n     * Advance the sweep forward, yielding a new initial state.\n     *\n     * @param alpha the new initial time.\n     */\n    fun advance(alpha: Float) {\n        assert(alpha0 < 1.0f)\n        // float32 beta = (alpha - alpha0) / (1.0f - alpha0);\n        // c0 += beta * (c - c0);\n        // a0 += beta * (a - a0);\n        // alpha0 = alpha;\n        val beta = (alpha - alpha0) / (1.0f - alpha0)\n        c0.x += beta * (c.x - c0.x)\n        c0.y += beta * (c.y - c0.y)\n        a0 += beta * (a - a0)\n        alpha0 = alpha\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.common\n\nimport org.jbox2d.internal.System_nanoTime\n\n/**\n * Timer for profiling\n *\n * @author Daniel\n */\nclass Timer {\n\n    private var resetNanos: Long = 0\n\n    val milliseconds: Float\n        get() = (System_nanoTime() - resetNanos) / 1000 * 1f / 1000\n\n    init {\n        reset()\n    }\n\n    fun reset() {\n        resetNanos = System_nanoTime()\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.common\n\nimport com.soywiz.korma.geom.*\nimport org.jbox2d.internal.*\n\n// updated to rev 100\n\n/**\n * A transform contains translation and rotation. It is used to represent the position and\n * orientation of rigid frames.\n */\nclass Transform {\n\n    /** The translation caused by the transform  */\n\n    val p: Vec2\n\n    /** A matrix representing a rotation  */\n\n    val q: Rot\n\n    /** The default constructor.  */\n    constructor() {\n        p = Vec2()\n        q = Rot()\n    }\n\n    /** Initialize as a copy of another transform.  */\n    constructor(xf: Transform) {\n        p = xf.p.clone()\n        q = xf.q.clone()\n    }\n\n    /** Initialize using a position vector and a rotation matrix.  */\n    constructor(_position: Vec2, _R: Rot) {\n        p = _position.clone()\n        q = _R.clone()\n    }\n\n    /** Set this to equal another transform.  */\n    fun set(xf: Transform): Transform {\n        p.set(xf.p)\n        q.set(xf.q)\n        return this\n    }\n\n    /**\n     * Set this based on the position and angle.\n     *\n     * @param p\n     * @param angle\n     */\n    fun set(p: Vec2, angle: Angle) = this.setRadians(p, angle.radians.toFloat())\n\n    /**\n     * Set this based on the position and angle in radians.\n     *\n     * @param p\n     * @param angleRadians\n     */\n    fun setRadians(p: Vec2, angleRadians: Float) {\n        this.p.set(p)\n        q.setRadians(angleRadians)\n    }\n\n    /**\n     * Set this based on the position and angle in degrees.\n     *\n     * @param p\n     * @param angle\n     */\n    fun setDegrees(p: Vec2, angleDegrees: Float) = setRadians(p, angleDegrees * MathUtils.DEG2RAD)\n\n    /** Set this to the identity transform.  */\n    fun setIdentity() {\n        p.setZero()\n        q.setIdentity()\n    }\n\n    override fun toString(): String {\n        var s = \"XForm:\\n\"\n        s += \"Position: $p\\n\"\n        s += \"R: \\n$q\\n\"\n        return s\n    }\n\n    companion object {\n\n        fun mul(T: Transform, v: Vec2): Vec2 {\n            return Vec2(T.q.c * v.x - T.q.s * v.y + T.p.x, T.q.s * v.x + T.q.c * v.y + T.p.y)\n        }\n\n\n        fun mulToOut(T: Transform, v: Vec2, out: Vec2) {\n            val tempy = T.q.s * v.x + T.q.c * v.y + T.p.y\n            out.x = T.q.c * v.x - T.q.s * v.y + T.p.x\n            out.y = tempy\n        }\n\n\n        fun mulToOutUnsafe(T: Transform, v: Vec2, out: Vec2) {\n            assert(v !== out)\n            out.x = T.q.c * v.x - T.q.s * v.y + T.p.x\n            out.y = T.q.s * v.x + T.q.c * v.y + T.p.y\n        }\n\n\n        fun mulTrans(T: Transform, v: Vec2): Vec2 {\n            val px = v.x - T.p.x\n            val py = v.y - T.p.y\n            return Vec2(T.q.c * px + T.q.s * py, -T.q.s * px + T.q.c * py)\n        }\n\n\n        fun mulTransToOut(T: Transform, v: Vec2, out: Vec2) {\n            val px = v.x - T.p.x\n            val py = v.y - T.p.y\n            val tempy = -T.q.s * px + T.q.c * py\n            out.x = T.q.c * px + T.q.s * py\n            out.y = tempy\n        }\n\n\n        fun mulTransToOutUnsafe(T: Transform, v: Vec2, out: Vec2) {\n            assert(v !== out)\n            val px = v.x - T.p.x\n            val py = v.y - T.p.y\n            out.x = T.q.c * px + T.q.s * py\n            out.y = -T.q.s * px + T.q.c * py\n        }\n\n\n        fun mul(A: Transform, B: Transform): Transform {\n            val C = Transform()\n            Rot.mulUnsafe(A.q, B.q, C.q)\n            Rot.mulToOutUnsafe(A.q, B.p, C.p)\n            C.p.addLocal(A.p)\n            return C\n        }\n\n\n        fun mulToOut(A: Transform, B: Transform, out: Transform) {\n            assert(out !== A)\n            Rot.mul(A.q, B.q, out.q)\n            Rot.mulToOut(A.q, B.p, out.p)\n            out.p.addLocal(A.p)\n        }\n\n\n        fun mulToOutUnsafe(A: Transform, B: Transform, out: Transform) {\n            assert(out !== B)\n            assert(out !== A)\n            Rot.mulUnsafe(A.q, B.q, out.q)\n            Rot.mulToOutUnsafe(A.q, B.p, out.p)\n            out.p.addLocal(A.p)\n        }\n\n        fun mulTrans(A: Transform, B: Transform, pool: Vec2 = Vec2()): Transform {\n            val C = Transform()\n            Rot.mulTransUnsafe(A.q, B.q, C.q)\n            pool.set(B.p).subLocal(A.p)\n            Rot.mulTransUnsafe(A.q, pool, C.p)\n            return C\n        }\n\n\n        fun mulTransToOut(A: Transform, B: Transform, out: Transform, pool: Vec2 = Vec2()) {\n            assert(out !== A)\n            Rot.mulTrans(A.q, B.q, out.q)\n            pool.set(B.p).subLocal(A.p)\n            Rot.mulTrans(A.q, pool, out.p)\n        }\n\n\n        fun mulTransToOutUnsafe(A: Transform, B: Transform, out: Transform, pool: Vec2 = Vec2()) {\n            assert(out !== A)\n            assert(out !== B)\n            Rot.mulTransUnsafe(A.q, B.q, out.q)\n            pool.set(B.p).subLocal(A.p)\n            Rot.mulTransUnsafe(A.q, pool, out.p)\n        }\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.common\n\nimport org.jbox2d.internal.assert\nimport kotlin.native.concurrent.ThreadLocal\n\n@ThreadLocal\nprivate val __dummy = Vec2()\n\n/**\n * A 2D column vector\n */\ndata class Vec2(\n     var x: Float = 0f,\n     var y: Float = 0f\n) {\n    /** True if the vector represents a pair of valid, non-infinite floating point numbers.  */\n    val isValid: Boolean get() = !x.isNaN() && !x.isInfinite() && !y.isNaN() && !y.isInfinite()\n\n    constructor(toCopy: Vec2) : this(toCopy.x, toCopy.y) {}\n\n    /** Zero out this vector.  */\n    fun setZero() {\n        x = 0.0f\n        y = 0.0f\n    }\n\n    /** Set the vector component-wise.  */\n    fun set(x: Float, y: Float): Vec2 = this.apply {\n        this.x = x\n        this.y = y\n    }\n\n    inline fun set(x: Number, y: Number): Vec2 = set(x.toFloat(), y.toFloat())\n\n    /** Set this vector to another vector.  */\n    fun set(v: Vec2): Vec2 = this.apply {\n        this.x = v.x\n        this.y = v.y\n    }\n\n    /** Return the sum of this vector and another; does not alter either one.  */\n    fun add(v: Vec2): Vec2 = Vec2(x + v.x, y + v.y)\n\n\n    /** Return the difference of this vector and another; does not alter either one.  */\n    fun sub(v: Vec2): Vec2 = Vec2(x - v.x, y - v.y)\n\n    /** Return this vector multiplied by a scalar; does not alter this vector.  */\n    fun mul(a: Float): Vec2 = Vec2(x * a, y * a)\n\n    /** Return the negation of this vector; does not alter this vector.  */\n    fun negate(): Vec2 = Vec2(-x, -y)\n\n    /** Flip the vector and return it - alters this vector.  */\n    fun negateLocal(): Vec2 = this.apply {\n        x = -x\n        y = -y\n    }\n\n    /** Add another vector to this one and returns result - alters this vector.  */\n    fun addLocal(v: Vec2): Vec2 = this.apply {\n        x += v.x\n        y += v.y\n    }\n\n    /** Adds values to this vector and returns result - alters this vector.  */\n    fun addLocal(x: Float, y: Float): Vec2 = this.apply {\n        this.x += x\n        this.y += y\n    }\n\n    inline fun addLocal(x: Number, y: Number): Vec2 = addLocal(x.toFloat(), y.toFloat())\n\n    /** Subtract another vector from this one and return result - alters this vector.  */\n    fun subLocal(v: Vec2): Vec2 = this.apply {\n        x -= v.x\n        y -= v.y\n    }\n\n    /** Multiply this vector by a number and return result - alters this vector.  */\n    fun mulLocal(a: Float): Vec2 = this.apply {\n        x *= a\n        y *= a\n    }\n\n    /** Get the skew vector such that dot(skew_vec, other) == cross(vec, other)  */\n    fun skew(): Vec2 = Vec2(-y, x)\n\n    /** Get the skew vector such that dot(skew_vec, other) == cross(vec, other)  */\n    fun skew(out: Vec2) {\n        out.x = -y\n        out.y = x\n    }\n\n    /** Return the length of this vector.  */\n    fun length(): Float = MathUtils.sqrt(x * x + y * y)\n\n    /** Return the squared length of this vector.  */\n    fun lengthSquared(): Float = x * x + y * y\n\n    /** Normalize this vector and return the length before normalization. Alters this vector.  */\n    fun normalize(): Float {\n        val length = length()\n        if (length < Settings.EPSILON) {\n            return 0f\n        }\n\n        val invLength = 1.0f / length\n        x *= invLength\n        y *= invLength\n        return length\n    }\n\n    /** Return a new vector that has positive components.  */\n    fun abs(): Vec2 = Vec2(MathUtils.abs(x), MathUtils.abs(y))\n\n    fun absLocal() {\n        x = MathUtils.abs(x)\n        y = MathUtils.abs(y)\n    }\n\n    // @Override // annotation omitted for GWT-compatibility\n    /** Return a copy of this vector.  */\n    fun clone(): Vec2 = Vec2(x, y)\n\n    override fun toString(): String = \"($x,$y)\"\n\n    companion object {\n        internal val dummy get() = __dummy\n\n        fun abs(a: Vec2): Vec2 = Vec2(MathUtils.abs(a.x), MathUtils.abs(a.y))\n\n\n        fun absToOut(a: Vec2, out: Vec2) {\n            out.x = MathUtils.abs(a.x)\n            out.y = MathUtils.abs(a.y)\n        }\n\n\n        fun dot(a: Vec2, b: Vec2): Float = a.x * b.x + a.y * b.y\n        fun cross(a: Vec2, b: Vec2): Float = a.x * b.y - a.y * b.x\n        fun cross(a: Vec2, s: Float): Vec2 = Vec2(s * a.y, -s * a.x)\n\n        fun crossToOut(a: Vec2, s: Float, out: Vec2) {\n            val tempy = -s * a.x\n            out.x = s * a.y\n            out.y = tempy\n        }\n\n        fun crossToOutUnsafe(a: Vec2, s: Float, out: Vec2) {\n            assert(out !== a)\n            out.x = s * a.y\n            out.y = -s * a.x\n        }\n\n        fun cross(s: Float, a: Vec2): Vec2 = Vec2(-s * a.y, s * a.x)\n\n        fun crossToOut(s: Float, a: Vec2, out: Vec2) {\n            val tempY = s * a.x\n            out.x = -s * a.y\n            out.y = tempY\n        }\n\n        fun crossToOutUnsafe(s: Float, a: Vec2, out: Vec2) {\n            assert(out !== a)\n            out.x = -s * a.y\n            out.y = s * a.x\n        }\n\n        fun negateToOut(a: Vec2, out: Vec2) {\n            out.x = -a.x\n            out.y = -a.y\n        }\n\n        fun min(a: Vec2, b: Vec2): Vec2 = Vec2(if (a.x < b.x) a.x else b.x, if (a.y < b.y) a.y else b.y)\n        fun max(a: Vec2, b: Vec2): Vec2 = Vec2(if (a.x > b.x) a.x else b.x, if (a.y > b.y) a.y else b.y)\n        fun minToOut(a: Vec2, b: Vec2, out: Vec2) {\n            out.x = if (a.x < b.x) a.x else b.x\n            out.y = if (a.y < b.y) a.y else b.y\n        }\n        fun maxToOut(a: Vec2, b: Vec2, out: Vec2) {\n            out.x = if (a.x > b.x) a.x else b.x\n            out.y = if (a.y > b.y) a.y else b.y\n        }\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.common\n\nimport org.jbox2d.internal.assert\n\n/**\n * @author Daniel Murphy\n */\ndata class Vec3(\n\n    var x: Float = 0.toFloat(),\n\n    var y: Float = 0.toFloat(),\n\n    var z: Float = 0.toFloat()\n) {\n    constructor(copy: Vec3) : this(copy.x, copy.y, copy.z)\n\n    fun set(vec: Vec3): Vec3 {\n        x = vec.x\n        y = vec.y\n        z = vec.z\n        return this\n    }\n\n    fun set(argX: Float, argY: Float, argZ: Float): Vec3 {\n        x = argX\n        y = argY\n        z = argZ\n        return this\n    }\n\n    fun addLocal(argVec: Vec3): Vec3 {\n        x += argVec.x\n        y += argVec.y\n        z += argVec.z\n        return this\n    }\n\n    fun add(argVec: Vec3): Vec3 {\n        return Vec3(x + argVec.x, y + argVec.y, z + argVec.z)\n    }\n\n    fun subLocal(argVec: Vec3): Vec3 {\n        x -= argVec.x\n        y -= argVec.y\n        z -= argVec.z\n        return this\n    }\n\n    fun sub(argVec: Vec3): Vec3 {\n        return Vec3(x - argVec.x, y - argVec.y, z - argVec.z)\n    }\n\n    fun mulLocal(argScalar: Float): Vec3 {\n        x *= argScalar\n        y *= argScalar\n        z *= argScalar\n        return this\n    }\n\n    fun mul(argScalar: Float): Vec3 {\n        return Vec3(x * argScalar, y * argScalar, z * argScalar)\n    }\n\n    fun negate(): Vec3 {\n        return Vec3(-x, -y, -z)\n    }\n\n    fun negateLocal(): Vec3 {\n        x = -x\n        y = -y\n        z = -z\n        return this\n    }\n\n    fun setZero() {\n        x = 0f\n        y = 0f\n        z = 0f\n    }\n\n    fun clone(): Vec3 {\n        return Vec3(this)\n    }\n\n    override fun toString(): String {\n        return \"($x,$y,$z)\"\n    }\n\n    companion object {\n        fun dot(a: Vec3, b: Vec3): Float {\n            return a.x * b.x + a.y * b.y + a.z * b.z\n        }\n\n        fun cross(a: Vec3, b: Vec3): Vec3 {\n            return Vec3(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x)\n        }\n\n        fun crossToOut(a: Vec3, b: Vec3, out: Vec3) {\n            val tempy = a.z * b.x - a.x * b.z\n            val tempz = a.x * b.y - a.y * b.x\n            out.x = a.y * b.z - a.z * b.y\n            out.y = tempy\n            out.z = tempz\n        }\n\n        fun crossToOutUnsafe(a: Vec3, b: Vec3, out: Vec3) {\n            assert(out !== b)\n            assert(out !== a)\n            out.x = a.y * b.z - a.z * b.y\n            out.y = a.z * b.x - a.x * b.z\n            out.z = a.x * b.y - a.y * b.x\n        }\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics\n\nimport com.soywiz.korma.geom.*\nimport org.jbox2d.collision.shapes.MassData\nimport org.jbox2d.collision.shapes.Shape\nimport org.jbox2d.common.MathUtils\nimport org.jbox2d.common.Rot\nimport org.jbox2d.common.Sweep\nimport org.jbox2d.common.Transform\nimport org.jbox2d.common.Vec2\nimport org.jbox2d.dynamics.contacts.ContactEdge\nimport org.jbox2d.dynamics.joints.JointEdge\nimport org.jbox2d.internal.*\nimport org.jbox2d.userdata.*\n\n/**\n * A rigid body. These are created via World.createBody.\n *\n * @author Daniel Murphy\n */\nclass Body(bd: BodyDef, var world: World) : Box2dTypedUserData by Box2dTypedUserData.Mixin() {\n    fun destroyBody() {\n        world.destroyBody(this)\n    }\n\n    val bodyDef = bd\n    var didReset = true\n\n    class ViewInfo {\n        var view: Any? = null\n        var x: Double = 0.0\n        var y: Double = 0.0\n        var rotation: Angle = 0.degrees\n        var onStage = false\n    }\n\n    val viewInfo = ViewInfo()\n\n    var _type: BodyType\n\n\n    var flags: Int = 0\n\n\n    var islandIndex: Int = 0\n\n    /**\n     * The body origin transform.\n     */\n    val xf = Transform()\n    val transform: Transform get() = xf\n\n    /**\n     * The previous transform for particle simulation\n     */\n    val xf0 = Transform()\n\n    /**\n     * The swept motion for CCD\n     */\n\n    val sweep = Sweep()\n\n\n    val _linearVelocity = Vec2()\n\n    var _angularVelocity = 0f\n\n\n    val force = Vec2()\n\n    var torque = 0f\n\n    var prev: Body? = null\n\n    /** Get the next body in the world's body list.  */\n\n    var m_next: Body? = null\n\n    fun getNext() = m_next\n\n    /** Get the list of all fixtures attached to this body.  */\n\n    var m_fixtureList: Fixture? = null\n\n    fun getFixtureList() = m_fixtureList\n\n\n    var m_fixtureCount: Int = 0\n\n    /** Get the list of all joints attached to this body.  */\n\n    var m_jointList: JointEdge? = null\n\n    /**\n     * Get the list of all contacts attached to this body.\n     *\n     * @warning this list changes during the time step and you may miss some collisions if you don't\n     * use ContactListener.\n     */\n\n    var m_contactList: ContactEdge? = null\n\n    fun getContactList() = m_contactList\n\n    /**\n     * Get the total mass of the body.\n     *\n     * @return the mass, usually in kilograms (kg).\n     */\n\n    var m_mass: Float = 0.toFloat()\n\n    fun getMass() = m_mass\n\n\n    var m_invMass: Float = 0.toFloat()\n\n    // Rotational inertia about the center of mass.\n\n    var m_I: Float = 0.toFloat()\n\n    var m_invI: Float = 0.toFloat()\n\n    /** Get the linear damping of the body.  */\n    /** Set the linear damping of the body.  */\n\n    var m_linearDamping: Float = 0.toFloat()\n    /** Get the angular damping of the body.  */\n    /** Set the angular damping of the body.  */\n\n    var m_angularDamping: Float = 0.toFloat()\n    /**\n     * Get the gravity scale of the body.\n     *\n     * @return\n     */\n    /**\n     * Set the gravity scale of the body.\n     *\n     * @param gravityScale\n     */\n\n    var gravityScale: Float = 0.toFloat()\n\n    var m_sleepTime: Float = 0.toFloat()\n\n    /** Get the user data pointer that was provided in the body definition.  */\n    /**\n     * Set the user data. Use this to store your application specific data.\n     */\n    var userData: Any? = null\n\n    private val fixDef = FixtureDef()\n\n    /**\n     * Get the world body origin position. Do not modify.\n     *\n     * @return the world position of the body's origin.\n     */\n    val position: Vec2\n        get() = xf.p\n\n    /**\n     * Get the angle in radians.\n     *\n     * @return the current world rotation angle in radians.\n     */\n    var angleRadians: Float\n        get() = sweep.a\n        // @TODO: Check this is possible\n        set(value) {\n            sweep.a = value\n        }\n\n    var angle: Angle\n        get() = angleRadians.radians\n        set(value) {\n            angleRadians = value.radians.toFloat()\n        }\n\n    /**\n     * Get the angle in degrees.\n     *\n     * @return the current world rotation angle in degrees.\n     */\n    var angleDegrees: Float\n        get() = angle.degrees.toFloat()\n        set(value) {\n            angle = value.degrees\n        }\n\n\n    /**\n     * Get the world position of the center of mass. Do not modify.\n     */\n    val worldCenter: Vec2\n        get() = sweep.c\n\n    /**\n     * Get the local position of the center of mass. Do not modify.\n     */\n    val localCenter: Vec2\n        get() = sweep.localCenter\n\n    /**\n     * Get the linear velocity of the center of mass. Do not modify, instead use\n     * [.setLinearVelocity].\n     *\n     * @return the linear velocity of the center of mass.\n     */\n    /**\n     * Set the linear velocity of the center of mass.\n     *\n     * @param v the new linear velocity of the center of mass.\n     */\n    var linearVelocity: Vec2\n        get() = _linearVelocity\n        set(v) {\n            if (_type === BodyType.STATIC) {\n                return\n            }\n\n            if (Vec2.dot(v, v) > 0.0f) {\n                isAwake = true\n            }\n\n            _linearVelocity.set(v)\n        }\n\n    var linearVelocityX: Float\n        get() = linearVelocity.x\n        set(v) {\n            linearVelocity = linearVelocity.set(v, linearVelocity.y)\n        }\n\n    var linearVelocityY: Float\n        get() = linearVelocity.y\n        set(v) {\n            linearVelocity = linearVelocity.set(linearVelocity.x, v)\n        }\n\n    /**\n     * Get the angular velocity.\n     *\n     * @return the angular velocity in radians/second.\n     */\n    /**\n     * Set the angular velocity.\n     *\n     * @param omega the new angular velocity in radians/second.\n     */\n    var angularVelocity: Float\n        get() = _angularVelocity\n        set(w) {\n            if (_type === BodyType.STATIC) {\n                return\n            }\n\n            if (w * w > 0f) {\n                isAwake = true\n            }\n\n            _angularVelocity = w\n        }\n\n    /**\n     * Get the central rotational inertia of the body.\n     *\n     * @return the rotational inertia, usually in kg-m^2.\n     */\n    val inertia: Float\n        get() = m_I + m_mass * (sweep.localCenter.x * sweep.localCenter.x + sweep.localCenter.y * sweep.localCenter.y)\n\n    private val pmd = MassData()\n\n    /**\n     * Set the type of this body. This may alter the mass and velocity.\n     *\n     * @param type\n     */\n    // Delete the attached contacts.\n    // Touch the proxies so that new contacts will be created (when appropriate)\n    var type: BodyType\n        get() = _type\n        set(type) {\n            assert(!world.isLocked)\n            if (world.isLocked) {\n                return\n            }\n\n            if (_type === type) {\n                return\n            }\n\n            _type = type\n\n            resetMassData()\n\n            if (_type === BodyType.STATIC) {\n                _linearVelocity.setZero()\n                _angularVelocity = 0.0f\n                sweep.a0 = sweep.a\n                sweep.c0.set(sweep.c)\n                synchronizeFixtures()\n            }\n\n            isAwake = true\n\n            force.setZero()\n            torque = 0.0f\n            var ce = m_contactList\n            while (ce != null) {\n                val ce0 = ce\n                ce = ce.next\n                world.m_contactManager.destroy(ce0.contact!!)\n            }\n            m_contactList = null\n            val broadPhase = world.m_contactManager.m_broadPhase\n            var f = m_fixtureList\n            while (f != null) {\n                val proxyCount = f.m_proxyCount\n                for (i in 0 until proxyCount) {\n                    broadPhase.touchProxy(f.m_proxies!![i].proxyId)\n                }\n                f = f.m_next\n            }\n        }\n\n    /** Is this body treated like a bullet for continuous collision detection?  */\n    /** Should this body be treated like a bullet for continuous collision detection?  */\n    var isBullet: Boolean\n        get() = flags and e_bulletFlag == e_bulletFlag\n        set(flag) = if (flag) {\n            flags = flags or e_bulletFlag\n        } else {\n            flags = flags and e_bulletFlag.inv()\n        }\n\n    /**\n     * Is this body allowed to sleep\n     *\n     * @return\n     */\n    /**\n     * You can disable sleeping on this body. If you disable sleeping, the body will be woken.\n     *\n     * @param flag\n     */\n    var isSleepingAllowed: Boolean\n        get() = flags and e_autoSleepFlag == e_autoSleepFlag\n        set(flag) = if (flag) {\n            flags = flags or e_autoSleepFlag\n        } else {\n            flags = flags and e_autoSleepFlag.inv()\n            isAwake = true\n        }\n\n    /**\n     * Get the sleeping state of this body.\n     *\n     * @return true if the body is awake.\n     */\n    /**\n     * Set the sleep state of the body. A sleeping body has very low CPU cost.\n     *\n     * @param flag set to true to put body to sleep, false to wake it.\n     * @param flag\n     */\n    var isAwake: Boolean\n        get() = flags and e_awakeFlag == e_awakeFlag\n        set(flag) {\n            if (flag) {\n                if (flags and e_awakeFlag == 0) {\n                    flags = flags or e_awakeFlag\n                    m_sleepTime = 0.0f\n                }\n            } else {\n                flags = flags and e_awakeFlag.inv()\n                m_sleepTime = 0.0f\n                _linearVelocity.setZero()\n                _angularVelocity = 0.0f\n                force.setZero()\n                torque = 0.0f\n            }\n        }\n\n    /**\n     * Get the active state of the body.\n     *\n     * @return\n     */\n    /**\n     * Set the active state of the body. An inactive body is not simulated and cannot be collided with\n     * or woken up. If you pass a flag of true, all fixtures will be added to the broad-phase. If you\n     * pass a flag of false, all fixtures will be removed from the broad-phase and all contacts will\n     * be destroyed. Fixtures and joints are otherwise unaffected. You may continue to create/destroy\n     * fixtures and joints on inactive bodies. Fixtures on an inactive body are implicitly inactive\n     * and will not participate in collisions, ray-casts, or queries. Joints connected to an inactive\n     * body are implicitly inactive. An inactive body is still owned by a World object and remains in\n     * the body list.\n     *\n     * @param flag\n     */\n    // Create all proxies.\n    // Contacts are created the next time step.\n    // Destroy all proxies.\n    // Destroy the attached contacts.\n    var isActive: Boolean\n        get() = flags and e_activeFlag == e_activeFlag\n        set(flag) {\n            assert(!world.isLocked)\n\n            if (flag == isActive) {\n                return\n            }\n\n            if (flag) {\n                flags = flags or e_activeFlag\n                val broadPhase = world.m_contactManager.m_broadPhase\n                var f = m_fixtureList\n                while (f != null) {\n                    f.createProxies(broadPhase, xf)\n                    f = f.m_next\n                }\n            } else {\n                flags = flags and e_activeFlag.inv()\n                val broadPhase = world.m_contactManager.m_broadPhase\n                var f = m_fixtureList\n                while (f != null) {\n                    f.destroyProxies(broadPhase)\n                    f = f.m_next\n                }\n                var ce = m_contactList\n                while (ce != null) {\n                    val ce0 = ce\n                    ce = ce.next\n                    world.m_contactManager.destroy(ce0.contact!!)\n                }\n                m_contactList = null\n            }\n        }\n\n    /**\n     * Does this body have fixed rotation?\n     *\n     * @return\n     */\n    /**\n     * Set this body to have fixed rotation. This causes the mass to be reset.\n     *\n     * @param flag\n     */\n    var isFixedRotation: Boolean\n        get() = flags and e_fixedRotationFlag == e_fixedRotationFlag\n        set(flag) {\n            if (flag) {\n                flags = flags or e_fixedRotationFlag\n            } else {\n                flags = flags and e_fixedRotationFlag.inv()\n            }\n\n            resetMassData()\n        }\n\n    // djm pooling\n    private val pxf = Transform()\n\n\n    init {\n        assert(bd.position.isValid)\n        assert(bd.linearVelocity.isValid)\n        assert(bd.gravityScale >= 0.0f)\n        assert(bd.angularDamping >= 0.0f)\n        assert(bd.linearDamping >= 0.0f)\n\n        flags = 0\n\n        if (bd.bullet) {\n            flags = flags or e_bulletFlag\n        }\n        if (bd.fixedRotation) {\n            flags = flags or e_fixedRotationFlag\n        }\n        if (bd.allowSleep) {\n            flags = flags or e_autoSleepFlag\n        }\n        if (bd.awake) {\n            flags = flags or e_awakeFlag\n        }\n        if (bd.active) {\n            flags = flags or e_activeFlag\n        }\n\n        xf.p.set(bd.position)\n        xf.q.setRadians(bd.angleRadians)\n\n        sweep.localCenter.setZero()\n        sweep.c0.set(xf.p)\n        sweep.c.set(xf.p)\n        sweep.a0 = bd.angleRadians\n        sweep.a = bd.angleRadians\n        sweep.alpha0 = 0.0f\n\n        m_jointList = null\n        m_contactList = null\n        prev = null\n        m_next = null\n\n        _linearVelocity.set(bd.linearVelocity)\n        _angularVelocity = bd.angularVelocity\n\n        m_linearDamping = bd.linearDamping\n        m_angularDamping = bd.angularDamping\n        gravityScale = bd.gravityScale\n\n        force.setZero()\n        torque = 0.0f\n\n        m_sleepTime = 0.0f\n\n        _type = bd.type\n\n        if (_type === BodyType.DYNAMIC) {\n            m_mass = 1f\n            m_invMass = 1f\n        } else {\n            m_mass = 0f\n            m_invMass = 0f\n        }\n\n        m_I = 0.0f\n        m_invI = 0.0f\n\n        userData = bd.userData\n\n        m_fixtureList = null\n        m_fixtureCount = 0\n    }\n\n    /**\n     * Creates a fixture and attach it to this body. Use this function if you need to set some fixture\n     * parameters, like friction. Otherwise you can create the fixture directly from a shape. If the\n     * density is non-zero, this function automatically updates the mass of the body. Contacts are not\n     * created until the next time step.\n     *\n     * @param def the fixture definition.\n     * @warning This function is locked during callbacks.\n     */\n    fun createFixture(def: FixtureDef): Fixture? {\n        assert(!world.isLocked)\n\n        if (world.isLocked) {\n            return null\n        }\n\n        val fixture = Fixture()\n        fixture.create(this, def)\n\n        if (flags and e_activeFlag == e_activeFlag) {\n            val broadPhase = world.m_contactManager.m_broadPhase\n            fixture.createProxies(broadPhase, xf)\n        }\n\n        fixture.m_next = m_fixtureList\n        m_fixtureList = fixture\n        ++m_fixtureCount\n\n        fixture.m_body = this\n\n        // Adjust mass properties if needed.\n        if (fixture.m_density > 0.0f) {\n            resetMassData()\n        }\n\n        // Let the world know we have a new fixture. This will cause new contacts\n        // to be created at the beginning of the next time step.\n        world.m_flags = world.m_flags or World.NEW_FIXTURE\n\n        return fixture\n    }\n\n    /**\n     * Creates a fixture from a shape and attach it to this body. This is a convenience function. Use\n     * FixtureDef if you need to set parameters like friction, restitution, user data, or filtering.\n     * If the density is non-zero, this function automatically updates the mass of the body.\n     *\n     * @param shape the shape to be cloned.\n     * @param density the shape density (set to zero for static bodies).\n     * @warning This function is locked during callbacks.\n     */\n    fun createFixture(shape: Shape, density: Float): Fixture? {\n        fixDef.shape = shape\n        fixDef.density = density\n\n        return createFixture(fixDef)\n    }\n\n    /**\n     * Destroy a fixture. This removes the fixture from the broad-phase and destroys all contacts\n     * associated with this fixture. This will automatically adjust the mass of the body if the body\n     * is dynamic and the fixture has positive density. All fixtures attached to a body are implicitly\n     * destroyed when the body is destroyed.\n     *\n     * @param fixture the fixture to be removed.\n     * @warning This function is locked during callbacks.\n     */\n    fun destroyFixture(fixture: Fixture?) {\n        var fixture = fixture\n        assert(!world.isLocked)\n        if (world.isLocked) {\n            return\n        }\n\n        assert(fixture!!.m_body === this)\n\n        // Remove the fixture from this body's singly linked list.\n        assert(m_fixtureCount > 0)\n        var node = m_fixtureList\n        var last: Fixture? = null // java change\n        var found = false\n        while (node != null) {\n            if (node === fixture) {\n                node = fixture.m_next\n                found = true\n                break\n            }\n            last = node\n            node = node.m_next\n        }\n\n        // You tried to remove a shape that is not attached to this body.\n        assert(found)\n\n        // java change, remove it from the list\n        if (last == null) {\n            m_fixtureList = fixture!!.m_next\n        } else {\n            last.m_next = fixture!!.m_next\n        }\n\n        // Destroy any contacts associated with the fixture.\n        var edge = m_contactList\n        while (edge != null) {\n            val c = edge.contact\n            edge = edge.next\n\n            val fixtureA = c!!.getFixtureA()\n            val fixtureB = c.getFixtureB()\n\n            if (fixture === fixtureA || fixture === fixtureB) {\n                // This destroys the contact and removes it from\n                // this body's contact list.\n                world.m_contactManager.destroy(c)\n            }\n        }\n\n        if (flags and e_activeFlag == e_activeFlag) {\n            val broadPhase = world.m_contactManager.m_broadPhase\n            fixture.destroyProxies(broadPhase)\n        }\n\n        fixture.destroy()\n        fixture.m_body = null\n        fixture.m_next = null\n        fixture = null\n\n        --m_fixtureCount\n\n        // Reset the mass data.\n        resetMassData()\n    }\n\n    /**\n     * Set the position of the body's origin and rotation. This breaks any contacts and wakes the\n     * other bodies. Manipulating a body's transform may cause non-physical behavior. Note: contacts\n     * are updated on the next call to World.step().\n     *\n     * @param position the world position of the body's local origin.\n     * @param angleRadians the world rotation in radians.\n     */\n    fun setTransformRadians(position: Vec2, angleRadians: Float) {\n        require(position.isValid) { \"Invalid position $position\" }\n        require(angleRadians.isFinite()) { \"Invalid angleRadians $angleRadians\" }\n\n        assert(!world.isLocked)\n        if (world.isLocked) {\n            return\n        }\n\n        xf.q.setRadians(angleRadians)\n        xf.p.set(position)\n\n        // m_sweep.c0 = m_sweep.c = Mul(m_xf, m_sweep.localCenter);\n        Transform.mulToOutUnsafe(xf, sweep.localCenter, sweep.c)\n        sweep.a = angleRadians\n\n        sweep.c0.set(sweep.c)\n        sweep.a0 = sweep.a\n\n        val broadPhase = world.m_contactManager.m_broadPhase\n        var f = m_fixtureList\n        while (f != null) {\n            f.synchronize(broadPhase, xf, xf)\n            f = f.m_next\n        }\n    }\n\n    /**\n     * Set the position of the body's origin and rotation. This breaks any contacts and wakes the\n     * other bodies. Manipulating a body's transform may cause non-physical behavior. Note: contacts\n     * are updated on the next call to World.step().\n     *\n     * @param position the world position of the body's local origin.\n     * @param angleDegrees the world rotation in degrees.\n     */\n    fun setTransformDegrees(position: Vec2, angleDegrees: Float) = setTransformRadians(position, angleDegrees * MathUtils.DEG2RAD)\n\n    /**\n     * Set the position of the body's origin and rotation. This breaks any contacts and wakes the\n     * other bodies. Manipulating a body's transform may cause non-physical behavior. Note: contacts\n     * are updated on the next call to World.step().\n     *\n     * @param position the world position of the body's local origin.\n     * @param angle the world rotation.\n     */\n    fun setTransform(position: Vec2, angle: Angle) = setTransformRadians(position, angle.radians.toFloat())\n\n    /**\n     * Apply a force at a world point. If the force is not applied at the center of mass, it will\n     * generate a torque and affect the angular velocity. This wakes up the body.\n     *\n     * @param force the world force vector, usually in Newtons (N).\n     * @param point the world position of the point of application.\n     */\n    fun applyForce(force: Vec2, point: Vec2) {\n        require(force.isValid) { \"Invalid force $force\" }\n        require(point.isValid) { \"Invalid point $point\" }\n        if (_type !== BodyType.DYNAMIC) {\n            return\n        }\n\n        if (!isAwake) {\n            isAwake = true\n        }\n\n        // m_force.addLocal(force);\n        // Vec2 temp = tltemp.get();\n        // temp.set(point).subLocal(m_sweep.c);\n        // m_torque += Vec2.cross(temp, force);\n\n        this.force.x += force.x\n        this.force.y += force.y\n\n        torque += (point.x - sweep.c.x) * force.y - (point.y - sweep.c.y) * force.x\n    }\n\n    /**\n     * Apply a force to the center of mass. This wakes up the body.\n     *\n     * @param force the world force vector, usually in Newtons (N).\n     */\n    fun applyForceToCenter(force: Vec2) {\n        require(force.isValid) { \"Invalid force $force\" }\n        if (_type !== BodyType.DYNAMIC) {\n            return\n        }\n\n        if (!isAwake) {\n            isAwake = true\n        }\n\n        this.force.x += force.x\n        this.force.y += force.y\n    }\n\n    /**\n     * Apply a torque. This affects the angular velocity without affecting the linear velocity of the\n     * center of mass. This wakes up the body.\n     *\n     * @param torque about the z-axis (out of the screen), usually in N-m.\n     */\n    fun applyTorque(torque: Float) {\n        require(torque.isFinite()) { \"Invalid torque $torque\" }\n        if (_type !== BodyType.DYNAMIC) {\n            return\n        }\n\n        if (!isAwake) {\n            isAwake = true\n        }\n\n        this.torque += torque\n    }\n\n    /**\n     * Apply an impulse at a point. This immediately modifies the velocity. It also modifies the\n     * angular velocity if the point of application is not at the center of mass. This wakes up the\n     * body if 'wake' is set to true. If the body is sleeping and 'wake' is false, then there is no\n     * effect.\n     *\n     * @param impulse the world impulse vector, usually in N-seconds or kg-m/s.\n     * @param point the world position of the point of application.\n     * @param wake also wake up the body\n     */\n    fun applyLinearImpulse(impulse: Vec2, point: Vec2, wake: Boolean) {\n        require(point.isValid) { \"Invalid point $point\" }\n        require(impulse.isValid) { \"Invalid impulse $impulse\" }\n        if (_type !== BodyType.DYNAMIC) {\n            return\n        }\n\n        if (!isAwake) {\n            if (wake) {\n                isAwake = true\n            } else {\n                return\n            }\n        }\n\n        _linearVelocity.x += impulse.x * m_invMass\n        _linearVelocity.y += impulse.y * m_invMass\n\n        _angularVelocity += m_invI * ((point.x - sweep.c.x) * impulse.y - (point.y - sweep.c.y) * impulse.x)\n    }\n\n    /**\n     * Apply an angular impulse.\n     *\n     * @param impulse the angular impulse in units of kg*m*m/s\n     */\n    fun applyAngularImpulse(impulse: Float) {\n        require(impulse.isFinite()) { \"Invalid impulse $impulse\" }\n        if (_type !== BodyType.DYNAMIC) {\n            return\n        }\n\n        if (!isAwake) {\n            isAwake = true\n        }\n        _angularVelocity += m_invI * impulse\n    }\n\n    /**\n     * Get the mass data of the body. The rotational inertia is relative to the center of mass.\n     *\n     * @return a struct containing the mass, inertia and center of the body.\n     */\n    fun getMassData(data: MassData) {\n        // data.mass = m_mass;\n        // data.I = m_I + m_mass * Vec2.dot(m_sweep.localCenter, m_sweep.localCenter);\n        // data.center.set(m_sweep.localCenter);\n\n        data.mass = m_mass\n        data.I = m_I + m_mass * (sweep.localCenter.x * sweep.localCenter.x + sweep.localCenter.y * sweep.localCenter.y)\n        data.center.x = sweep.localCenter.x\n        data.center.y = sweep.localCenter.y\n    }\n\n    /**\n     * Set the mass properties to override the mass properties of the fixtures. Note that this changes\n     * the center of mass position. Note that creating or destroying fixtures can also alter the mass.\n     * This function has no effect if the body isn't dynamic.\n     *\n     * @param massData the mass properties.\n     */\n    fun setMassData(massData: MassData) {\n        // TODO_ERIN adjust linear velocity and torque to account for movement of center.\n        assert(!world.isLocked)\n        if (world.isLocked) {\n            return\n        }\n\n        if (_type !== BodyType.DYNAMIC) {\n            return\n        }\n\n        m_invMass = 0.0f\n        m_I = 0.0f\n        m_invI = 0.0f\n\n        m_mass = massData.mass\n        if (m_mass <= 0.0f) {\n            m_mass = 1f\n        }\n\n        m_invMass = 1.0f / m_mass\n\n        if (massData.I > 0.0f && flags and e_fixedRotationFlag == 0) {\n            m_I = massData.I - m_mass * Vec2.dot(massData.center, massData.center)\n            assert(m_I > 0.0f)\n            m_invI = 1.0f / m_I\n        }\n\n        val oldCenter = world.pool.popVec2()\n        // Move center of mass.\n        oldCenter.set(sweep.c)\n        sweep.localCenter.set(massData.center)\n        // m_sweep.c0 = m_sweep.c = Mul(m_xf, m_sweep.localCenter);\n        Transform.mulToOutUnsafe(xf, sweep.localCenter, sweep.c0)\n        sweep.c.set(sweep.c0)\n\n        // Update center of mass velocity.\n        // m_linearVelocity += Cross(m_angularVelocity, m_sweep.c - oldCenter);\n        val temp = world.pool.popVec2()\n        temp.set(sweep.c).subLocal(oldCenter)\n        Vec2.crossToOut(_angularVelocity, temp, temp)\n        _linearVelocity.addLocal(temp)\n\n        world.pool.pushVec2(2)\n    }\n\n    /**\n     * This resets the mass properties to the sum of the mass properties of the fixtures. This\n     * normally does not need to be called unless you called setMassData to override the mass and you\n     * later want to reset the mass.\n     */\n    fun resetMassData() {\n        // Compute mass data from shapes. Each shape has its own density.\n        m_mass = 0.0f\n        m_invMass = 0.0f\n        m_I = 0.0f\n        m_invI = 0.0f\n        sweep.localCenter.setZero()\n\n        // Static and kinematic bodies have zero mass.\n        if (_type === BodyType.STATIC || _type === BodyType.KINEMATIC) {\n            // m_sweep.c0 = m_sweep.c = m_xf.position;\n            sweep.c0.set(xf.p)\n            sweep.c.set(xf.p)\n            sweep.a0 = sweep.a\n            return\n        }\n\n        assert(_type === BodyType.DYNAMIC)\n\n        // Accumulate mass over all fixtures.\n        val localCenter = world.pool.popVec2()\n        localCenter.setZero()\n        val temp = world.pool.popVec2()\n        val massData = pmd\n        var f = m_fixtureList\n        while (f != null) {\n            if (f.m_density == 0.0f) {\n                f = f.m_next\n                continue\n            }\n            f.getMassData(massData)\n            m_mass += massData.mass\n            // center += massData.mass * massData.center;\n            temp.set(massData.center).mulLocal(massData.mass)\n            localCenter.addLocal(temp)\n            m_I += massData.I\n            f = f.m_next\n        }\n\n        // Compute center of mass.\n        if (m_mass > 0.0f) {\n            m_invMass = 1.0f / m_mass\n            localCenter.mulLocal(m_invMass)\n        } else {\n            // Force all dynamic bodies to have a positive mass.\n            m_mass = 1.0f\n            m_invMass = 1.0f\n        }\n\n        if (m_I > 0.0f && flags and e_fixedRotationFlag == 0) {\n            // Center the inertia about the center of mass.\n            m_I -= m_mass * Vec2.dot(localCenter, localCenter)\n            assert(m_I > 0.0f)\n            m_invI = 1.0f / m_I\n        } else {\n            m_I = 0.0f\n            m_invI = 0.0f\n        }\n\n        val oldCenter = world.pool.popVec2()\n        // Move center of mass.\n        oldCenter.set(sweep.c)\n        sweep.localCenter.set(localCenter)\n        // m_sweep.c0 = m_sweep.c = Mul(m_xf, m_sweep.localCenter);\n        Transform.mulToOutUnsafe(xf, sweep.localCenter, sweep.c0)\n        sweep.c.set(sweep.c0)\n\n        // Update center of mass velocity.\n        // m_linearVelocity += Cross(m_angularVelocity, m_sweep.c - oldCenter);\n        temp.set(sweep.c).subLocal(oldCenter)\n\n        val temp2 = oldCenter\n        Vec2.crossToOutUnsafe(_angularVelocity, temp, temp2)\n        _linearVelocity.addLocal(temp2)\n\n        world.pool.pushVec2(3)\n    }\n\n    /**\n     * Get the world coordinates of a point given the local coordinates.\n     *\n     * @param localPoint a point on the body measured relative the the body's origin.\n     * @return the same point expressed in world coordinates.\n     */\n    fun getWorldPoint(localPoint: Vec2): Vec2 {\n        val v = Vec2()\n        getWorldPointToOut(localPoint, v)\n        return v\n    }\n\n    fun getWorldPointToOut(localPoint: Vec2, out: Vec2) {\n        Transform.mulToOut(xf, localPoint, out)\n    }\n\n    /**\n     * Get the world coordinates of a vector given the local coordinates.\n     *\n     * @param localVector a vector fixed in the body.\n     * @return the same vector expressed in world coordinates.\n     */\n    fun getWorldVector(localVector: Vec2): Vec2 {\n        val out = Vec2()\n        getWorldVectorToOut(localVector, out)\n        return out\n    }\n\n    fun getWorldVectorToOut(localVector: Vec2, out: Vec2) {\n        Rot.mulToOut(xf.q, localVector, out)\n    }\n\n    fun getWorldVectorToOutUnsafe(localVector: Vec2, out: Vec2) {\n        Rot.mulToOutUnsafe(xf.q, localVector, out)\n    }\n\n    /**\n     * Gets a local point relative to the body's origin given a world point.\n     *\n     * @param a point in world coordinates.\n     * @return the corresponding local point relative to the body's origin.\n     */\n    fun getLocalPoint(worldPoint: Vec2): Vec2 {\n        val out = Vec2()\n        getLocalPointToOut(worldPoint, out)\n        return out\n    }\n\n    fun getLocalPointToOut(worldPoint: Vec2, out: Vec2) {\n        Transform.mulTransToOut(xf, worldPoint, out)\n    }\n\n    /**\n     * Gets a local vector given a world vector.\n     *\n     * @param a vector in world coordinates.\n     * @return the corresponding local vector.\n     */\n    fun getLocalVector(worldVector: Vec2): Vec2 {\n        val out = Vec2()\n        getLocalVectorToOut(worldVector, out)\n        return out\n    }\n\n    fun getLocalVectorToOut(worldVector: Vec2, out: Vec2) {\n        Rot.mulTrans(xf.q, worldVector, out)\n    }\n\n    fun getLocalVectorToOutUnsafe(worldVector: Vec2, out: Vec2) {\n        Rot.mulTransUnsafe(xf.q, worldVector, out)\n    }\n\n    /**\n     * Get the world linear velocity of a world point attached to this body.\n     *\n     * @param a point in world coordinates.\n     * @return the world velocity of a point.\n     */\n    fun getLinearVelocityFromWorldPoint(worldPoint: Vec2): Vec2 {\n        val out = Vec2()\n        getLinearVelocityFromWorldPointToOut(worldPoint, out)\n        return out\n    }\n\n    fun getLinearVelocityFromWorldPointToOut(worldPoint: Vec2, out: Vec2) {\n        val tempX = worldPoint.x - sweep.c.x\n        val tempY = worldPoint.y - sweep.c.y\n        out.x = -_angularVelocity * tempY + _linearVelocity.x\n        out.y = _angularVelocity * tempX + _linearVelocity.y\n    }\n\n    /**\n     * Get the world velocity of a local point.\n     *\n     * @param a point in local coordinates.\n     * @return the world velocity of a point.\n     */\n    fun getLinearVelocityFromLocalPoint(localPoint: Vec2): Vec2 {\n        val out = Vec2()\n        getLinearVelocityFromLocalPointToOut(localPoint, out)\n        return out\n    }\n\n    fun getLinearVelocityFromLocalPointToOut(localPoint: Vec2, out: Vec2) {\n        getWorldPointToOut(localPoint, out)\n        getLinearVelocityFromWorldPointToOut(out, out)\n    }\n\n    fun synchronizeFixtures() {\n        val xf1 = pxf\n        // xf1.position = m_sweep.c0 - Mul(xf1.R, m_sweep.localCenter);\n\n        // xf1.q.set(m_sweep.a0);\n        // Rot.mulToOutUnsafe(xf1.q, m_sweep.localCenter, xf1.p);\n        // xf1.p.mulLocal(-1).addLocal(m_sweep.c0);\n        // inlined:\n        xf1.q.s = MathUtils.sin(sweep.a0)\n        xf1.q.c = MathUtils.cos(sweep.a0)\n        xf1.p.x = sweep.c0.x - xf1.q.c * sweep.localCenter.x + xf1.q.s * sweep.localCenter.y\n        xf1.p.y = sweep.c0.y - xf1.q.s * sweep.localCenter.x - xf1.q.c * sweep.localCenter.y\n        // end inline\n\n        var f = m_fixtureList\n        while (f != null) {\n            f.synchronize(world.m_contactManager.m_broadPhase, xf1, xf)\n            f = f.m_next\n        }\n    }\n\n    fun synchronizeTransform() {\n        // m_xf.q.set(m_sweep.a);\n        //\n        // // m_xf.position = m_sweep.c - Mul(m_xf.R, m_sweep.localCenter);\n        // Rot.mulToOutUnsafe(m_xf.q, m_sweep.localCenter, m_xf.p);\n        // m_xf.p.mulLocal(-1).addLocal(m_sweep.c);\n        //\n        xf.q.s = MathUtils.sin(sweep.a)\n        xf.q.c = MathUtils.cos(sweep.a)\n        val q = xf.q\n        val v = sweep.localCenter\n        xf.p.x = sweep.c.x - q.c * v.x + q.s * v.y\n        xf.p.y = sweep.c.y - q.s * v.x - q.c * v.y\n    }\n\n    /**\n     * This is used to prevent connected bodies from colliding. It may lie, depending on the\n     * collideConnected flag.\n     *\n     * @param other\n     * @return\n     */\n    fun shouldCollide(other: Body): Boolean {\n        // At least one body should be dynamic.\n        if (_type !== BodyType.DYNAMIC && other._type !== BodyType.DYNAMIC) {\n            return false\n        }\n\n        // Does a joint prevent collision?\n        var jn = m_jointList\n        while (jn != null) {\n            if (jn.other === other) {\n                if (!jn.joint!!.getCollideConnected()) {\n                    return false\n                }\n            }\n            jn = jn.next\n        }\n\n        return true\n    }\n\n    fun advance(t: Float) {\n        // Advance to the new safe time. This doesn't sync the broad-phase.\n        sweep.advance(t)\n        sweep.c.set(sweep.c0)\n        sweep.a = sweep.a0\n        xf.q.setRadians(sweep.a)\n        // m_xf.position = m_sweep.c - Mul(m_xf.R, m_sweep.localCenter);\n        Rot.mulToOutUnsafe(xf.q, sweep.localCenter, xf.p)\n        xf.p.mulLocal(-1f).addLocal(sweep.c)\n    }\n\n    companion object {\n\n        val e_islandFlag = 0x0001\n\n        val e_awakeFlag = 0x0002\n\n        val e_autoSleepFlag = 0x0004\n\n        val e_bulletFlag = 0x0008\n\n        val e_fixedRotationFlag = 0x0010\n\n        val e_activeFlag = 0x0020\n\n        val e_toiFlag = 0x0040\n    }\n}\n\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics\n\nimport com.soywiz.korma.geom.Angle\nimport com.soywiz.korma.geom.radians\nimport org.jbox2d.common.MathUtils\nimport org.jbox2d.common.Vec2\nimport org.jbox2d.userdata.Box2dTypedUserData\n\n/**\n * A body definition holds all the data needed to construct a rigid body. You can safely re-use body\n * definitions. Shapes are added to a body after construction.\n *\n * @author daniel\n */\ndata class BodyDef(\n    /**\n     * The body type: static, kinematic, or dynamic. Note: if a dynamic body would have zero mass, the\n     * mass is set to one.\n     */\n    var type: BodyType = BodyType.STATIC,\n\n    /**\n     * Use this to store application specific body data.\n     */\n    var userData: Any? = null,\n\n    /**\n     * The world position of the body. Avoid creating bodies at the origin since this can lead to many\n     * overlapping shapes.\n     */\n    var position: Vec2 = Vec2(),\n\n    /**\n     * The world angle of the body in radians.\n     */\n    var angleRadians: Float = 0f,\n\n    /**\n     * The linear velocity of the body in world co-ordinates.\n     */\n    var linearVelocity: Vec2 = Vec2(),\n\n    /**\n     * The angular velocity of the body.\n     */\n    var angularVelocity: Float = 0f,\n\n    /**\n     * Linear damping is use to reduce the linear velocity. The damping parameter can be larger than\n     * 1.0f but the damping effect becomes sensitive to the time step when the damping parameter is\n     * large.\n     */\n    var linearDamping: Float = 0f,\n\n    /**\n     * Angular damping is use to reduce the angular velocity. The damping parameter can be larger than\n     * 1.0f but the damping effect becomes sensitive to the time step when the damping parameter is\n     * large.\n     */\n    var angularDamping: Float = 0f,\n\n    /**\n     * Set this flag to false if this body should never fall asleep. Note that this increases CPU\n     * usage.\n     */\n    var allowSleep: Boolean = true,\n\n    /**\n     * Is this body initially sleeping?\n     */\n    var awake: Boolean = true,\n\n    /**\n     * Should this body be prevented from rotating? Useful for characters.\n     */\n    var fixedRotation: Boolean = false,\n\n    /**\n     * Is this a fast moving body that should be prevented from tunneling through other moving bodies?\n     * Note that all bodies are prevented from tunneling through kinematic and static bodies. This\n     * setting is only considered on dynamic bodies.\n     *\n     * @warning You should use this flag sparingly since it increases processing time.\n     */\n    var bullet: Boolean = false,\n\n    /**\n     * Does this body start out active?\n     */\n    var active: Boolean = true,\n\n    /**\n     * Experimental: scales the inertia tensor.\n     */\n    var gravityScale: Float = 1f\n) : Box2dTypedUserData by Box2dTypedUserData.Mixin() {\n    /**\n     * The world angle of the body in degrees.\n     */\n    var angleDegrees: Float\n        set(value) { angleRadians = value * MathUtils.DEG2RAD }\n        get() = angleRadians * MathUtils.RAD2DEG\n\n    /**\n     * The world angle of the body.\n     */\n    var angle: Angle\n        set(value) { angleRadians = value.radians.toFloat() }\n        get() = angleRadians.radians\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * Created at 3:59:59 AM Jul 7, 2010\n */\npackage org.jbox2d.dynamics\n\n// updated to rev 100\n\n/**\n * The body type.\n * static: zero mass, zero velocity, may be manually moved\n * kinematic: zero mass, non-zero velocity set by user, moved by solver\n * dynamic: positive mass, non-zero velocity determined by forces, moved by solver\n *\n * @author daniel\n */\nenum class BodyType {\n    STATIC, KINEMATIC, DYNAMIC;\n\n    companion object {\n        val BY_NAME = values().associateBy { it.name.toUpperCase() }\n        operator fun get(name: String): BodyType = BY_NAME[name.toUpperCase()] ?: STATIC\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics\n\nimport org.jbox2d.callbacks.ContactFilter\nimport org.jbox2d.callbacks.ContactListener\nimport org.jbox2d.callbacks.PairCallback\nimport org.jbox2d.collision.broadphase.BroadPhase\nimport org.jbox2d.dynamics.contacts.Contact\n\n/**\n * Delegate of World.\n *\n * @author Daniel Murphy\n */\nclass ContactManager(private val pool: World, var m_broadPhase: BroadPhase) : PairCallback {\n    var m_contactList: Contact? = null\n    var m_contactCount: Int = 0\n    var m_contactFilter: ContactFilter = ContactFilter()\n    var m_contactListener: ContactListener? = null\n\n    /**\n     * Broad-phase callback.\n     *\n     * @param proxyUserDataA\n     * @param proxyUserDataB\n     */\n    override fun addPair(proxyUserDataA: Any?, proxyUserDataB: Any?) {\n        val proxyA = proxyUserDataA as FixtureProxy?\n        val proxyB = proxyUserDataB as FixtureProxy?\n\n        var fixtureA = proxyA!!.fixture\n        var fixtureB = proxyB!!.fixture\n\n        var indexA = proxyA.childIndex\n        var indexB = proxyB.childIndex\n\n        var bodyA = fixtureA!!.getBody()\n        var bodyB = fixtureB!!.getBody()\n\n        // Are the fixtures on the same body?\n        if (bodyA == bodyB) {\n            return\n        }\n\n        // TODO_ERIN use a hash table to remove a potential bottleneck when both\n        // bodies have a lot of contacts.\n        // Does a contact already exist?\n        var edge = bodyB!!.getContactList()\n        while (edge != null) {\n            if (edge.other == bodyA) {\n                val fA = edge.contact!!.getFixtureA()\n                val fB = edge.contact!!.getFixtureB()\n                val iA = edge.contact!!.getChildIndexA()\n                val iB = edge.contact!!.getChildIndexB()\n\n                if (fA == fixtureA && iA == indexA && fB == fixtureB && iB == indexB) {\n                    // A contact already exists.\n                    return\n                }\n\n                if (fA == fixtureB && iA == indexB && fB == fixtureA && iB == indexA) {\n                    // A contact already exists.\n                    return\n                }\n            }\n\n            edge = edge.next\n        }\n\n        // Does a joint override collision? is at least one body dynamic?\n        if (!bodyB.shouldCollide(bodyA!!)) {\n            return\n        }\n\n        // Check user filtering.\n        if (m_contactFilter != null && !m_contactFilter!!.shouldCollide(fixtureA, fixtureB)) {\n            return\n        }\n\n        // Call the factory.\n        val c = pool.popContact(fixtureA, indexA, fixtureB, indexB) ?: return\n\n        // Contact creation may swap fixtures.\n        fixtureA = c.getFixtureA()\n        fixtureB = c.getFixtureB()\n        indexA = c.getChildIndexA()\n        indexB = c.getChildIndexB()\n        bodyA = fixtureA!!.getBody()\n        bodyB = fixtureB!!.getBody()\n\n        // Insert into the world.\n        c.m_prev = null\n        c.m_next = m_contactList\n        if (m_contactList != null) {\n            m_contactList!!.m_prev = c\n        }\n        m_contactList = c\n\n        // Connect to island graph.\n\n        // Connect to body A\n        c.m_nodeA.contact = c\n        c.m_nodeA.other = bodyB\n\n        c.m_nodeA.prev = null\n        c.m_nodeA.next = bodyA!!.m_contactList\n        if (bodyA.m_contactList != null) {\n            bodyA.m_contactList!!.prev = c.m_nodeA\n        }\n        bodyA.m_contactList = c.m_nodeA\n\n        // Connect to body B\n        c.m_nodeB.contact = c\n        c.m_nodeB.other = bodyA\n\n        c.m_nodeB.prev = null\n        c.m_nodeB.next = bodyB!!.m_contactList\n        if (bodyB.m_contactList != null) {\n            bodyB.m_contactList!!.prev = c.m_nodeB\n        }\n        bodyB.m_contactList = c.m_nodeB\n\n        // wake up the bodies\n        if (!fixtureA.isSensor && !fixtureB.isSensor) {\n            bodyA.isAwake = true\n            bodyB.isAwake = true\n        }\n\n        ++m_contactCount\n    }\n\n    fun findNewContacts() {\n        m_broadPhase.updatePairs(this)\n    }\n\n    fun destroy(c: Contact) {\n        val fixtureA = c.getFixtureA()\n        val fixtureB = c.getFixtureB()\n        val bodyA = fixtureA!!.getBody()\n        val bodyB = fixtureB!!.getBody()\n\n        if (m_contactListener != null && c.isTouching) {\n            m_contactListener!!.endContact(c)\n        }\n\n        // Remove from the world.\n        if (c.m_prev != null) {\n            c.m_prev!!.m_next = c.m_next\n        }\n\n        if (c.m_next != null) {\n            c.m_next!!.m_prev = c.m_prev\n        }\n\n        if (c === m_contactList) {\n            m_contactList = c.m_next\n        }\n\n        // Remove from body 1\n        if (c.m_nodeA.prev != null) {\n            c.m_nodeA.prev!!.next = c.m_nodeA.next\n        }\n\n        if (c.m_nodeA.next != null) {\n            c.m_nodeA.next!!.prev = c.m_nodeA.prev\n        }\n\n        if (c.m_nodeA == bodyA!!.m_contactList) {\n            bodyA.m_contactList = c.m_nodeA.next\n        }\n\n        // Remove from body 2\n        if (c.m_nodeB.prev != null) {\n            c.m_nodeB.prev!!.next = c.m_nodeB.next\n        }\n\n        if (c.m_nodeB.next != null) {\n            c.m_nodeB.next!!.prev = c.m_nodeB.prev\n        }\n\n        if (c.m_nodeB == bodyB!!.m_contactList) {\n            bodyB.m_contactList = c.m_nodeB.next\n        }\n\n        // Call the factory.\n        pool.pushContact(c)\n        --m_contactCount\n    }\n\n    /**\n     * This is the top level collision call for the time step. Here all the narrow phase collision is\n     * processed for the world contact list.\n     */\n    fun collide() {\n        // Update awake contacts.\n        var c = m_contactList\n        while (c != null) {\n            val fixtureA = c.getFixtureA()\n            val fixtureB = c.getFixtureB()\n            val indexA = c.getChildIndexA()\n            val indexB = c.getChildIndexB()\n            val bodyA = fixtureA!!.getBody()\n            val bodyB = fixtureB!!.getBody()\n\n            // is this contact flagged for filtering?\n            if (c.m_flags and Contact.FILTER_FLAG == Contact.FILTER_FLAG) {\n                // Should these bodies collide?\n                if (!bodyB!!.shouldCollide(bodyA!!)) {\n                    val cNuke = c\n                    c = cNuke.getNext()\n                    destroy(cNuke)\n                    continue\n                }\n\n                // Check user filtering.\n                if (m_contactFilter != null && !m_contactFilter!!.shouldCollide(fixtureA, fixtureB)) {\n                    val cNuke = c\n                    c = cNuke.getNext()\n                    destroy(cNuke)\n                    continue\n                }\n\n                // Clear the filtering flag.\n                c.m_flags = c.m_flags and Contact.FILTER_FLAG.inv()\n            }\n\n            val activeA = bodyA!!.isAwake && bodyA._type !== BodyType.STATIC\n            val activeB = bodyB!!.isAwake && bodyB._type !== BodyType.STATIC\n\n            // At least one body must be awake and it must be dynamic or kinematic.\n            if (!activeA && !activeB) {\n                c = c.getNext()\n                continue\n            }\n\n            val proxyIdA = fixtureA.m_proxies!![indexA].proxyId\n            val proxyIdB = fixtureB.m_proxies!![indexB].proxyId\n            val overlap = m_broadPhase.testOverlap(proxyIdA, proxyIdB)\n\n            // Here we destroy contacts that cease to overlap in the broad-phase.\n            if (!overlap) {\n                val cNuke = c\n                c = cNuke.getNext()\n                destroy(cNuke)\n                continue\n            }\n\n            // The contact persists.\n            c.update(m_contactListener)\n            c = c.getNext()\n        }\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics\n\n// updated to rev 100\n/**\n * This holds contact filtering data.\n *\n * @author daniel\n */\nclass Filter {\n    /**\n     * The collision category bits. Normally you would just set one bit.\n     */\n\n    var categoryBits: Int = 0x0001\n\n    /**\n     * The collision mask bits. This states the categories that this\n     * shape would accept for collision.\n     */\n\n    var maskBits: Int = 0xFFFF\n\n    /**\n     * Collision groups allow a certain group of objects to never collide (negative)\n     * or always collide (positive). Zero means no collision group. Non-zero group\n     * filtering always wins against the mask bits.\n     */\n\n    var groupIndex: Int = 0\n\n    fun set(argOther: Filter) {\n        categoryBits = argOther.categoryBits\n        maskBits = argOther.maskBits\n        groupIndex = argOther.groupIndex\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics\n\nimport org.jbox2d.collision.*\nimport org.jbox2d.collision.broadphase.*\nimport org.jbox2d.collision.shapes.*\nimport org.jbox2d.common.*\nimport org.jbox2d.internal.*\nimport org.jbox2d.userdata.*\n\n/**\n * A fixture is used to attach a shape to a body for collision detection. A fixture inherits its\n * transform from its parent. Fixtures hold additional non-geometric data such as friction,\n * collision filters, etc. Fixtures are created via Body::CreateFixture.\n *\n * @warning you cannot reuse fixtures.\n *\n * @author daniel\n */\nclass Fixture : Box2dTypedUserData by Box2dTypedUserData.Mixin() {\n\n    var m_density: Float = 0.toFloat()\n\n    /**\n     * Get the next fixture in the parent body's fixture list.\n     *\n     * @return the next shape.\n     * @return\n     */\n\n    var m_next: Fixture? = null\n\n    fun getNext() = m_next\n\n    /**\n     * Get the parent body of this fixture. This is NULL if the fixture is not attached.\n     *\n     * @return the parent body.\n     * @return\n     */\n    var m_body: Body? = null\n\n    fun getBody() = m_body\n\n    /**\n     * Get the child shape. You can modify the child shape, however you should not change the number\n     * of vertices because this will crash some collision caching mechanisms.\n     *\n     * @return\n     */\n    var m_shape: Shape? = null\n\n    fun getShape() = m_shape\n\n    /**\n     * Get the coefficient of friction.\n     *\n     * @return\n     */\n    /**\n     * Set the coefficient of friction. This will _not_ change the friction of existing contacts.\n     *\n     * @param friction\n     */\n    var m_friction: Float = 0.toFloat()\n    /**\n     * Get the coefficient of restitution.\n     *\n     * @return\n     */\n    /**\n     * Set the coefficient of restitution. This will _not_ change the restitution of existing\n     * contacts.\n     *\n     * @param restitution\n     */\n    var m_restitution: Float = 0.toFloat()\n\n\n    var m_proxies: Array<FixtureProxy>? = null\n\n    var m_proxyCount: Int = 0\n\n    val m_filter: Filter = Filter()\n\n\n    var m_isSensor: Boolean = false\n\n    /**\n     * Get the user data that was assigned in the fixture definition. Use this to store your\n     * application specific data.\n     *\n     * @return\n     */\n    /**\n     * Set the user data. Use this to store your application specific data.\n     *\n     * @param data\n     */\n    var userData: Any? = null\n\n    /**\n     * Get the type of the child shape. You can use this to down cast to the concrete shape.\n     *\n     * @return the shape type.\n     */\n    val type: ShapeType\n        get() = m_shape!!.getType()\n\n    /**\n     * Is this fixture a sensor (non-solid)?\n     *\n     * @return the true if the shape is a sensor.\n     * @return\n     */\n    /**\n     * Set if this fixture is a sensor.\n     *\n     * @param sensor\n     */\n    var isSensor: Boolean\n        get() = m_isSensor\n        set(sensor) {\n            if (sensor != m_isSensor) {\n                m_body!!.isAwake = true\n                m_isSensor = sensor\n            }\n        }\n\n    /**\n     * Get the contact filtering data.\n     *\n     * @return\n     */\n    /**\n     * Set the contact filtering data. This is an expensive operation and should not be called\n     * frequently. This will not update contacts until the next time step when either parent body is\n     * awake. This automatically calls refilter.\n     *\n     * @param filter\n     */\n    var filterData: Filter\n        get() = m_filter\n        set(filter) {\n            m_filter.set(filter)\n\n            refilter()\n        }\n\n    var density: Float\n        get() = m_density\n        set(density) {\n            assert(density >= 0f)\n            m_density = density\n        }\n\n    var friction: Float\n        get() = m_friction\n        set(value) {\n            m_friction = value\n        }\n\n    var restitution: Float\n        get() = m_restitution\n        set(value) {\n            m_restitution = value\n        }\n\n    private val pool1 = AABB()\n    private val pool2 = AABB()\n    private val displacement = Vec2()\n\n    /**\n     * Call this if you want to establish collision that was previously disabled by\n     * ContactFilter::ShouldCollide.\n     */\n    fun refilter() {\n        if (m_body == null) {\n            return\n        }\n\n        // Flag associated contacts for filtering.\n        var edge = m_body!!.getContactList()\n        while (edge != null) {\n            val contact = edge.contact\n            val fixtureA = contact!!.getFixtureA()\n            val fixtureB = contact.getFixtureB()\n            if (fixtureA === this || fixtureB === this) {\n                contact.flagForFiltering()\n            }\n            edge = edge.next\n        }\n\n        val world = m_body!!.world ?: return\n\n// Touch each proxy so that new pairs may be created\n        val broadPhase = world.m_contactManager.m_broadPhase\n        for (i in 0 until m_proxyCount) {\n            broadPhase.touchProxy(m_proxies!![i].proxyId)\n        }\n    }\n\n    /**\n     * Test a point for containment in this fixture. This only works for convex shapes.\n     *\n     * @param p a point in world coordinates.\n     * @return\n     */\n    fun testPoint(p: Vec2): Boolean {\n        return m_shape!!.testPoint(m_body!!.xf, p)\n    }\n\n    /**\n     * Cast a ray against this shape.\n     *\n     * @param output the ray-cast results.\n     * @param input the ray-cast input parameters.\n     * @param output\n     * @param input\n     */\n    fun raycast(output: RayCastOutput, input: RayCastInput, childIndex: Int): Boolean {\n        return m_shape!!.raycast(output, input, m_body!!.xf, childIndex)\n    }\n\n    /**\n     * Get the mass data for this fixture. The mass data is based on the density and the shape. The\n     * rotational inertia is about the shape's origin.\n     *\n     * @return\n     */\n    fun getMassData(massData: MassData) {\n        m_shape!!.computeMass(massData, m_density)\n    }\n\n    /**\n     * Get the fixture's AABB. This AABB may be enlarge and/or stale. If you need a more accurate\n     * AABB, compute it using the shape and the body transform.\n     *\n     * @return\n     */\n    fun getAABB(childIndex: Int): AABB {\n        assert(childIndex >= 0 && childIndex < m_proxyCount)\n        return m_proxies!![childIndex].aabb\n    }\n\n    /**\n     * Compute the distance from this fixture.\n     *\n     * @param p a point in world coordinates.\n     * @return distance\n     */\n    fun computeDistance(p: Vec2, childIndex: Int, normalOut: Vec2): Float {\n        return m_shape!!.computeDistanceToOut(m_body!!.transform, p, childIndex, normalOut)\n    }\n\n    // We need separation create/destroy functions from the constructor/destructor because\n    // the destructor cannot access the allocator (no destructor arguments allowed by C++).\n\n    fun create(body: Body, def: FixtureDef) {\n        userData = def.userData\n        m_friction = def.friction\n        m_restitution = def.restitution\n\n        this.m_body = body\n        m_next = null\n\n\n        m_filter.set(def.filter)\n\n        m_isSensor = def.isSensor\n\n        m_shape = def.shape!!.clone()\n\n        // Reserve proxy space\n        val childCount = m_shape!!.getChildCount()\n        if (m_proxies == null) {\n            m_proxies = Array(childCount) { FixtureProxy() }\n            for (i in 0 until childCount) {\n                m_proxies!![i].fixture = null\n                m_proxies!![i].proxyId = BroadPhase.NULL_PROXY\n            }\n        }\n\n        if (m_proxies!!.size < childCount) {\n            val old = m_proxies\n            val newLen = MathUtils.max(old!!.size * 2, childCount)\n            m_proxies = arrayOfNulls<FixtureProxy>(newLen) as Array<FixtureProxy>\n            arraycopy(old, 0, m_proxies!!, 0, old.size)\n            for (i in 0 until newLen) {\n                if (i >= old.size) {\n                    m_proxies!![i] = FixtureProxy()\n                }\n                m_proxies!![i].fixture = null\n                m_proxies!![i].proxyId = BroadPhase.NULL_PROXY\n            }\n        }\n        m_proxyCount = 0\n\n        m_density = def.density\n    }\n\n    fun destroy() {\n        // The proxies must be destroyed before calling this.\n        assert(m_proxyCount == 0)\n\n        // Free the child shape.\n        m_shape = null\n        m_proxies = null\n        m_next = null\n\n        // TODO pool shapes\n        // TODO pool fixtures\n    }\n\n    // These support body activation/deactivation.\n    fun createProxies(broadPhase: BroadPhase, xf: Transform) {\n        assert(m_proxyCount == 0)\n\n        // Create proxies in the broad-phase.\n        m_proxyCount = m_shape!!.getChildCount()\n\n        for (i in 0 until m_proxyCount) {\n            val proxy = m_proxies!![i]\n            m_shape!!.computeAABB(proxy.aabb, xf, i)\n            proxy.proxyId = broadPhase.createProxy(proxy.aabb, proxy)\n            proxy.fixture = this\n            proxy.childIndex = i\n        }\n    }\n\n    /**\n     * Internal method\n     *\n     * @param broadPhase\n     */\n    fun destroyProxies(broadPhase: BroadPhase) {\n        // Destroy proxies in the broad-phase.\n        for (i in 0 until m_proxyCount) {\n            val proxy = m_proxies!![i]\n            broadPhase.destroyProxy(proxy.proxyId)\n            proxy.proxyId = BroadPhase.NULL_PROXY\n        }\n\n        m_proxyCount = 0\n    }\n\n    /**\n     * Internal method\n     *\n     * @param broadPhase\n     * @param xf1\n     * @param xf2\n     */\n    fun synchronize(broadPhase: BroadPhase, transform1: Transform,\n                              transform2: Transform) {\n        if (m_proxyCount == 0) {\n            return\n        }\n\n        for (i in 0 until m_proxyCount) {\n            val proxy = m_proxies!![i]\n\n            // Compute an AABB that covers the swept shape (may miss some rotation effect).\n            val aabb1 = pool1\n            val aab = pool2\n            m_shape!!.computeAABB(aabb1, transform1, proxy.childIndex)\n            m_shape!!.computeAABB(aab, transform2, proxy.childIndex)\n\n            proxy.aabb.lowerBound.x = if (aabb1.lowerBound.x < aab.lowerBound.x) aabb1.lowerBound.x else aab.lowerBound.x\n            proxy.aabb.lowerBound.y = if (aabb1.lowerBound.y < aab.lowerBound.y) aabb1.lowerBound.y else aab.lowerBound.y\n            proxy.aabb.upperBound.x = if (aabb1.upperBound.x > aab.upperBound.x) aabb1.upperBound.x else aab.upperBound.x\n            proxy.aabb.upperBound.y = if (aabb1.upperBound.y > aab.upperBound.y) aabb1.upperBound.y else aab.upperBound.y\n            displacement.x = transform2.p.x - transform1.p.x\n            displacement.y = transform2.p.y - transform1.p.y\n\n            broadPhase.moveProxy(proxy.proxyId, proxy.aabb, displacement)\n        }\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics\n\nimport org.jbox2d.collision.shapes.Shape\nimport org.jbox2d.userdata.Box2dTypedUserData\n\n/**\n * A fixture definition is used to create a fixture. This class defines an abstract fixture\n * definition. You can reuse fixture definitions safely.\n *\n * @author daniel\n */\ndata class FixtureDef(\n    /**\n     * The shape, this must be set. The shape will be cloned, so you can create the shape on the\n     * stack.\n     */\n    var shape: Shape? = null,\n\n    /**\n     * Use this to store application specific fixture data.\n     */\n    var userData: Any? = null,\n\n    /**\n     * The friction coefficient, usually in the range [0,1].\n     */\n    var friction: Float = .2f,\n\n    /**\n     * The restitution (elasticity) usually in the range [0,1].\n     */\n    var restitution: Float = 0f,\n\n    /**\n     * The density, usually in kg/m^2\n     */\n    var density: Float = 0f,\n\n    /**\n     * A sensor shape collects contact information but never generates a collision response.\n     */\n    var isSensor: Boolean = false,\n\n    /**\n     * Contact filtering data;\n     */\n    var filter: Filter = Filter()\n) : Box2dTypedUserData by Box2dTypedUserData.Mixin()\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics\n\nimport org.jbox2d.collision.AABB\n\n/**\n * This proxy is used internally to connect fixtures to the broad-phase.\n *\n * @author Daniel\n */\nclass FixtureProxy {\n\n    internal val aabb = AABB()\n\n    internal var fixture: Fixture? = null\n\n    internal var childIndex: Int = 0\n\n    internal var proxyId: Int = 0\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics\n\nimport org.jbox2d.callbacks.ContactImpulse\nimport org.jbox2d.callbacks.ContactListener\nimport org.jbox2d.common.MathUtils\nimport org.jbox2d.common.Settings\nimport org.jbox2d.common.Timer\nimport org.jbox2d.common.Vec2\nimport org.jbox2d.dynamics.contacts.Contact\nimport org.jbox2d.dynamics.contacts.ContactSolver\nimport org.jbox2d.dynamics.contacts.ContactSolver.ContactSolverDef\nimport org.jbox2d.dynamics.contacts.ContactVelocityConstraint\nimport org.jbox2d.dynamics.contacts.Position\nimport org.jbox2d.dynamics.contacts.Velocity\nimport org.jbox2d.dynamics.joints.Joint\nimport org.jbox2d.internal.arraycopy\nimport org.jbox2d.internal.assert\n\n/*\n Position Correction Notes\n =========================\n I tried the several algorithms for position correction of the 2D revolute joint.\n I looked at these systems:\n - simple pendulum (1m diameter sphere on massless 5m stick) with initial angular velocity of 100 rad/s.\n - suspension bridge with 30 1m long planks of length 1m.\n - multi-link chain with 30 1m long links.\n\n Here are the algorithms:\n\n Baumgarte - A fraction of the position error is added to the velocity error. There is no\n separate position solver.\n\n Pseudo Velocities - After the velocity solver and position integration,\n the position error, Jacobian, and effective mass are recomputed. Then\n the velocity constraints are solved with pseudo velocities and a fraction\n of the position error is added to the pseudo velocity error. The pseudo\n velocities are initialized to zero and there is no warm-starting. After\n the position solver, the pseudo velocities are added to the positions.\n This is also called the First Order World method or the Position LCP method.\n\n Modified Nonlinear Gauss-Seidel (NGS) - Like Pseudo Velocities except the\n position error is re-computed for each raint and the positions are updated\n after the raint is solved. The radius vectors (aka Jacobians) are\n re-computed too (otherwise the algorithm has horrible instability). The pseudo\n velocity states are not needed because they are effectively zero at the beginning\n of each iteration. Since we have the current position error, we allow the\n iterations to terminate early if the error becomes smaller than Settings.linearSlop.\n\n Full NGS or just NGS - Like Modified NGS except the effective mass are re-computed\n each time a raint is solved.\n\n Here are the results:\n Baumgarte - this is the cheapest algorithm but it has some stability problems,\n especially with the bridge. The chain links separate easily close to the root\n and they jitter as they struggle to pull together. This is one of the most common\n methods in the field. The big drawback is that the position correction artificially\n affects the momentum, thus leading to instabilities and false bounce. I used a\n bias factor of 0.2. A larger bias factor makes the bridge less stable, a smaller\n factor makes joints and contacts more spongy.\n\n Pseudo Velocities - the is more stable than the Baumgarte method. The bridge is\n stable. However, joints still separate with large angular velocities. Drag the\n simple pendulum in a circle quickly and the joint will separate. The chain separates\n easily and does not recover. I used a bias factor of 0.2. A larger value lead to\n the bridge collapsing when a heavy cube drops on it.\n\n Modified NGS - this algorithm is better in some ways than Baumgarte and Pseudo\n Velocities, but in other ways it is worse. The bridge and chain are much more\n stable, but the simple pendulum goes unstable at high angular velocities.\n\n Full NGS - stable in all tests. The joints display good stiffness. The bridge\n still sags, but this is better than infinite forces.\n\n Recommendations\n Pseudo Velocities are not really worthwhile because the bridge and chain cannot\n recover from joint separation. In other cases the benefit over Baumgarte is small.\n\n Modified NGS is not a robust method for the revolute joint due to the violent\n instability seen in the simple pendulum. Perhaps it is viable with other raint\n types, especially scalar constraints where the effective mass is a scalar.\n\n This leaves Baumgarte and Full NGS. Baumgarte has small, but manageable instabilities\n and is very fast. I don't think we can escape Baumgarte, especially in highly\n demanding cases where high raint fidelity is not needed.\n\n Full NGS is robust and easy on the eyes. I recommend this as an option for\n higher fidelity simulation and certainly for suspension bridges and long chains.\n Full NGS might be a good choice for ragdolls, especially motorized ragdolls where\n joint separation can be problematic. The number of NGS iterations can be reduced\n for better performance without harming robustness much.\n\n Each joint in a can be handled differently in the position solver. So I recommend\n a system where the user can select the algorithm on a per joint basis. I would\n probably default to the slower Full NGS and let the user select the faster\n Baumgarte method in performance critical scenarios.\n */\n\n/*\n Cache Performance\n\n The Box2D solvers are dominated by cache misses. Data structures are designed\n to increase the number of cache hits. Much of misses are due to random access\n to body data. The raint structures are iterated over linearly, which leads\n to few cache misses.\n\n The bodies are not accessed during iteration. Instead read only data, such as\n the mass values are stored with the constraints. The mutable data are the raint\n impulses and the bodies velocities/positions. The impulses are held inside the\n raint structures. The body velocities/positions are held in compact, temporary\n arrays to increase the number of cache hits. Linear and angular velocity are\n stored in a single array since multiple arrays lead to multiple misses.\n */\n\n/*\n 2D Rotation\n\n R = [cos(theta) -sin(theta)]\n [sin(theta) cos(theta) ]\n\n thetaDot = omega\n\n Let q1 = cos(theta), q2 = sin(theta).\n R = [q1 -q2]\n [q2  q1]\n\n q1Dot = -thetaDot * q2\n q2Dot = thetaDot * q1\n\n q1_new = q1_old - dt * w * q2\n q2_new = q2_old + dt * w * q1\n then normalize.\n\n This might be faster than computing sin+cos.\n However, we can compute sin+cos of the same angle fast.\n */\n\n/**\n * This is an internal class.\n *\n * @author Daniel Murphy\n */\nclass Island {\n\n    var m_listener: ContactListener? = null\n\n\n    var m_bodies: Array<Body>? = null\n\n    var m_contacts: Array<Contact>? = null\n\n    var m_joints: Array<Joint>? = null\n\n\n    var m_positions: Array<Position>? = null\n\n    var m_velocities: Array<Velocity>? = null\n\n\n    var m_bodyCount: Int = 0\n\n    var m_jointCount: Int = 0\n\n    var m_contactCount: Int = 0\n\n\n    var m_bodyCapacity: Int = 0\n\n    var m_contactCapacity: Int = 0\n\n    var m_jointCapacity: Int = 0\n\n    private val contactSolver = ContactSolver()\n    private val timer = Timer()\n    private val solverData = SolverData()\n    private val solverDef = ContactSolverDef()\n\n    private val toiContactSolver = ContactSolver()\n    private val toiSolverDef = ContactSolverDef()\n\n    private val impulse = ContactImpulse()\n\n    fun init(bodyCapacity: Int, contactCapacity: Int, jointCapacity: Int,\n             listener: ContactListener?) {\n        // System.out.println(\"Initializing Island\");\n        m_bodyCapacity = bodyCapacity\n        m_contactCapacity = contactCapacity\n        m_jointCapacity = jointCapacity\n        m_bodyCount = 0\n        m_contactCount = 0\n        m_jointCount = 0\n\n        m_listener = listener\n\n        if (m_bodies == null || m_bodyCapacity > m_bodies!!.size) {\n            m_bodies = arrayOfNulls<Body>(m_bodyCapacity) as Array<Body>\n        }\n        if (m_joints == null || m_jointCapacity > m_joints!!.size) {\n            m_joints = arrayOfNulls<Joint>(m_jointCapacity) as Array<Joint>\n        }\n        if (m_contacts == null || m_contactCapacity > m_contacts!!.size) {\n            m_contacts = arrayOfNulls<Contact>(m_contactCapacity) as Array<Contact>\n        }\n\n        // dynamic array\n        if (m_velocities == null || m_bodyCapacity > m_velocities!!.size) {\n            val old = if (m_velocities == null) emptyArray<Velocity>() else m_velocities\n            m_velocities = arrayOfNulls<Velocity>(m_bodyCapacity) as Array<Velocity>\n            arraycopy(old!!, 0, m_velocities!!, 0, old!!.size)\n            for (i in old!!.size until m_velocities!!.size) {\n                m_velocities!![i] = Velocity()\n            }\n        }\n\n        // dynamic array\n        if (m_positions == null || m_bodyCapacity > m_positions!!.size) {\n            val old = if (m_positions == null) emptyArray<Position>() else m_positions\n            m_positions = arrayOfNulls<Position>(m_bodyCapacity) as Array<Position>\n            arraycopy(old!!, 0, m_positions!!, 0, old!!.size)\n            for (i in old!!.size until m_positions!!.size) {\n                m_positions!![i] = Position()\n            }\n        }\n    }\n\n    fun clear() {\n        m_bodyCount = 0\n        m_contactCount = 0\n        m_jointCount = 0\n    }\n\n    fun solve(profile: Profile, step: TimeStep, gravity: Vec2, allowSleep: Boolean) {\n\n        // System.out.println(\"Solving Island\");\n        val h = step.dt\n\n        // Integrate velocities and apply damping. Initialize the body state.\n        for (i in 0 until m_bodyCount) {\n            val b = m_bodies!![i]\n            val bm_sweep = b.sweep\n            val c = bm_sweep.c\n            val a = bm_sweep.a\n            val v = b._linearVelocity\n            var w = b._angularVelocity\n\n            // Store positions for continuous collision.\n            bm_sweep.c0.set(bm_sweep.c)\n            bm_sweep.a0 = bm_sweep.a\n\n            if (b._type === BodyType.DYNAMIC) {\n                // Integrate velocities.\n                // v += h * (b.m_gravityScale * gravity + b.m_invMass * b.m_force);\n                v.x += h * (b.gravityScale * gravity.x + b.m_invMass * b.force.x)\n                v.y += h * (b.gravityScale * gravity.y + b.m_invMass * b.force.y)\n                w += h * b.m_invI * b.torque\n\n                // Apply damping.\n                // ODE: dv/dt + c * v = 0\n                // Solution: v(t) = v0 * exp(-c * t)\n                // Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v *\n                // exp(-c * dt)\n                // v2 = exp(-c * dt) * v1\n                // Pade approximation:\n                // v2 = v1 * 1 / (1 + c * dt)\n                v.x *= 1.0f / (1.0f + h * b.m_linearDamping)\n                v.y *= 1.0f / (1.0f + h * b.m_linearDamping)\n                w *= 1.0f / (1.0f + h * b.m_angularDamping)\n            }\n\n            m_positions!![i].c.x = c.x\n            m_positions!![i].c.y = c.y\n            m_positions!![i].a = a\n            m_velocities!![i].v.x = v.x\n            m_velocities!![i].v.y = v.y\n            m_velocities!![i].w = w\n        }\n\n        timer.reset()\n\n        // Solver data\n        solverData.step = step\n        solverData.positions = m_positions\n        solverData.velocities = m_velocities\n\n        // Initialize velocity constraints.\n        solverDef.step = step\n        solverDef.contacts = m_contacts\n        solverDef.count = m_contactCount\n        solverDef.positions = m_positions\n        solverDef.velocities = m_velocities\n\n        contactSolver.init(solverDef)\n        // System.out.println(\"island init vel\");\n        contactSolver.initializeVelocityConstraints()\n\n        if (step.warmStarting) {\n            // System.out.println(\"island warm start\");\n            contactSolver.warmStart()\n        }\n\n        for (i in 0 until m_jointCount) {\n            m_joints!![i].initVelocityConstraints(solverData)\n        }\n\n        profile.solveInit.accum(timer.milliseconds)\n\n        // Solve velocity constraints\n        timer.reset()\n        // System.out.println(\"island solving velocities\");\n        for (i in 0 until step.velocityIterations) {\n            for (j in 0 until m_jointCount) {\n                m_joints!![j].solveVelocityConstraints(solverData)\n            }\n\n            contactSolver.solveVelocityConstraints()\n        }\n\n        // Store impulses for warm starting\n        contactSolver.storeImpulses()\n        profile.solveVelocity.accum(timer.milliseconds)\n\n        // Integrate positions\n        for (i in 0 until m_bodyCount) {\n            val c = m_positions!![i].c\n            var a = m_positions!![i].a\n            val v = m_velocities!![i].v\n            var w = m_velocities!![i].w\n\n            // Check for large velocities\n            val translationx = v.x * h\n            val translationy = v.y * h\n\n            if (translationx * translationx + translationy * translationy > Settings.maxTranslationSquared) {\n                val ratio = Settings.maxTranslation / MathUtils.sqrt(translationx * translationx + translationy * translationy)\n                v.x *= ratio\n                v.y *= ratio\n            }\n\n            val rotation = h * w\n            if (rotation * rotation > Settings.maxRotationSquared) {\n                val ratio = Settings.maxRotation / MathUtils.abs(rotation)\n                w *= ratio\n            }\n\n            // Integrate\n            c.x += h * v.x\n            c.y += h * v.y\n            a += h * w\n\n            m_positions!![i].a = a\n            m_velocities!![i].w = w\n        }\n\n        // Solve position constraints\n        timer.reset()\n        var positionSolved = false\n        for (i in 0 until step.positionIterations) {\n            val contactsOkay = contactSolver.solvePositionConstraints()\n\n            var jointsOkay = true\n            for (j in 0 until m_jointCount) {\n                val jointOkay = m_joints!![j].solvePositionConstraints(solverData)\n                jointsOkay = jointsOkay && jointOkay\n            }\n\n            if (contactsOkay && jointsOkay) {\n                // Exit early if the position errors are small.\n                positionSolved = true\n                break\n            }\n        }\n\n        // Copy state buffers back to the bodies\n        for (i in 0 until m_bodyCount) {\n            val body = m_bodies!![i]\n            body.sweep.c.x = m_positions!![i].c.x\n            body.sweep.c.y = m_positions!![i].c.y\n            body.sweep.a = m_positions!![i].a\n            body._linearVelocity.x = m_velocities!![i].v.x\n            body._linearVelocity.y = m_velocities!![i].v.y\n            body._angularVelocity = m_velocities!![i].w\n            body.synchronizeTransform()\n        }\n\n        profile.solvePosition.accum(timer.milliseconds)\n\n        report(contactSolver.m_velocityConstraints)\n\n        if (allowSleep) {\n            var minSleepTime = Float.MAX_VALUE\n\n            val linTolSqr = Settings.linearSleepTolerance * Settings.linearSleepTolerance\n            val angTolSqr = Settings.angularSleepTolerance * Settings.angularSleepTolerance\n\n            for (i in 0 until m_bodyCount) {\n                val b = m_bodies!![i]\n                if (b.type === BodyType.STATIC) {\n                    continue\n                }\n\n                if (b.flags and Body.e_autoSleepFlag == 0\n                        || b._angularVelocity * b._angularVelocity > angTolSqr\n                        || Vec2.dot(b._linearVelocity, b._linearVelocity) > linTolSqr) {\n                    b.m_sleepTime = 0.0f\n                    minSleepTime = 0.0f\n                } else {\n                    b.m_sleepTime += h\n                    minSleepTime = MathUtils.min(minSleepTime, b.m_sleepTime)\n                }\n            }\n\n            if (minSleepTime >= Settings.timeToSleep && positionSolved) {\n                for (i in 0 until m_bodyCount) {\n                    val b = m_bodies!![i]\n                    b.isAwake = false\n                }\n            }\n        }\n    }\n\n    fun solveTOI(subStep: TimeStep, toiIndexA: Int, toiIndexB: Int) {\n        assert(toiIndexA < m_bodyCount)\n        assert(toiIndexB < m_bodyCount)\n\n        // Initialize the body state.\n        for (i in 0 until m_bodyCount) {\n            m_positions!![i].c.x = m_bodies!![i].sweep.c.x\n            m_positions!![i].c.y = m_bodies!![i].sweep.c.y\n            m_positions!![i].a = m_bodies!![i].sweep.a\n            m_velocities!![i].v.x = m_bodies!![i]._linearVelocity.x\n            m_velocities!![i].v.y = m_bodies!![i]._linearVelocity.y\n            m_velocities!![i].w = m_bodies!![i]._angularVelocity\n        }\n\n        toiSolverDef.contacts = m_contacts\n        toiSolverDef.count = m_contactCount\n        toiSolverDef.step = subStep\n        toiSolverDef.positions = m_positions\n        toiSolverDef.velocities = m_velocities\n        toiContactSolver.init(toiSolverDef)\n\n        // Solve position constraints.\n        for (i in 0 until subStep.positionIterations) {\n            val contactsOkay = toiContactSolver.solveTOIPositionConstraints(toiIndexA, toiIndexB)\n            if (contactsOkay) {\n                break\n            }\n        }\n        // #if 0\n        // // Is the new position really safe?\n        // for (int i = 0; i < m_contactCount; ++i)\n        // {\n        // Contact* c = m_contacts[i];\n        // Fixture* fA = c.GetFixtureA();\n        // Fixture* fB = c.GetFixtureB();\n        //\n        // Body bA = fA.GetBody();\n        // Body bB = fB.GetBody();\n        //\n        // int indexA = c.GetChildIndexA();\n        // int indexB = c.GetChildIndexB();\n        //\n        // DistanceInput input;\n        // input.proxyA.Set(fA.GetShape(), indexA);\n        // input.proxyB.Set(fB.GetShape(), indexB);\n        // input.transformA = bA.GetTransform();\n        // input.transformB = bB.GetTransform();\n        // input.useRadii = false;\n        //\n        // DistanceOutput output;\n        // SimplexCache cache;\n        // cache.count = 0;\n        // Distance(&output, &cache, &input);\n        //\n        // if (output.distance == 0 || cache.count == 3)\n        // {\n        // cache.count += 0;\n        // }\n        // }\n        // #endif\n\n        // Leap of faith to new safe state.\n        m_bodies!![toiIndexA].sweep.c0.x = m_positions!![toiIndexA].c.x\n        m_bodies!![toiIndexA].sweep.c0.y = m_positions!![toiIndexA].c.y\n        m_bodies!![toiIndexA].sweep.a0 = m_positions!![toiIndexA].a\n        m_bodies!![toiIndexB].sweep.c0.set(m_positions!![toiIndexB].c)\n        m_bodies!![toiIndexB].sweep.a0 = m_positions!![toiIndexB].a\n\n        // No warm starting is needed for TOI events because warm\n        // starting impulses were applied in the discrete solver.\n        toiContactSolver.initializeVelocityConstraints()\n\n        // Solve velocity constraints.\n        for (i in 0 until subStep.velocityIterations) {\n            toiContactSolver.solveVelocityConstraints()\n        }\n\n        // Don't store the TOI contact forces for warm starting\n        // because they can be quite large.\n\n        val h = subStep.dt\n\n        // Integrate positions\n        for (i in 0 until m_bodyCount) {\n            val c = m_positions!![i].c\n            var a = m_positions!![i].a\n            val v = m_velocities!![i].v\n            var w = m_velocities!![i].w\n\n            // Check for large velocities\n            val translationx = v.x * h\n            val translationy = v.y * h\n            if (translationx * translationx + translationy * translationy > Settings.maxTranslationSquared) {\n                val ratio = Settings.maxTranslation / MathUtils.sqrt(translationx * translationx + translationy * translationy)\n                v.mulLocal(ratio)\n            }\n\n            val rotation = h * w\n            if (rotation * rotation > Settings.maxRotationSquared) {\n                val ratio = Settings.maxRotation / MathUtils.abs(rotation)\n                w *= ratio\n            }\n\n            // Integrate\n            c.x += v.x * h\n            c.y += v.y * h\n            a += h * w\n\n            m_positions!![i].c.x = c.x\n            m_positions!![i].c.y = c.y\n            m_positions!![i].a = a\n            m_velocities!![i].v.x = v.x\n            m_velocities!![i].v.y = v.y\n            m_velocities!![i].w = w\n\n            // Sync bodies\n            val body = m_bodies!![i]\n            body.sweep.c.x = c.x\n            body.sweep.c.y = c.y\n            body.sweep.a = a\n            body._linearVelocity.x = v.x\n            body._linearVelocity.y = v.y\n            body._angularVelocity = w\n            body.synchronizeTransform()\n        }\n\n        report(toiContactSolver.m_velocityConstraints)\n    }\n\n    fun add(body: Body) {\n        assert(m_bodyCount < m_bodyCapacity)\n        body.islandIndex = m_bodyCount\n        m_bodies!![m_bodyCount] = body\n        ++m_bodyCount\n    }\n\n    fun add(contact: Contact) {\n        assert(m_contactCount < m_contactCapacity)\n        m_contacts!![m_contactCount++] = contact\n    }\n\n    fun add(joint: Joint) {\n        assert(m_jointCount < m_jointCapacity)\n        m_joints!![m_jointCount++] = joint\n    }\n\n    fun report(constraints: Array<ContactVelocityConstraint>) {\n        if (m_listener == null) {\n            return\n        }\n\n        for (i in 0 until m_contactCount) {\n            val c = m_contacts!![i]\n\n            val vc = constraints[i]\n            impulse.count = vc.pointCount\n            for (j in 0 until vc.pointCount) {\n                impulse.normalImpulses[j] = vc.points[j].normalImpulse\n                impulse.tangentImpulses[j] = vc.points[j].tangentImpulse\n            }\n\n            m_listener!!.postSolve(c, impulse)\n        }\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics\n\nimport org.jbox2d.common.MathUtils\n\nclass Profile {\n\n\n    val step = ProfileEntry()\n\n    val stepInit = ProfileEntry()\n\n    val collide = ProfileEntry()\n\n    val solveParticleSystem = ProfileEntry()\n\n    val solve = ProfileEntry()\n\n    val solveInit = ProfileEntry()\n\n    val solveVelocity = ProfileEntry()\n\n    val solvePosition = ProfileEntry()\n\n    val broadphase = ProfileEntry()\n\n    val solveTOI = ProfileEntry()\n\n    class ProfileEntry {\n        internal var longAvg: Float = 0.toFloat()\n        internal var shortAvg: Float = 0.toFloat()\n        internal var min: Float = 0.toFloat()\n        internal var max: Float = 0.toFloat()\n        internal var accum: Float = 0.toFloat()\n\n        init {\n            min = Float.MAX_VALUE\n            max = -Float.MAX_VALUE\n        }\n\n        fun record(value: Float) {\n            longAvg = longAvg * (1 - LONG_FRACTION) + value * LONG_FRACTION\n            shortAvg = shortAvg * (1 - SHORT_FRACTION) + value * SHORT_FRACTION\n            min = MathUtils.min(value, min)\n            max = MathUtils.max(value, max)\n        }\n\n        fun startAccum() {\n            accum = 0f\n        }\n\n        fun accum(value: Float) {\n            accum += value\n        }\n\n        fun endAccum() {\n            record(accum)\n        }\n\n        override fun toString(): String {\n            return \"$shortAvg ($longAvg) [$min,$max]\"\n        }\n    }\n\n    fun toDebugStrings(strings: MutableList<String>) {\n        strings.add(\"Profile:\")\n        strings.add(\" step: $step\")\n        strings.add(\"  init: $stepInit\")\n        strings.add(\"  collide: $collide\")\n        strings.add(\"  particles: $solveParticleSystem\")\n        strings.add(\"  solve: $solve\")\n        strings.add(\"   solveInit: $solveInit\")\n        strings.add(\"   solveVelocity: $solveVelocity\")\n        strings.add(\"   solvePosition: $solvePosition\")\n        strings.add(\"   broadphase: $broadphase\")\n        strings.add(\"  solveTOI: $solveTOI\")\n    }\n\n    companion object {\n        private val LONG_AVG_NUMS = 20\n        private val LONG_FRACTION = 1f / LONG_AVG_NUMS\n        private val SHORT_AVG_NUMS = 5\n        private val SHORT_FRACTION = 1f / SHORT_AVG_NUMS\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics\n\nimport org.jbox2d.dynamics.contacts.Position\nimport org.jbox2d.dynamics.contacts.Velocity\n\nclass SolverData {\n\n    var step: TimeStep? = null\n\n    var positions: Array<Position>? = null\n\n    var velocities: Array<Velocity>? = null\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics\n\n//updated to rev 100\n/**\n * This is an internal structure.\n */\nclass TimeStep {\n\n    /** time step  */\n\n    var dt: Float = 0.toFloat()\n\n    /** inverse time step (0 if dt == 0).  */\n\n    var inv_dt: Float = 0.toFloat()\n\n    /** dt * inv_dt0  */\n\n    var dtRatio: Float = 0.toFloat()\n\n\n    var velocityIterations: Int = 0\n\n\n    var positionIterations: Int = 0\n\n\n    var warmStarting: Boolean = false\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics.contacts\n\nimport org.jbox2d.collision.Manifold\nimport org.jbox2d.collision.shapes.ChainShape\nimport org.jbox2d.collision.shapes.CircleShape\nimport org.jbox2d.collision.shapes.EdgeShape\nimport org.jbox2d.collision.shapes.ShapeType\nimport org.jbox2d.common.Transform\nimport org.jbox2d.dynamics.Fixture\nimport org.jbox2d.internal.assert\nimport org.jbox2d.pooling.IWorldPool\n\nclass ChainAndCircleContact(argPool: IWorldPool) : Contact(argPool) {\n\n    private val edge = EdgeShape()\n\n    override fun init(fA: Fixture, indexA: Int, fB: Fixture, indexB: Int) {\n        super.init(fA, indexA, fB, indexB)\n        assert(m_fixtureA!!.type === ShapeType.CHAIN)\n        assert(m_fixtureB!!.type === ShapeType.CIRCLE)\n    }\n\n    override fun evaluate(manifold: Manifold, xfA: Transform, xfB: Transform) {\n        val chain = m_fixtureA!!.m_shape as ChainShape\n        chain.getChildEdge(edge, m_indexA)\n        pool.collision.collideEdgeAndCircle(manifold, edge, xfA,\n                m_fixtureB!!.m_shape as CircleShape, xfB)\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics.contacts\n\nimport org.jbox2d.collision.Manifold\nimport org.jbox2d.collision.shapes.ChainShape\nimport org.jbox2d.collision.shapes.EdgeShape\nimport org.jbox2d.collision.shapes.PolygonShape\nimport org.jbox2d.collision.shapes.ShapeType\nimport org.jbox2d.common.Transform\nimport org.jbox2d.dynamics.Fixture\nimport org.jbox2d.internal.assert\nimport org.jbox2d.pooling.IWorldPool\n\nclass ChainAndPolygonContact(argPool: IWorldPool) : Contact(argPool) {\n\n    private val edge = EdgeShape()\n\n    override fun init(fA: Fixture, indexA: Int, fB: Fixture, indexB: Int) {\n        super.init(fA, indexA, fB, indexB)\n        assert(m_fixtureA!!.type === ShapeType.CHAIN)\n        assert(m_fixtureB!!.type === ShapeType.POLYGON)\n    }\n\n    override fun evaluate(manifold: Manifold, xfA: Transform, xfB: Transform) {\n        val chain = m_fixtureA!!.m_shape as ChainShape\n        chain.getChildEdge(edge, m_indexA)\n        pool.collision.collideEdgeAndPolygon(manifold, edge, xfA,\n                m_fixtureB!!.m_shape as PolygonShape, xfB)\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics.contacts\n\nimport org.jbox2d.collision.Manifold\nimport org.jbox2d.collision.shapes.CircleShape\nimport org.jbox2d.collision.shapes.ShapeType\nimport org.jbox2d.common.Transform\nimport org.jbox2d.dynamics.Fixture\nimport org.jbox2d.internal.assert\nimport org.jbox2d.pooling.IWorldPool\n\nclass CircleContact(argPool: IWorldPool) : Contact(argPool) {\n\n    fun init(fixtureA: Fixture, fixtureB: Fixture) {\n        super.init(fixtureA, 0, fixtureB, 0)\n        assert(m_fixtureA!!.type === ShapeType.CIRCLE)\n        assert(m_fixtureB!!.type === ShapeType.CIRCLE)\n    }\n\n    override fun evaluate(manifold: Manifold, xfA: Transform, xfB: Transform) {\n        pool.collision.collideCircles(manifold, m_fixtureA!!.m_shape as CircleShape, xfA,\n                m_fixtureB!!.m_shape as CircleShape, xfB)\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics.contacts\n\n\nimport org.jbox2d.callbacks.ContactListener\nimport org.jbox2d.collision.Manifold\nimport org.jbox2d.collision.WorldManifold\nimport org.jbox2d.common.MathUtils\nimport org.jbox2d.common.Transform\nimport org.jbox2d.dynamics.Fixture\nimport org.jbox2d.pooling.IWorldPool\n\n/**\n * The class manages contact between two shapes. A contact exists for each overlapping AABB in the\n * broad-phase (except if filtered). Therefore a contact object may exist that has no contact\n * points.\n *\n * @author daniel\n */\nabstract class Contact protected constructor( protected val pool: IWorldPool) {\n\n    var m_flags: Int = 0\n\n    // World pool and list pointers.\n\n    var m_prev: Contact? = null\n    /**\n     * Get the next contact in the world's contact list.\n     *\n     * @return\n     */\n\n    var m_next: Contact? = null\n\n    fun getPrev() = m_prev\n    fun getNext() = m_next\n\n    // Nodes for connecting bodies.\n\n    var m_nodeA: ContactEdge = ContactEdge()\n\n    var m_nodeB: ContactEdge = ContactEdge()\n\n    /**\n     * Get the first fixture in this contact.\n     *\n     * @return\n     */\n\n    var m_fixtureA: Fixture? = null\n    /**\n     * Get the second fixture in this contact.\n     *\n     * @return\n     */\n\n    var m_fixtureB: Fixture? = null\n\n    fun getFixtureA() = m_fixtureA\n    fun getFixtureB() = m_fixtureB\n\n\n    var m_indexA: Int = 0\n\n    var m_indexB: Int = 0\n\n    fun getChildIndexA() = m_indexA\n    fun getChildIndexB() = m_indexB\n\n    /**\n     * Get the contact manifold. Do not set the point count to zero. Instead call Disable.\n     */\n\n    val m_manifold: Manifold = Manifold()\n\n    fun getManifold(): Manifold = m_manifold\n\n\n    var m_toiCount: Float = 0.toFloat()\n\n    var m_toi: Float = 0.toFloat()\n\n\n    var m_friction: Float = 0.toFloat()\n\n    var m_restitution: Float = 0.toFloat()\n\n\n    var m_tangentSpeed: Float = 0.toFloat()\n\n    /**\n     * Is this contact touching\n     *\n     * @return\n     */\n    val isTouching: Boolean\n        get() = m_flags and TOUCHING_FLAG == TOUCHING_FLAG\n\n    /**\n     * Has this contact been disabled?\n     *\n     * @return\n     */\n    /**\n     * Enable/disable this contact. This can be used inside the pre-solve contact listener. The\n     * contact is only disabled for the current time step (or sub-step in continuous collisions).\n     *\n     * @param flag\n     */\n    var isEnabled: Boolean\n        get() = m_flags and ENABLED_FLAG == ENABLED_FLAG\n        set(flag) = if (flag) {\n            m_flags = m_flags or ENABLED_FLAG\n        } else {\n            m_flags = m_flags and ENABLED_FLAG.inv()\n        }\n\n    // djm pooling\n    private val oldManifold = Manifold()\n\n    /** initialization for pooling  */\n    open fun init(fA: Fixture, indexA: Int, fB: Fixture, indexB: Int) {\n        m_flags = ENABLED_FLAG\n\n        m_fixtureA = fA\n        m_fixtureB = fB\n\n        m_indexA = indexA\n        m_indexB = indexB\n\n        m_manifold.pointCount = 0\n\n        m_prev = null\n        m_next = null\n\n        m_nodeA!!.contact = null\n        m_nodeA!!.prev = null\n        m_nodeA!!.next = null\n        m_nodeA!!.other = null\n\n        m_nodeB!!.contact = null\n        m_nodeB!!.prev = null\n        m_nodeB!!.next = null\n        m_nodeB!!.other = null\n\n        m_toiCount = 0f\n        m_friction = Contact.mixFriction(fA.m_friction, fB.m_friction)\n        m_restitution = Contact.mixRestitution(fA.m_restitution, fB.m_restitution)\n\n        m_tangentSpeed = 0f\n    }\n\n    /**\n     * Get the world manifold.\n     */\n    fun getWorldManifold(worldManifold: WorldManifold) {\n        val bodyA = m_fixtureA!!.m_body\n        val bodyB = m_fixtureB!!.m_body\n        val shapeA = m_fixtureA!!.m_shape\n        val shapeB = m_fixtureB!!.m_shape\n\n        worldManifold.initialize(m_manifold, bodyA!!.xf, shapeA!!.radius,\n                bodyB!!.xf, shapeB!!.radius)\n    }\n\n    fun resetFriction() {\n        m_friction = Contact.mixFriction(m_fixtureA!!.m_friction, m_fixtureB!!.m_friction)\n    }\n\n    fun resetRestitution() {\n        m_restitution = Contact.mixRestitution(m_fixtureA!!.m_restitution, m_fixtureB!!.m_restitution)\n    }\n\n    abstract fun evaluate(manifold: Manifold, xfA: Transform, xfB: Transform)\n\n    /**\n     * Flag this contact for filtering. Filtering will occur the next time step.\n     */\n    fun flagForFiltering() {\n        m_flags = m_flags or FILTER_FLAG\n    }\n\n    fun update(listener: ContactListener?) {\n\n        oldManifold.set(m_manifold)\n\n        // Re-enable this contact.\n        m_flags = m_flags or ENABLED_FLAG\n\n        var touching = false\n        val wasTouching = m_flags and TOUCHING_FLAG == TOUCHING_FLAG\n\n        val sensorA = m_fixtureA!!.isSensor\n        val sensorB = m_fixtureB!!.isSensor\n        val sensor = sensorA || sensorB\n\n        val bodyA = m_fixtureA!!.m_body!!\n        val bodyB = m_fixtureB!!.m_body!!\n        val xfA = bodyA.xf\n        val xfB = bodyB.xf\n        // log.debug(\"TransformA: \"+xfA);\n        // log.debug(\"TransformB: \"+xfB);\n\n        if (sensor) {\n            val shapeA = m_fixtureA!!.m_shape!!\n            val shapeB = m_fixtureB!!.m_shape!!\n            touching = pool.collision.testOverlap(shapeA, m_indexA, shapeB, m_indexB, xfA, xfB)\n\n            // Sensors don't generate manifolds.\n            m_manifold.pointCount = 0\n        } else {\n            evaluate(m_manifold, xfA, xfB)\n            touching = m_manifold.pointCount > 0\n\n            // Match old contact ids to new contact ids and copy the\n            // stored impulses to warm start the solver.\n            for (i in 0 until m_manifold.pointCount) {\n                val mp2 = m_manifold.points[i]\n                mp2.normalImpulse = 0.0f\n                mp2.tangentImpulse = 0.0f\n                val id2 = mp2.id\n\n                for (j in 0 until oldManifold.pointCount) {\n                    val mp1 = oldManifold.points[j]\n\n                    if (mp1.id.isEqual(id2)) {\n                        mp2.normalImpulse = mp1.normalImpulse\n                        mp2.tangentImpulse = mp1.tangentImpulse\n                        break\n                    }\n                }\n            }\n\n            if (touching != wasTouching) {\n                bodyA!!.isAwake = true\n                bodyB!!.isAwake = true\n            }\n        }\n\n        if (touching) {\n            m_flags = m_flags or TOUCHING_FLAG\n        } else {\n            m_flags = m_flags and TOUCHING_FLAG.inv()\n        }\n\n        if (listener == null) {\n            return\n        }\n\n        if (!wasTouching && touching) {\n            listener.beginContact(this)\n        }\n\n        if (wasTouching && !touching) {\n            listener.endContact(this)\n        }\n\n        if (!sensor && touching) {\n            listener.preSolve(this, oldManifold)\n        }\n    }\n\n    companion object {\n\n        // Flags stored in m_flags\n        // Used when crawling contact graph when forming islands.\n\n        val ISLAND_FLAG = 0x0001\n        // Set when the shapes are touching.\n\n        val TOUCHING_FLAG = 0x0002\n        // This contact can be disabled (by user)\n\n        val ENABLED_FLAG = 0x0004\n        // This contact needs filtering because a fixture filter was changed.\n\n        val FILTER_FLAG = 0x0008\n        // This bullet contact had a TOI event\n\n        val BULLET_HIT_FLAG = 0x0010\n\n\n        val TOI_FLAG = 0x0020\n\n        /**\n         * Friction mixing law. The idea is to allow either fixture to drive the restitution to zero. For\n         * example, anything slides on ice.\n         *\n         * @param friction1\n         * @param friction2\n         * @return\n         */\n\n        fun mixFriction(friction1: Float, friction2: Float): Float {\n            return MathUtils.sqrt(friction1 * friction2)\n        }\n\n        /**\n         * Restitution mixing law. The idea is allow for anything to bounce off an inelastic surface. For\n         * example, a superball bounces on anything.\n         *\n         * @param restitution1\n         * @param restitution2\n         * @return\n         */\n\n        fun mixRestitution(restitution1: Float, restitution2: Float): Float {\n            return if (restitution1 > restitution2) restitution1 else restitution2\n        }\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics.contacts\n\nimport org.jbox2d.dynamics.Body\n\n/**\n * A contact edge is used to connect bodies and contacts together in a contact graph where each body\n * is a node and each contact is an edge. A contact edge belongs to a doubly linked list maintained\n * in each attached body. Each contact has two contact nodes, one for each attached body.\n *\n * @author daniel\n */\nclass ContactEdge {\n\n    /**\n     * provides quick access to the other body attached.\n     */\n\n    var other: Body? = null\n\n    /**\n     * the contact\n     */\n\n    var contact: Contact? = null\n\n    /**\n     * the previous contact edge in the body's contact list\n     */\n\n    var prev: ContactEdge? = null\n\n    /**\n     * the next contact edge in the body's contact list\n     */\n\n    var next: ContactEdge? = null\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics.contacts\n\nimport org.jbox2d.collision.Manifold.ManifoldType\nimport org.jbox2d.common.Settings\nimport org.jbox2d.common.Vec2\n\nclass ContactPositionConstraint {\n\n    internal var localPoints = Array<Vec2>(Settings.maxManifoldPoints) { Vec2() }\n\n    internal val localNormal = Vec2()\n\n    internal val localPoint = Vec2()\n\n    internal var indexA: Int = 0\n\n    internal var indexB: Int = 0\n\n    internal var invMassA: Float = 0.toFloat()\n\n    internal var invMassB: Float = 0.toFloat()\n\n    internal val localCenterA = Vec2()\n\n    internal val localCenterB = Vec2()\n\n    internal var invIA: Float = 0.toFloat()\n\n    internal var invIB: Float = 0.toFloat()\n\n    internal var type: ManifoldType? = null\n\n    internal var radiusA: Float = 0.toFloat()\n\n    internal var radiusB: Float = 0.toFloat()\n\n    internal var pointCount: Int = 0\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics.contacts\n\nimport org.jbox2d.pooling.IDynamicStack\n\nclass ContactRegister {\n\n    var creator: IDynamicStack<Contact>? = null\n\n    var primary: Boolean = false\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics.contacts\n\nimport org.jbox2d.collision.WorldManifold\nimport org.jbox2d.common.MathUtils\nimport org.jbox2d.common.Settings\nimport org.jbox2d.common.Transform\nimport org.jbox2d.common.Vec2\nimport org.jbox2d.dynamics.TimeStep\nimport org.jbox2d.dynamics.contacts.ContactVelocityConstraint.VelocityConstraintPoint\nimport org.jbox2d.internal.arraycopy\n\n\n/**\n * @author Daniel\n */\nclass ContactSolver {\n\n    var m_step: TimeStep? = null\n    var m_positions: Array<Position>? = null\n    var m_velocities: Array<Velocity>? = null\n    var m_positionConstraints: Array<ContactPositionConstraint> = Array(INITIAL_NUM_CONSTRAINTS) { ContactPositionConstraint() }\n    var m_velocityConstraints: Array<ContactVelocityConstraint> = Array(INITIAL_NUM_CONSTRAINTS) { ContactVelocityConstraint() }\n    var m_contacts: Array<Contact>? = null\n    var m_count: Int = 0\n\n    // djm pooling, and from above\n    private val xfA = Transform()\n    private val xfB = Transform()\n    private val worldManifold = WorldManifold()\n\n    /*\n   * #if 0 // Sequential solver. bool ContactSolver::SolvePositionConstraints(float baumgarte) {\n   * float minSeparation = 0.0f;\n   *\n   * for (int i = 0; i < m_constraintCount; ++i) { ContactConstraint* c = m_constraints + i; Body*\n   * bodyA = c.bodyA; Body* bodyB = c.bodyB; float invMassA = bodyA.m_mass * bodyA.m_invMass; float\n   * invIA = bodyA.m_mass * bodyA.m_invI; float invMassB = bodyB.m_mass * bodyB.m_invMass; float\n   * invIB = bodyB.m_mass * bodyB.m_invI;\n   *\n   * Vec2 normal = c.normal;\n   *\n   * // Solve normal constraints for (int j = 0; j < c.pointCount; ++j) { ContactConstraintPoint*\n   * ccp = c.points + j;\n   *\n   * Vec2 r1 = Mul(bodyA.GetXForm().R, ccp.localAnchorA - bodyA.GetLocalCenter()); Vec2 r2 =\n   * Mul(bodyB.GetXForm().R, ccp.localAnchorB - bodyB.GetLocalCenter());\n   *\n   * Vec2 p1 = bodyA.m_sweep.c + r1; Vec2 p2 = bodyB.m_sweep.c + r2; Vec2 dp = p2 - p1;\n   *\n   * // Approximate the current separation. float separation = Dot(dp, normal) + ccp.separation;\n   *\n   * // Track max constraint error. minSeparation = Min(minSeparation, separation);\n   *\n   * // Prevent large corrections and allow slop. float C = Clamp(baumgarte * (separation +\n   * _linearSlop), -_maxLinearCorrection, 0.0f);\n   *\n   * // Compute normal impulse float impulse = -ccp.equalizedMass * C;\n   *\n   * Vec2 P = impulse * normal;\n   *\n   * bodyA.m_sweep.c -= invMassA * P; bodyA.m_sweep.a -= invIA * Cross(r1, P);\n   * bodyA.SynchronizeTransform();\n   *\n   * bodyB.m_sweep.c += invMassB * P; bodyB.m_sweep.a += invIB * Cross(r2, P);\n   * bodyB.SynchronizeTransform(); } }\n   *\n   * // We can't expect minSpeparation >= -_linearSlop because we don't // push the separation above\n   * -_linearSlop. return minSeparation >= -1.5f * _linearSlop; }\n   */\n\n    private val psolver = PositionSolverManifold()\n\n    fun init(def: ContactSolverDef) {\n        // System.out.println(\"Initializing contact solver\");\n        m_step = def.step\n        m_count = def.count\n\n        if (m_positionConstraints.size < m_count) {\n            val old = m_positionConstraints\n            m_positionConstraints = arrayOfNulls<ContactPositionConstraint>(MathUtils.max(old.size * 2, m_count)) as Array<ContactPositionConstraint>\n            arraycopy(old, 0, m_positionConstraints, 0, old.size)\n            for (i in old.size until m_positionConstraints.size) {\n                m_positionConstraints[i] = ContactPositionConstraint()\n            }\n        }\n\n        if (m_velocityConstraints.size < m_count) {\n            val old = m_velocityConstraints\n            m_velocityConstraints = arrayOfNulls<ContactVelocityConstraint>(MathUtils.max(old.size * 2, m_count)) as Array<ContactVelocityConstraint>\n            arraycopy(old, 0, m_velocityConstraints, 0, old.size)\n            for (i in old.size until m_velocityConstraints.size) {\n                m_velocityConstraints[i] = ContactVelocityConstraint()\n            }\n        }\n\n        m_positions = def.positions\n        m_velocities = def.velocities\n        m_contacts = def.contacts\n\n        for (i in 0 until m_count) {\n            // System.out.println(\"contacts: \" + m_count);\n            val contact = m_contacts!![i]\n\n            val fixtureA = contact.m_fixtureA\n            val fixtureB = contact.m_fixtureB\n            val shapeA = fixtureA!!.getShape()\n            val shapeB = fixtureB!!.getShape()\n            val radiusA = shapeA!!.radius\n            val radiusB = shapeB!!.radius\n            val bodyA = fixtureA.getBody()\n            val bodyB = fixtureB.getBody()\n            val manifold = contact.getManifold()\n\n            val pointCount = manifold.pointCount\n            //assert (pointCount > 0);\n\n            val vc = m_velocityConstraints[i]\n            vc.friction = contact.m_friction\n            vc.restitution = contact.m_restitution\n            vc.tangentSpeed = contact.m_tangentSpeed\n            vc.indexA = bodyA!!.islandIndex\n            vc.indexB = bodyB!!.islandIndex\n            vc.invMassA = bodyA.m_invMass\n            vc.invMassB = bodyB.m_invMass\n            vc.invIA = bodyA.m_invI\n            vc.invIB = bodyB.m_invI\n            vc.contactIndex = i\n            vc.pointCount = pointCount\n            vc.K.setZero()\n            vc.normalMass.setZero()\n\n            val pc = m_positionConstraints[i]\n            pc.indexA = bodyA.islandIndex\n            pc.indexB = bodyB.islandIndex\n            pc.invMassA = bodyA.m_invMass\n            pc.invMassB = bodyB.m_invMass\n            pc.localCenterA.set(bodyA.sweep.localCenter)\n            pc.localCenterB.set(bodyB.sweep.localCenter)\n            pc.invIA = bodyA.m_invI\n            pc.invIB = bodyB.m_invI\n            pc.localNormal.set(manifold.localNormal)\n            pc.localPoint.set(manifold.localPoint)\n            pc.pointCount = pointCount\n            pc.radiusA = radiusA\n            pc.radiusB = radiusB\n            pc.type = manifold.type\n\n            // System.out.println(\"contact point count: \" + pointCount);\n            for (j in 0 until pointCount) {\n                val cp = manifold.points[j]\n                val vcp = vc.points[j]\n\n                if (m_step!!.warmStarting) {\n                    // assert(cp.normalImpulse == 0);\n                    // System.out.println(\"contact normal impulse: \" + cp.normalImpulse);\n                    vcp.normalImpulse = m_step!!.dtRatio * cp.normalImpulse\n                    vcp.tangentImpulse = m_step!!.dtRatio * cp.tangentImpulse\n                } else {\n                    vcp.normalImpulse = 0f\n                    vcp.tangentImpulse = 0f\n                }\n\n                vcp.rA.setZero()\n                vcp.rB.setZero()\n                vcp.normalMass = 0f\n                vcp.tangentMass = 0f\n                vcp.velocityBias = 0f\n                pc.localPoints[j].x = cp.localPoint.x\n                pc.localPoints[j].y = cp.localPoint.y\n            }\n        }\n    }\n\n    fun warmStart() {\n        // Warm start.\n        for (i in 0 until m_count) {\n            val vc = m_velocityConstraints[i]\n\n            val indexA = vc.indexA\n            val indexB = vc.indexB\n            val mA = vc.invMassA\n            val iA = vc.invIA\n            val mB = vc.invMassB\n            val iB = vc.invIB\n            val pointCount = vc.pointCount\n\n            val vA = m_velocities!![indexA].v\n            var wA = m_velocities!![indexA].w\n            val vB = m_velocities!![indexB].v\n            var wB = m_velocities!![indexB].w\n\n            val normal = vc.normal\n            val tangentx = 1.0f * normal.y\n            val tangenty = -1.0f * normal.x\n\n            for (j in 0 until pointCount) {\n                val vcp = vc.points[j]\n                val Px = tangentx * vcp.tangentImpulse + normal.x * vcp.normalImpulse\n                val Py = tangenty * vcp.tangentImpulse + normal.y * vcp.normalImpulse\n\n                wA -= iA * (vcp.rA.x * Py - vcp.rA.y * Px)\n                vA.x -= Px * mA\n                vA.y -= Py * mA\n                wB += iB * (vcp.rB.x * Py - vcp.rB.y * Px)\n                vB.x += Px * mB\n                vB.y += Py * mB\n            }\n            m_velocities!![indexA].w = wA\n            m_velocities!![indexB].w = wB\n        }\n    }\n\n    fun initializeVelocityConstraints() {\n\n        // Warm start.\n        for (i in 0 until m_count) {\n            val vc = m_velocityConstraints[i]\n            val pc = m_positionConstraints[i]\n\n            val radiusA = pc.radiusA\n            val radiusB = pc.radiusB\n            val manifold = m_contacts!![vc.contactIndex].getManifold()\n\n            val indexA = vc.indexA\n            val indexB = vc.indexB\n\n            val mA = vc.invMassA\n            val mB = vc.invMassB\n            val iA = vc.invIA\n            val iB = vc.invIB\n            val localCenterA = pc.localCenterA\n            val localCenterB = pc.localCenterB\n\n            val cA = m_positions!![indexA].c\n            val aA = m_positions!![indexA].a\n            val vA = m_velocities!![indexA].v\n            val wA = m_velocities!![indexA].w\n\n            val cB = m_positions!![indexB].c\n            val aB = m_positions!![indexB].a\n            val vB = m_velocities!![indexB].v\n            val wB = m_velocities!![indexB].w\n\n            //assert (manifold.pointCount > 0);\n\n            val xfAq = xfA.q\n            val xfBq = xfB.q\n            xfAq.setRadians(aA)\n            xfBq.setRadians(aB)\n            xfA.p.x = cA.x - (xfAq.c * localCenterA.x - xfAq.s * localCenterA.y)\n            xfA.p.y = cA.y - (xfAq.s * localCenterA.x + xfAq.c * localCenterA.y)\n            xfB.p.x = cB.x - (xfBq.c * localCenterB.x - xfBq.s * localCenterB.y)\n            xfB.p.y = cB.y - (xfBq.s * localCenterB.x + xfBq.c * localCenterB.y)\n\n            worldManifold.initialize(manifold, xfA, radiusA, xfB, radiusB)\n\n            val vcnormal = vc.normal\n            vcnormal.x = worldManifold.normal.x\n            vcnormal.y = worldManifold.normal.y\n\n            val pointCount = vc.pointCount\n            for (j in 0 until pointCount) {\n                val vcp = vc.points[j]\n                val wmPj = worldManifold.points[j]\n                val vcprA = vcp.rA\n                val vcprB = vcp.rB\n                vcprA.x = wmPj.x - cA.x\n                vcprA.y = wmPj.y - cA.y\n                vcprB.x = wmPj.x - cB.x\n                vcprB.y = wmPj.y - cB.y\n\n                val rnA = vcprA.x * vcnormal.y - vcprA.y * vcnormal.x\n                val rnB = vcprB.x * vcnormal.y - vcprB.y * vcnormal.x\n\n                val kNormal = mA + mB + iA * rnA * rnA + iB * rnB * rnB\n\n                vcp.normalMass = if (kNormal > 0.0f) 1.0f / kNormal else 0.0f\n\n                val tangentx = 1.0f * vcnormal.y\n                val tangenty = -1.0f * vcnormal.x\n\n                val rtA = vcprA.x * tangenty - vcprA.y * tangentx\n                val rtB = vcprB.x * tangenty - vcprB.y * tangentx\n\n                val kTangent = mA + mB + iA * rtA * rtA + iB * rtB * rtB\n\n                vcp.tangentMass = if (kTangent > 0.0f) 1.0f / kTangent else 0.0f\n\n                // Setup a velocity bias for restitution.\n                vcp.velocityBias = 0.0f\n                val tempx = vB.x + -wB * vcprB.y - vA.x - -wA * vcprA.y\n                val tempy = vB.y + wB * vcprB.x - vA.y - wA * vcprA.x\n                val vRel = vcnormal.x * tempx + vcnormal.y * tempy\n                if (vRel < -Settings.velocityThreshold) {\n                    vcp.velocityBias = -vc.restitution * vRel\n                }\n            }\n\n            // If we have two points, then prepare the block solver.\n            if (vc.pointCount == 2) {\n                val vcp1 = vc.points[0]\n                val vcp2 = vc.points[1]\n                val rn1A = vcp1.rA.x * vcnormal.y - vcp1.rA.y * vcnormal.x\n                val rn1B = vcp1.rB.x * vcnormal.y - vcp1.rB.y * vcnormal.x\n                val rn2A = vcp2.rA.x * vcnormal.y - vcp2.rA.y * vcnormal.x\n                val rn2B = vcp2.rB.x * vcnormal.y - vcp2.rB.y * vcnormal.x\n\n                val k11 = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B\n                val k22 = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B\n                val k12 = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B\n                if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {\n                    // K is safe to invert.\n                    vc.K.ex.x = k11\n                    vc.K.ex.y = k12\n                    vc.K.ey.x = k12\n                    vc.K.ey.y = k22\n                    vc.K.invertToOut(vc.normalMass)\n                } else {\n                    // The constraints are redundant, just use one.\n                    // TODO_ERIN use deepest?\n                    vc.pointCount = 1\n                }\n            }\n        }\n    }\n\n    fun storeImpulses() {\n        for (i in 0 until m_count) {\n            val vc = m_velocityConstraints[i]\n            val manifold = m_contacts!![vc.contactIndex].getManifold()\n\n            for (j in 0 until vc.pointCount) {\n                manifold.points[j].normalImpulse = vc.points[j].normalImpulse\n                manifold.points[j].tangentImpulse = vc.points[j].tangentImpulse\n            }\n        }\n    }\n\n    /**\n     * Sequential solver.\n     */\n    fun solvePositionConstraints(): Boolean {\n        var minSeparation = 0.0f\n\n        for (i in 0 until m_count) {\n            val pc = m_positionConstraints[i]\n\n            val indexA = pc.indexA\n            val indexB = pc.indexB\n\n            val mA = pc.invMassA\n            val iA = pc.invIA\n            val localCenterA = pc.localCenterA\n            val localCenterAx = localCenterA.x\n            val localCenterAy = localCenterA.y\n            val mB = pc.invMassB\n            val iB = pc.invIB\n            val localCenterB = pc.localCenterB\n            val localCenterBx = localCenterB.x\n            val localCenterBy = localCenterB.y\n            val pointCount = pc.pointCount\n\n            val cA = m_positions!![indexA].c\n            var aA = m_positions!![indexA].a\n            val cB = m_positions!![indexB].c\n            var aB = m_positions!![indexB].a\n\n            // Solve normal constraints\n            for (j in 0 until pointCount) {\n                val xfAq = xfA.q\n                val xfBq = xfB.q\n                xfAq.setRadians(aA)\n                xfBq.setRadians(aB)\n                xfA.p.x = cA.x - xfAq.c * localCenterAx + xfAq.s * localCenterAy\n                xfA.p.y = cA.y - xfAq.s * localCenterAx - xfAq.c * localCenterAy\n                xfB.p.x = cB.x - xfBq.c * localCenterBx + xfBq.s * localCenterBy\n                xfB.p.y = cB.y - xfBq.s * localCenterBx - xfBq.c * localCenterBy\n\n                val psm = psolver\n                psm.initialize(pc, xfA, xfB, j)\n                val normal = psm.normal\n                val point = psm.point\n                val separation = psm.separation\n\n                val rAx = point.x - cA.x\n                val rAy = point.y - cA.y\n                val rBx = point.x - cB.x\n                val rBy = point.y - cB.y\n\n                // Track max constraint error.\n                minSeparation = MathUtils.min(minSeparation, separation)\n\n                // Prevent large corrections and allow slop.\n                val C = MathUtils.clamp(Settings.baumgarte * (separation + Settings.linearSlop),\n                        -Settings.maxLinearCorrection, 0.0f)\n\n                // Compute the effective mass.\n                val rnA = rAx * normal.y - rAy * normal.x\n                val rnB = rBx * normal.y - rBy * normal.x\n                val K = mA + mB + iA * rnA * rnA + iB * rnB * rnB\n\n                // Compute normal impulse\n                val impulse = if (K > 0.0f) -C / K else 0.0f\n\n                val Px = normal.x * impulse\n                val Py = normal.y * impulse\n\n                cA.x -= Px * mA\n                cA.y -= Py * mA\n                aA -= iA * (rAx * Py - rAy * Px)\n\n                cB.x += Px * mB\n                cB.y += Py * mB\n                aB += iB * (rBx * Py - rBy * Px)\n            }\n\n            // m_positions[indexA].c.set(cA);\n            m_positions!![indexA].a = aA\n\n            // m_positions[indexB].c.set(cB);\n            m_positions!![indexB].a = aB\n        }\n\n        // We can't expect minSpeparation >= -linearSlop because we don't\n        // push the separation above -linearSlop.\n        return minSeparation >= -3.0f * Settings.linearSlop\n    }\n\n    // Sequential position solver for position constraints.\n    fun solveTOIPositionConstraints(toiIndexA: Int, toiIndexB: Int): Boolean {\n        var minSeparation = 0.0f\n\n        for (i in 0 until m_count) {\n            val pc = m_positionConstraints[i]\n\n            val indexA = pc.indexA\n            val indexB = pc.indexB\n            val localCenterA = pc.localCenterA\n            val localCenterB = pc.localCenterB\n            val localCenterAx = localCenterA.x\n            val localCenterAy = localCenterA.y\n            val localCenterBx = localCenterB.x\n            val localCenterBy = localCenterB.y\n            val pointCount = pc.pointCount\n\n            var mA = 0.0f\n            var iA = 0.0f\n            if (indexA == toiIndexA || indexA == toiIndexB) {\n                mA = pc.invMassA\n                iA = pc.invIA\n            }\n\n            var mB = 0f\n            var iB = 0f\n            if (indexB == toiIndexA || indexB == toiIndexB) {\n                mB = pc.invMassB\n                iB = pc.invIB\n            }\n\n            val cA = m_positions!![indexA].c\n            var aA = m_positions!![indexA].a\n\n            val cB = m_positions!![indexB].c\n            var aB = m_positions!![indexB].a\n\n            // Solve normal constraints\n            for (j in 0 until pointCount) {\n                val xfAq = xfA.q\n                val xfBq = xfB.q\n                xfAq.setRadians(aA)\n                xfBq.setRadians(aB)\n                xfA.p.x = cA.x - xfAq.c * localCenterAx + xfAq.s * localCenterAy\n                xfA.p.y = cA.y - xfAq.s * localCenterAx - xfAq.c * localCenterAy\n                xfB.p.x = cB.x - xfBq.c * localCenterBx + xfBq.s * localCenterBy\n                xfB.p.y = cB.y - xfBq.s * localCenterBx - xfBq.c * localCenterBy\n\n                val psm = psolver\n                psm.initialize(pc, xfA, xfB, j)\n                val normal = psm.normal\n\n                val point = psm.point\n                val separation = psm.separation\n\n                val rAx = point.x - cA.x\n                val rAy = point.y - cA.y\n                val rBx = point.x - cB.x\n                val rBy = point.y - cB.y\n\n                // Track max constraint error.\n                minSeparation = MathUtils.min(minSeparation, separation)\n\n                // Prevent large corrections and allow slop.\n                val C = MathUtils.clamp(Settings.toiBaugarte * (separation + Settings.linearSlop),\n                        -Settings.maxLinearCorrection, 0.0f)\n\n                // Compute the effective mass.\n                val rnA = rAx * normal.y - rAy * normal.x\n                val rnB = rBx * normal.y - rBy * normal.x\n                val K = mA + mB + iA * rnA * rnA + iB * rnB * rnB\n\n                // Compute normal impulse\n                val impulse = if (K > 0.0f) -C / K else 0.0f\n\n                val Px = normal.x * impulse\n                val Py = normal.y * impulse\n\n                cA.x -= Px * mA\n                cA.y -= Py * mA\n                aA -= iA * (rAx * Py - rAy * Px)\n\n                cB.x += Px * mB\n                cB.y += Py * mB\n                aB += iB * (rBx * Py - rBy * Px)\n            }\n\n            // m_positions[indexA].c.set(cA);\n            m_positions!![indexA].a = aA\n\n            // m_positions[indexB].c.set(cB);\n            m_positions!![indexB].a = aB\n        }\n\n        // We can't expect minSpeparation >= -_linearSlop because we don't\n        // push the separation above -_linearSlop.\n        return minSeparation >= -1.5f * Settings.linearSlop\n    }\n\n\n    private var vA: Vec2? = null\n    private var vB: Vec2? = null\n    private var wA: Float = 0.toFloat()\n    private var wB: Float = 0.toFloat()\n\n    fun solveVelocityConstraints() {\n        for (i in 0 until m_count) {\n            val vc = m_velocityConstraints[i]\n\n            val indexA = vc.indexA\n            val indexB = vc.indexB\n\n            val mA = vc.invMassA\n            val mB = vc.invMassB\n            val iA = vc.invIA\n            val iB = vc.invIB\n            val pointCount = vc.pointCount\n\n            vA = m_velocities!![indexA].v\n            wA = m_velocities!![indexA].w\n            vB = m_velocities!![indexB].v\n            wB = m_velocities!![indexB].w\n\n            val normal = vc.normal\n            val normalx = normal.x\n            val normaly = normal.y\n            val tangentx = 1.0f * vc.normal.y\n            val tangenty = -1.0f * vc.normal.x\n            val friction = vc.friction\n\n            //assert (pointCount == 1 || pointCount == 2);\n            solveVelocityConstraints0(vc, mA, mB, iA, iB, pointCount, tangentx, tangenty, friction)\n\n            // Solve normal constraints\n            if (vc.pointCount == 1) {\n                solveVelocityConstraints1(vc.points[0], mA, mB, iA, iB, normalx, normaly)\n            } else {\n                solveVelocityConstraints2(vc, mA, mB, iA, iB, normal, normalx, normaly)\n            }\n\n            // m_velocities[indexA].v.set(vA);\n            m_velocities!![indexA].w = wA\n            // m_velocities[indexB].v.set(vB);\n            m_velocities!![indexB].w = wB\n        }\n    }\n\n    private fun solveVelocityConstraints2(vc: ContactVelocityConstraint, mA: Float, mB: Float, iA: Float, iB: Float, normal: Vec2, normalx: Float, normaly: Float) {\n        // Block solver developed in collaboration with Dirk Gregorius (back in 01/07 on\n        // Box2D_Lite).\n        // Build the mini LCP for this contact patch\n        //\n        // vn = A * x + b, vn >= 0, , vn >= 0, x >= 0 and vn_i * x_i = 0 with i = 1..2\n        //\n        // A = J * W * JT and J = ( -n, -r1 x n, n, r2 x n )\n        // b = vn_0 - velocityBias\n        //\n        // The system is solved using the \"Total enumeration method\" (s. Murty). The complementary\n        // constraint vn_i * x_i\n        // implies that we must have in any solution either vn_i = 0 or x_i = 0. So for the 2D\n        // contact problem the cases\n        // vn1 = 0 and vn2 = 0, x1 = 0 and x2 = 0, x1 = 0 and vn2 = 0, x2 = 0 and vn1 = 0 need to be\n        // tested. The first valid\n        // solution that satisfies the problem is chosen.\n        //\n        // In order to account of the accumulated impulse 'a' (because of the iterative nature of\n        // the solver which only requires\n        // that the accumulated impulse is clamped and not the incremental impulse) we change the\n        // impulse variable (x_i).\n        //\n        // Substitute:\n        //\n        // x = a + d\n        //\n        // a := old total impulse\n        // x := new total impulse\n        // d := incremental impulse\n        //\n        // For the current iteration we extend the formula for the incremental impulse\n        // to compute the new total impulse:\n        //\n        // vn = A * d + b\n        // = A * (x - a) + b\n        // = A * x + b - A * a\n        // = A * x + b'\n        // b' = b - A * a;\n\n        val cp1 = vc.points[0]\n        val cp2 = vc.points[1]\n        val cp1rA = cp1.rA\n        val cp1rB = cp1.rB\n        val cp2rA = cp2.rA\n        val cp2rB = cp2.rB\n        val ax = cp1.normalImpulse\n        val ay = cp2.normalImpulse\n\n        //assert (ax >= 0.0f && ay >= 0.0f);\n        // Relative velocity at contact\n        // Vec2 dv1 = vB + Cross(wB, cp1.rB) - vA - Cross(wA, cp1.rA);\n        val dv1x = -wB * cp1rB.y + vB!!.x - vA!!.x + wA * cp1rA.y\n        val dv1y = wB * cp1rB.x + vB!!.y - vA!!.y - wA * cp1rA.x\n\n        // Vec2 dv2 = vB + Cross(wB, cp2.rB) - vA - Cross(wA, cp2.rA);\n        val dv2x = -wB * cp2rB.y + vB!!.x - vA!!.x + wA * cp2rA.y\n        val dv2y = wB * cp2rB.x + vB!!.y - vA!!.y - wA * cp2rA.x\n\n        // Compute normal velocity\n        var vn1 = dv1x * normalx + dv1y * normaly\n        var vn2 = dv2x * normalx + dv2y * normaly\n\n        var bx = vn1 - cp1.velocityBias\n        var by = vn2 - cp2.velocityBias\n\n        // Compute b'\n        val R = vc.K\n        bx -= R.ex.x * ax + R.ey.x * ay\n        by -= R.ex.y * ax + R.ey.y * ay\n\n        // final float k_errorTol = 1e-3f;\n        // B2_NOT_USED(k_errorTol);\n        //\n        // Case 1: vn = 0\n        //\n        // 0 = A * x' + b'\n        //\n        // Solve for x':\n        //\n        // x' = - inv(A) * b'\n        //\n        // Vec2 x = - Mul(c.normalMass, b);\n        val R1 = vc.normalMass\n        var xx = R1.ex.x * bx + R1.ey.x * by\n        var xy = R1.ex.y * bx + R1.ey.y * by\n        xx *= -1f\n        xy *= -1f\n\n        if (xx >= 0.0f && xy >= 0.0f) {\n            solveVelocityConstraints2a(mA, mB, iA, iB, normal, normalx, normaly, cp1, cp2, cp1rA, cp1rB, cp2rA, cp2rB, ax, ay, xx, xy)\n        } else {\n            //\n            // Case 2: vn1 = 0 and x2 = 0\n            //\n            // 0 = a11 * x1' + a12 * 0 + b1'\n            // vn2 = a21 * x1' + a22 * 0 + '\n            //\n            xx = -cp1.normalMass * bx\n            xy = 0.0f\n            vn1 = 0.0f\n            vn2 = vc.K.ex.y * xx + by\n\n            if (xx >= 0.0f && vn2 >= 0.0f) {\n                solveVelocityConstraints2b(mA, mB, iA, iB, normal, normalx, normaly, cp1, cp2, cp1rA, cp1rB, cp2rA, cp2rB, ax, ay, xx, xy)\n            } else {\n\n                //\n                // Case 3: wB = 0 and x1 = 0\n                //\n                // vn1 = a11 * 0 + a12 * x2' + b1'\n                // 0 = a21 * 0 + a22 * x2' + '\n                //\n                xx = 0.0f\n                xy = -cp2.normalMass * by\n                vn1 = vc.K.ey.x * xy + bx\n                vn2 = 0.0f\n\n                if (xy >= 0.0f && vn1 >= 0.0f) {\n                    solveVelocityConstraints2c(mA, mB, iA, iB, normal, normalx, normaly, cp1, cp2, cp1rA, cp1rB, cp2rA, cp2rB, ax, ay, xx, xy)\n                } else {\n\n                    //\n                    // Case 4: x1 = 0 and x2 = 0\n                    //\n                    // vn1 = b1\n                    // vn2 = ;\n                    xx = 0.0f\n                    xy = 0.0f\n                    vn1 = bx\n                    vn2 = by\n\n                    if (vn1 >= 0.0f && vn2 >= 0.0f) {\n                        solveVelocityConstraints2d(mA, mB, iA, iB, normalx, normaly, cp1, cp2, cp1rA, cp1rB, cp2rA, cp2rB, ax, ay, xx, xy)\n                    } else {\n                        // No solution, give up. This is hit sometimes, but it doesn't seem to matter.\n                    }\n                }\n            }\n        }\n    }\n\n    private fun solveVelocityConstraints2d(mA: Float, mB: Float, iA: Float, iB: Float, normalx: Float, normaly: Float, cp1: VelocityConstraintPoint, cp2: VelocityConstraintPoint, cp1rA: Vec2, cp1rB: Vec2, cp2rA: Vec2, cp2rB: Vec2, ax: Float, ay: Float, xx: Float, xy: Float) {\n        // Resubstitute for the incremental impulse\n        val dx = xx - ax\n        val dy = xy - ay\n\n        // Apply incremental impulse\n        /*\n     * Vec2 P1 = d.x * normal; Vec2 P2 = d.y * normal; vA -= invMassA * (P1 + P2); wA -=\n     * invIA * (Cross(cp1.rA, P1) + Cross(cp2.rA, P2));\n     *\n     * vB += invMassB * (P1 + P2); wB += invIB * (Cross(cp1.rB, P1) + Cross(cp2.rB, P2));\n     */\n\n        val P1x = normalx * dx\n        val P1y = normaly * dx\n        val P2x = normalx * dy\n        val P2y = normaly * dy\n\n        vA!!.x -= mA * (P1x + P2x)\n        vA!!.y -= mA * (P1y + P2y)\n        vB!!.x += mB * (P1x + P2x)\n        vB!!.y += mB * (P1y + P2y)\n\n        wA -= iA * (cp1rA.x * P1y - cp1rA.y * P1x + (cp2rA.x * P2y - cp2rA.y * P2x))\n        wB += iB * (cp1rB.x * P1y - cp1rB.y * P1x + (cp2rB.x * P2y - cp2rB.y * P2x))\n\n        // Accumulate\n        cp1.normalImpulse = xx\n        cp2.normalImpulse = xy\n    }\n\n    private fun solveVelocityConstraints2c(mA: Float, mB: Float, iA: Float, iB: Float, normal: Vec2, normalx: Float, normaly: Float, cp1: VelocityConstraintPoint, cp2: VelocityConstraintPoint, cp1rA: Vec2, cp1rB: Vec2, cp2rA: Vec2, cp2rB: Vec2, ax: Float, ay: Float, xx: Float, xy: Float) {\n        val vn2: Float// Resubstitute for the incremental impulse\n        val dx = xx - ax\n        val dy = xy - ay\n\n        // Apply incremental impulse\n        /*\n     * Vec2 P1 = d.x * normal; Vec2 P2 = d.y * normal; vA -= invMassA * (P1 + P2); wA -=\n     * invIA * (Cross(cp1.rA, P1) + Cross(cp2.rA, P2));\n     *\n     * vB += invMassB * (P1 + P2); wB += invIB * (Cross(cp1.rB, P1) + Cross(cp2.rB, P2));\n     */\n\n        val P1x = normalx * dx\n        val P1y = normaly * dx\n        val P2x = normalx * dy\n        val P2y = normaly * dy\n\n        vA!!.x -= mA * (P1x + P2x)\n        vA!!.y -= mA * (P1y + P2y)\n        vB!!.x += mB * (P1x + P2x)\n        vB!!.y += mB * (P1y + P2y)\n\n        wA -= iA * (cp1rA.x * P1y - cp1rA.y * P1x + (cp2rA.x * P2y - cp2rA.y * P2x))\n        wB += iB * (cp1rB.x * P1y - cp1rB.y * P1x + (cp2rB.x * P2y - cp2rB.y * P2x))\n\n        // Accumulate\n        cp1.normalImpulse = xx\n        cp2.normalImpulse = xy\n\n        /*\n     * #if B2_DEBUG_SOLVER == 1 // Postconditions dv2 = vB + Cross(wB, cp2.rB) - vA -\n     * Cross(wA, cp2.rA);\n     *\n     * // Compute normal velocity vn2 = Dot(dv2, normal);\n     *\n     * assert(Abs(vn2 - cp2.velocityBias) < k_errorTol); #endif\n     */\n        if (DEBUG_SOLVER) {\n            // Postconditions\n            val dv2 = vB!!.add(Vec2.cross(wB, cp2rB).subLocal(vA!!).subLocal(Vec2.cross(wA, cp2rA)))\n            // Compute normal velocity\n            vn2 = Vec2.dot(dv2, normal)\n\n            //assert (MathUtils.abs(vn2 - cp2.velocityBias) < k_errorTol);\n        }\n    }\n\n    private fun solveVelocityConstraints2b(mA: Float, mB: Float, iA: Float, iB: Float, normal: Vec2, normalx: Float, normaly: Float, cp1: VelocityConstraintPoint, cp2: VelocityConstraintPoint, cp1rA: Vec2, cp1rB: Vec2, cp2rA: Vec2, cp2rB: Vec2, ax: Float, ay: Float, xx: Float, xy: Float) {\n        val vn1: Float// Get the incremental impulse\n        val dx = xx - ax\n        val dy = xy - ay\n\n        // Apply incremental impulse\n        // Vec2 P1 = d.x * normal;\n        // Vec2 P2 = d.y * normal;\n        val P1x = normalx * dx\n        val P1y = normaly * dx\n        val P2x = normalx * dy\n        val P2y = normaly * dy\n\n        /*\n     * Vec2 P1 = d.x * normal; Vec2 P2 = d.y * normal; vA -= invMassA * (P1 + P2); wA -=\n     * invIA * (Cross(cp1.rA, P1) + Cross(cp2.rA, P2));\n     *\n     * vB += invMassB * (P1 + P2); wB += invIB * (Cross(cp1.rB, P1) + Cross(cp2.rB, P2));\n     */\n\n        vA!!.x -= mA * (P1x + P2x)\n        vA!!.y -= mA * (P1y + P2y)\n        vB!!.x += mB * (P1x + P2x)\n        vB!!.y += mB * (P1y + P2y)\n\n        wA -= iA * (cp1rA.x * P1y - cp1rA.y * P1x + (cp2rA.x * P2y - cp2rA.y * P2x))\n        wB += iB * (cp1rB.x * P1y - cp1rB.y * P1x + (cp2rB.x * P2y - cp2rB.y * P2x))\n\n        // Accumulate\n        cp1.normalImpulse = xx\n        cp2.normalImpulse = xy\n\n        /*\n     * #if B2_DEBUG_SOLVER == 1 // Postconditions dv1 = vB + Cross(wB, cp1.rB) - vA -\n     * Cross(wA, cp1.rA);\n     *\n     * // Compute normal velocity vn1 = Dot(dv1, normal);\n     *\n     * assert(Abs(vn1 - cp1.velocityBias) < k_errorTol); #endif\n     */\n        if (DEBUG_SOLVER) {\n            // Postconditions\n            val dv1 = vB!!.add(Vec2.cross(wB, cp1rB).subLocal(vA!!).subLocal(Vec2.cross(wA, cp1rA)))\n            // Compute normal velocity\n            vn1 = Vec2.dot(dv1, normal)\n\n            //assert (MathUtils.abs(vn1 - cp1.velocityBias) < k_errorTol);\n        }\n    }\n\n    private fun solveVelocityConstraints2a(mA: Float, mB: Float, iA: Float, iB: Float, normal: Vec2, normalx: Float, normaly: Float, cp1: VelocityConstraintPoint, cp2: VelocityConstraintPoint, cp1rA: Vec2, cp1rB: Vec2, cp2rA: Vec2, cp2rB: Vec2, ax: Float, ay: Float, xx: Float, xy: Float) {\n        val vn1: Float\n        val vn2: Float// Get the incremental impulse\n        // Vec2 d = x - a;\n        val dx = xx - ax\n        val dy = xy - ay\n\n        // Apply incremental impulse\n        // Vec2 P1 = d.x * normal;\n        // Vec2 P2 = d.y * normal;\n        val P1x = dx * normalx\n        val P1y = dx * normaly\n        val P2x = dy * normalx\n        val P2y = dy * normaly\n\n        /*\n     * vA -= invMassA * (P1 + P2); wA -= invIA * (Cross(cp1.rA, P1) + Cross(cp2.rA, P2));\n     *\n     * vB += invMassB * (P1 + P2); wB += invIB * (Cross(cp1.rB, P1) + Cross(cp2.rB, P2));\n     */\n\n        vA!!.x -= mA * (P1x + P2x)\n        vA!!.y -= mA * (P1y + P2y)\n        vB!!.x += mB * (P1x + P2x)\n        vB!!.y += mB * (P1y + P2y)\n\n        wA -= iA * (cp1rA.x * P1y - cp1rA.y * P1x + (cp2rA.x * P2y - cp2rA.y * P2x))\n        wB += iB * (cp1rB.x * P1y - cp1rB.y * P1x + (cp2rB.x * P2y - cp2rB.y * P2x))\n\n        // Accumulate\n        cp1.normalImpulse = xx\n        cp2.normalImpulse = xy\n\n        /*\n     * #if B2_DEBUG_SOLVER == 1 // Postconditions dv1 = vB + Cross(wB, cp1.rB) - vA -\n     * Cross(wA, cp1.rA); dv2 = vB + Cross(wB, cp2.rB) - vA - Cross(wA, cp2.rA);\n     *\n     * // Compute normal velocity vn1 = Dot(dv1, normal); vn2 = Dot(dv2, normal);\n     *\n     * assert(Abs(vn1 - cp1.velocityBias) < k_errorTol); assert(Abs(vn2 - cp2.velocityBias)\n     * < k_errorTol); #endif\n     */\n        if (DEBUG_SOLVER) {\n            // Postconditions\n            val dv1 = vB!!.add(Vec2.cross(wB, cp1rB).subLocal(vA!!).subLocal(Vec2.cross(wA, cp1rA)))\n            val dv2 = vB!!.add(Vec2.cross(wB, cp2rB).subLocal(vA!!).subLocal(Vec2.cross(wA, cp2rA)))\n            // Compute normal velocity\n            vn1 = Vec2.dot(dv1, normal)\n            vn2 = Vec2.dot(dv2, normal)\n\n            //assert (MathUtils.abs(vn1 - cp1.velocityBias) < k_errorTol);\n            //assert (MathUtils.abs(vn2 - cp2.velocityBias) < k_errorTol);\n        }\n    }\n\n    private fun solveVelocityConstraints1(point: VelocityConstraintPoint, mA: Float, mB: Float, iA: Float, iB: Float, normalx: Float, normaly: Float) {\n\n        // Relative velocity at contact\n        // Vec2 dv = vB + Cross(wB, vcp.rB) - vA - Cross(wA, vcp.rA);\n\n        val dvx = -wB * point.rB.y + vB!!.x - vA!!.x + wA * point.rA.y\n        val dvy = wB * point.rB.x + vB!!.y - vA!!.y - wA * point.rA.x\n\n        // Compute normal impulse\n        val vn = dvx * normalx + dvy * normaly\n        var lambda = -point.normalMass * (vn - point.velocityBias)\n\n        // Clamp the accumulated impulse\n        val a = point.normalImpulse + lambda\n        val newImpulse = if (a > 0.0f) a else 0.0f\n        lambda = newImpulse - point.normalImpulse\n        point.normalImpulse = newImpulse\n\n        // Apply contact impulse\n        val Px = normalx * lambda\n        val Py = normaly * lambda\n\n        // vA -= invMassA * P;\n        vA!!.x -= Px * mA\n        vA!!.y -= Py * mA\n        wA -= iA * (point.rA.x * Py - point.rA.y * Px)\n\n        // vB += invMassB * P;\n        vB!!.x += Px * mB\n        vB!!.y += Py * mB\n        wB += iB * (point.rB.x * Py - point.rB.y * Px)\n    }\n\n    private fun solveVelocityConstraints0(vc: ContactVelocityConstraint, mA: Float, mB: Float, iA: Float, iB: Float, pointCount: Int, tangentx: Float, tangenty: Float, friction: Float) {\n        // Solve tangent constraints\n        for (j in 0 until pointCount) {\n            val vcp = vc.points[j]\n            val a = vcp.rA\n            val dvx = -wB * vcp.rB.y + vB!!.x - vA!!.x + wA * a.y\n            val dvy = wB * vcp.rB.x + vB!!.y - vA!!.y - wA * a.x\n\n            // Compute tangent force\n            val vt = dvx * tangentx + dvy * tangenty - vc.tangentSpeed\n            var lambda = vcp.tangentMass * -vt\n\n            // Clamp the accumulated force\n            val maxFriction = friction * vcp.normalImpulse\n            val newImpulse = MathUtils.clamp(vcp.tangentImpulse + lambda, -maxFriction, maxFriction)\n            lambda = newImpulse - vcp.tangentImpulse\n            vcp.tangentImpulse = newImpulse\n\n            // Apply contact impulse\n            // Vec2 P = lambda * tangent;\n\n            val Px = tangentx * lambda\n            val Py = tangenty * lambda\n\n            // vA -= invMassA * P;\n            vA!!.x -= Px * mA\n            vA!!.y -= Py * mA\n            wA -= iA * (vcp.rA.x * Py - vcp.rA.y * Px)\n\n            // vB += invMassB * P;\n            vB!!.x += Px * mB\n            vB!!.y += Py * mB\n            wB += iB * (vcp.rB.x * Py - vcp.rB.y * Px)\n        }\n    }\n\n\n    class ContactSolverDef {\n        var step: TimeStep? = null\n        var contacts: Array<Contact>? = null\n        var count: Int = 0\n        var positions: Array<Position>? = null\n        var velocities: Array<Velocity>? = null\n    }\n\n    companion object {\n\n        val DEBUG_SOLVER = false\n        val k_errorTol = 1e-3f\n        /**\n         * For each solver, this is the initial number of constraints in the array, which expands as\n         * needed.\n         */\n        val INITIAL_NUM_CONSTRAINTS = 256\n\n        /**\n         * Ensure a reasonable condition number. for the block solver\n         */\n        val k_maxConditionNumber = 100.0f\n    }\n}\n\n\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics.contacts\n\nimport org.jbox2d.common.Mat22\nimport org.jbox2d.common.Settings\nimport org.jbox2d.common.Vec2\n\nclass ContactVelocityConstraint {\n\n    var points = Array<VelocityConstraintPoint>(Settings.maxManifoldPoints) { VelocityConstraintPoint() }\n\n    val normal = Vec2()\n\n    val normalMass = Mat22()\n\n    val K = Mat22()\n\n    var indexA: Int = 0\n\n    var indexB: Int = 0\n\n    var invMassA: Float = 0.toFloat()\n\n    var invMassB: Float = 0.toFloat()\n\n    var invIA: Float = 0.toFloat()\n\n    var invIB: Float = 0.toFloat()\n\n    var friction: Float = 0.toFloat()\n\n    var restitution: Float = 0.toFloat()\n\n    var tangentSpeed: Float = 0.toFloat()\n\n    var pointCount: Int = 0\n\n    var contactIndex: Int = 0\n\n    class VelocityConstraintPoint {\n\n        val rA = Vec2()\n\n        val rB = Vec2()\n\n        var normalImpulse: Float = 0.toFloat()\n\n        var tangentImpulse: Float = 0.toFloat()\n\n        var normalMass: Float = 0.toFloat()\n\n        var tangentMass: Float = 0.toFloat()\n\n        var velocityBias: Float = 0.toFloat()\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics.contacts\n\nimport org.jbox2d.collision.Manifold\nimport org.jbox2d.collision.shapes.CircleShape\nimport org.jbox2d.collision.shapes.EdgeShape\nimport org.jbox2d.collision.shapes.ShapeType\nimport org.jbox2d.common.Transform\nimport org.jbox2d.dynamics.Fixture\nimport org.jbox2d.internal.assert\nimport org.jbox2d.pooling.IWorldPool\n\nclass EdgeAndCircleContact(argPool: IWorldPool) : Contact(argPool) {\n\n    override fun init(fA: Fixture, indexA: Int, fB: Fixture, indexB: Int) {\n        super.init(fA, indexA, fB, indexB)\n        assert(m_fixtureA!!.type === ShapeType.EDGE)\n        assert(m_fixtureB!!.type === ShapeType.CIRCLE)\n    }\n\n    override fun evaluate(manifold: Manifold, xfA: Transform, xfB: Transform) {\n        pool.collision.collideEdgeAndCircle(manifold, m_fixtureA!!.m_shape as EdgeShape, xfA,\n                m_fixtureB!!.m_shape as CircleShape, xfB)\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics.contacts\n\nimport org.jbox2d.collision.Manifold\nimport org.jbox2d.collision.shapes.EdgeShape\nimport org.jbox2d.collision.shapes.PolygonShape\nimport org.jbox2d.collision.shapes.ShapeType\nimport org.jbox2d.common.Transform\nimport org.jbox2d.dynamics.Fixture\nimport org.jbox2d.internal.assert\nimport org.jbox2d.pooling.IWorldPool\n\nclass EdgeAndPolygonContact(argPool: IWorldPool) : Contact(argPool) {\n\n    override fun init(fA: Fixture, indexA: Int, fB: Fixture, indexB: Int) {\n        super.init(fA, indexA, fB, indexB)\n        assert(m_fixtureA!!.type === ShapeType.EDGE)\n        assert(m_fixtureB!!.type === ShapeType.POLYGON)\n    }\n\n    override fun evaluate(manifold: Manifold, xfA: Transform, xfB: Transform) {\n        pool.collision.collideEdgeAndPolygon(manifold, m_fixtureA!!.m_shape as EdgeShape, xfA,\n                m_fixtureB!!.m_shape as PolygonShape, xfB)\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics.contacts\n\nimport org.jbox2d.collision.Manifold\nimport org.jbox2d.collision.shapes.CircleShape\nimport org.jbox2d.collision.shapes.PolygonShape\nimport org.jbox2d.collision.shapes.ShapeType\nimport org.jbox2d.common.Transform\nimport org.jbox2d.dynamics.Fixture\nimport org.jbox2d.internal.assert\nimport org.jbox2d.pooling.IWorldPool\n\nclass PolygonAndCircleContact(argPool: IWorldPool) : Contact(argPool) {\n\n    fun init(fixtureA: Fixture, fixtureB: Fixture) {\n        super.init(fixtureA, 0, fixtureB, 0)\n        assert(m_fixtureA!!.type === ShapeType.POLYGON)\n        assert(m_fixtureB!!.type === ShapeType.CIRCLE)\n    }\n\n    override fun evaluate(manifold: Manifold, xfA: Transform, xfB: Transform) {\n        pool.collision.collidePolygonAndCircle(manifold, m_fixtureA!!.m_shape as PolygonShape,\n                xfA, m_fixtureB!!.m_shape as CircleShape, xfB)\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics.contacts\n\nimport org.jbox2d.collision.Manifold\nimport org.jbox2d.collision.shapes.PolygonShape\nimport org.jbox2d.collision.shapes.ShapeType\nimport org.jbox2d.common.Transform\nimport org.jbox2d.dynamics.Fixture\nimport org.jbox2d.internal.assert\nimport org.jbox2d.pooling.IWorldPool\n\nclass PolygonContact(argPool: IWorldPool) : Contact(argPool) {\n\n    fun init(fixtureA: Fixture, fixtureB: Fixture) {\n        super.init(fixtureA, 0, fixtureB, 0)\n        assert(m_fixtureA!!.type == ShapeType.POLYGON)\n        assert(m_fixtureB!!.type == ShapeType.POLYGON)\n    }\n\n    override fun evaluate(manifold: Manifold, xfA: Transform, xfB: Transform) {\n        pool.collision.collidePolygons(manifold, m_fixtureA!!.m_shape as PolygonShape, xfA,\n                m_fixtureB!!.m_shape as PolygonShape, xfB)\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics.contacts\n\nimport org.jbox2d.common.Vec2\n\nclass Position {\n\n    val c = Vec2()\n\n    var a: Float = 0.toFloat()\n}\n","package org.jbox2d.dynamics.contacts\n\nimport org.jbox2d.collision.Manifold\nimport org.jbox2d.common.Transform\nimport org.jbox2d.common.Vec2\nimport org.jbox2d.internal.assert\n\ninternal class PositionSolverManifold {\n\n    val normal = Vec2()\n\n    val point = Vec2()\n\n    var separation: Float = 0.toFloat()\n\n    fun initialize(pc: ContactPositionConstraint, xfA: Transform, xfB: Transform, index: Int) {\n        assert(pc.pointCount > 0)\n\n        val xfAq = xfA.q\n        val xfBq = xfB.q\n        val pcLocalPointsI = pc.localPoints[index]\n        when (pc.type) {\n            Manifold.ManifoldType.CIRCLES -> {\n                // Transform.mulToOutUnsafe(xfA, pc.localPoint, pointA);\n                // Transform.mulToOutUnsafe(xfB, pc.localPoints[0], pointB);\n                // normal.set(pointB).subLocal(pointA);\n                // normal.normalize();\n                //\n                // point.set(pointA).addLocal(pointB).mulLocal(.5f);\n                // temp.set(pointB).subLocal(pointA);\n                // separation = Vec2.dot(temp, normal) - pc.radiusA - pc.radiusB;\n                val plocalPoint = pc.localPoint\n                val pLocalPoints0 = pc.localPoints[0]\n                val pointAx = xfAq.c * plocalPoint.x - xfAq.s * plocalPoint.y + xfA.p.x\n                val pointAy = xfAq.s * plocalPoint.x + xfAq.c * plocalPoint.y + xfA.p.y\n                val pointBx = xfBq.c * pLocalPoints0.x - xfBq.s * pLocalPoints0.y + xfB.p.x\n                val pointBy = xfBq.s * pLocalPoints0.x + xfBq.c * pLocalPoints0.y + xfB.p.y\n                normal.x = pointBx - pointAx\n                normal.y = pointBy - pointAy\n                normal.normalize()\n\n                point.x = (pointAx + pointBx) * .5f\n                point.y = (pointAy + pointBy) * .5f\n                val tempx = pointBx - pointAx\n                val tempy = pointBy - pointAy\n                separation = tempx * normal.x + tempy * normal.y - pc.radiusA - pc.radiusB\n            }\n\n            Manifold.ManifoldType.FACE_A -> {\n                // Rot.mulToOutUnsafe(xfAq, pc.localNormal, normal);\n                // Transform.mulToOutUnsafe(xfA, pc.localPoint, planePoint);\n                //\n                // Transform.mulToOutUnsafe(xfB, pc.localPoints[index], clipPoint);\n                // temp.set(clipPoint).subLocal(planePoint);\n                // separation = Vec2.dot(temp, normal) - pc.radiusA - pc.radiusB;\n                // point.set(clipPoint);\n                val pcLocalNormal = pc.localNormal\n                val pcLocalPoint = pc.localPoint\n                normal.x = xfAq.c * pcLocalNormal.x - xfAq.s * pcLocalNormal.y\n                normal.y = xfAq.s * pcLocalNormal.x + xfAq.c * pcLocalNormal.y\n                val planePointx = xfAq.c * pcLocalPoint.x - xfAq.s * pcLocalPoint.y + xfA.p.x\n                val planePointy = xfAq.s * pcLocalPoint.x + xfAq.c * pcLocalPoint.y + xfA.p.y\n\n                val clipPointx = xfBq.c * pcLocalPointsI.x - xfBq.s * pcLocalPointsI.y + xfB.p.x\n                val clipPointy = xfBq.s * pcLocalPointsI.x + xfBq.c * pcLocalPointsI.y + xfB.p.y\n                val tempx = clipPointx - planePointx\n                val tempy = clipPointy - planePointy\n                separation = tempx * normal.x + tempy * normal.y - pc.radiusA - pc.radiusB\n                point.x = clipPointx\n                point.y = clipPointy\n            }\n\n            Manifold.ManifoldType.FACE_B -> {\n                // Rot.mulToOutUnsafe(xfBq, pc.localNormal, normal);\n                // Transform.mulToOutUnsafe(xfB, pc.localPoint, planePoint);\n                //\n                // Transform.mulToOutUnsafe(xfA, pcLocalPointsI, clipPoint);\n                // temp.set(clipPoint).subLocal(planePoint);\n                // separation = Vec2.dot(temp, normal) - pc.radiusA - pc.radiusB;\n                // point.set(clipPoint);\n                //\n                // // Ensure normal points from A to B\n                // normal.negateLocal();\n                val pcLocalNormal = pc.localNormal\n                val pcLocalPoint = pc.localPoint\n                normal.x = xfBq.c * pcLocalNormal.x - xfBq.s * pcLocalNormal.y\n                normal.y = xfBq.s * pcLocalNormal.x + xfBq.c * pcLocalNormal.y\n                val planePointx = xfBq.c * pcLocalPoint.x - xfBq.s * pcLocalPoint.y + xfB.p.x\n                val planePointy = xfBq.s * pcLocalPoint.x + xfBq.c * pcLocalPoint.y + xfB.p.y\n\n                val clipPointx = xfAq.c * pcLocalPointsI.x - xfAq.s * pcLocalPointsI.y + xfA.p.x\n                val clipPointy = xfAq.s * pcLocalPointsI.x + xfAq.c * pcLocalPointsI.y + xfA.p.y\n                val tempx = clipPointx - planePointx\n                val tempy = clipPointy - planePointy\n                separation = tempx * normal.x + tempy * normal.y - pc.radiusA - pc.radiusB\n                point.x = clipPointx\n                point.y = clipPointy\n                normal.x *= -1f\n                normal.y *= -1f\n            }\n\n            else -> {\n            }\n        }\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics.contacts\n\nimport org.jbox2d.common.Vec2\n\nclass Velocity {\n\n    val v = Vec2()\n\n    var w: Float = 0.toFloat()\n}\n","package org.jbox2d.particle\n\nimport org.jbox2d.common.Vec2\nimport org.jbox2d.dynamics.Body\n\nclass ParticleBodyContact {\n    /** Index of the particle making contact.  */\n\n    var index: Int = 0\n    /** The body making contact.  */\n\n    var body: Body? = null\n    /** Weight of the contact. A value between 0.0f and 1.0f.  */\n\n    internal var weight: Float = 0.toFloat()\n    /** The normalized direction from the particle to the body.  */\n\n    val normal = Vec2()\n    /** The effective mass used in calculating force.  */\n\n    internal var mass: Float = 0.toFloat()\n}\n","package org.jbox2d.particle\n\nimport org.jbox2d.common.Color3f\n\n/**\n * Small color object for each particle\n *\n * @author dmurph\n */\nclass ParticleColor {\n\n    var r: Byte = 0\n\n    var g: Byte = 0\n\n    var b: Byte = 0\n\n    var a: Byte = 0\n\n    val isZero: Boolean\n        get() = r.toInt() == 0 && g.toInt() == 0 && b.toInt() == 0 && a.toInt() == 0\n\n    constructor() {\n        r = 127.toByte()\n        g = 127.toByte()\n        b = 127.toByte()\n        a = 50.toByte()\n    }\n\n    constructor(r: Byte, g: Byte, b: Byte, a: Byte) {\n        set(r, g, b, a)\n    }\n\n    constructor(color: Color3f) {\n        set(color)\n    }\n\n    fun set(color: Color3f) {\n        r = (255 * color.x).toInt().toByte()\n        g = (255 * color.y).toInt().toByte()\n        b = (255 * color.z).toInt().toByte()\n        a = 255.toByte()\n    }\n\n    fun set(color: ParticleColor) {\n        r = color.r\n        g = color.g\n        b = color.b\n        a = color.a\n    }\n\n    fun set(r: Byte, g: Byte, b: Byte, a: Byte) {\n        this.r = r\n        this.g = g\n        this.b = b\n        this.a = a\n    }\n}\n","package org.jbox2d.particle\n\nimport org.jbox2d.common.Vec2\n\nclass ParticleContact {\n    /** Indices of the respective particles making contact.  */\n\n    var indexA: Int = 0\n\n    var indexB: Int = 0\n    /** The logical sum of the particle behaviors that have been set.  */\n\n    var flags: Int = 0\n    /** Weight of the contact. A value between 0.0f and 1.0f.  */\n\n    var weight: Float = 0.toFloat()\n    /** The normalized direction from A to B.  */\n\n    val normal = Vec2()\n}\n","package org.jbox2d.particle\n\nimport org.jbox2d.common.Vec2\nimport org.jbox2d.userdata.Box2dTypedUserData\n\nclass ParticleDef : Box2dTypedUserData by Box2dTypedUserData.Mixin() {\n    /**\n     * Specifies the type of particle. A particle may be more than one type. Multiple types are\n     * chained by logical sums, for example: pd.flags = ParticleType.b2_elasticParticle |\n     * ParticleType.b2_viscousParticle.\n     */\n\n    internal var flags: Int = 0\n\n    /** The world position of the particle.  */\n\n    val position = Vec2()\n\n    /** The linear velocity of the particle in world co-ordinates.  */\n\n    val velocity = Vec2()\n\n    /** The color of the particle.  */\n\n    var color: ParticleColor? = null\n\n    /** Use this to store application-specific body data.  */\n\n    var userData: Any? = null\n}\n","package org.jbox2d.particle\n\nobject ParticleGroupType {\n    /** resists penetration  */\n\n    val b2_solidParticleGroup = 1 shl 0\n    /** keeps its shape  */\n\n    val b2_rigidParticleGroup = 1 shl 1\n}\n","package org.jbox2d.particle\n\nimport org.jbox2d.callbacks.ParticleQueryCallback\nimport org.jbox2d.callbacks.ParticleRaycastCallback\nimport org.jbox2d.callbacks.QueryCallback\nimport org.jbox2d.collision.AABB\nimport org.jbox2d.collision.RayCastInput\nimport org.jbox2d.collision.RayCastOutput\nimport org.jbox2d.collision.shapes.Shape\nimport org.jbox2d.common.BufferUtils\nimport org.jbox2d.common.MathUtils\nimport org.jbox2d.common.Rot\nimport org.jbox2d.common.Settings\nimport org.jbox2d.common.Transform\nimport org.jbox2d.common.Vec2\nimport org.jbox2d.dynamics.Fixture\nimport org.jbox2d.dynamics.TimeStep\nimport org.jbox2d.dynamics.World\nimport org.jbox2d.internal.Arrays_sort\nimport org.jbox2d.internal.assert\nimport org.jbox2d.particle.VoronoiDiagram.VoronoiDiagramCallback\n\nclass ParticleSystem(internal var m_world: World) {\n\n    internal var m_timestamp: Int = 0\n    internal var m_allParticleFlags: Int = 0\n    internal var m_allGroupFlags: Int = 0\n    internal var m_density: Float = 1f\n    internal var m_inverseDensity: Float = 1f\n    var particleGravityScale: Float = 1f\n    internal var m_particleDiameter: Float = 1f\n    internal var m_inverseDiameter: Float = 1f\n    internal var m_squaredDiameter: Float = 1f\n\n    var particleCount: Int = 0\n        internal set\n    internal var m_internalAllocatedCapacity: Int = 0\n    internal var m_maxCount: Int = 0\n    internal var m_flagsBuffer: ParticleBufferInt = ParticleBufferInt()\n    internal var m_positionBuffer: ParticleBuffer<Vec2> = ParticleBuffer { Vec2() }\n    internal var m_velocityBuffer: ParticleBuffer<Vec2> = ParticleBuffer { Vec2() }\n    internal var m_accumulationBuffer: FloatArray = FloatArray(0) // temporary values\n    internal var m_accumulation2Buffer: Array<Vec2> = emptyArray() // temporary vector values\n    internal var m_depthBuffer: FloatArray? = null // distance from the surface\n\n    var m_colorBuffer: ParticleBuffer<ParticleColor> = ParticleBuffer { ParticleColor() }\n    var particleGroupBuffer: Array<ParticleGroup?> = emptyArray()\n        internal set\n    internal var m_userDataBuffer: ParticleBuffer<Any> = ParticleBuffer { Any() }\n\n    internal var m_proxyCount: Int = 0\n    internal var m_proxyCapacity: Int = 0\n    internal var m_proxyBuffer: Array<Proxy> = emptyArray()\n\n    var m_contactCount: Int = 0\n    internal var m_contactCapacity: Int = 0\n    var m_contactBuffer: Array<ParticleContact> = emptyArray()\n\n    var m_bodyContactCount: Int = 0\n    internal var m_bodyContactCapacity: Int = 0\n    var m_bodyContactBuffer: Array<ParticleBodyContact> = emptyArray()\n\n    internal var m_pairCount: Int = 0\n    internal var m_pairCapacity: Int = 0\n    internal var m_pairBuffer: Array<Pair> = emptyArray()\n\n    internal var m_triadCount: Int = 0\n    internal var m_triadCapacity: Int = 0\n    internal var m_triadBuffer: Array<Triad> = emptyArray()\n\n    var particleGroupCount: Int = 0\n        internal set\n    internal var m_groupList: ParticleGroup? = null\n\n    internal var m_pressureStrength: Float = 0.05f\n    var particleDamping: Float = 1f\n    internal var m_elasticStrength: Float = 0.25f\n    internal var m_springStrength: Float = 0.25f\n    internal var m_viscousStrength: Float = 0.25f\n    internal var m_surfaceTensionStrengthA: Float = 0.1f\n    internal var m_surfaceTensionStrengthB: Float = 0.2f\n    internal var m_powderStrength: Float = 0.5f\n    internal var m_ejectionStrength: Float = 0.5f\n    internal var m_colorMixingStrength: Float = 0.5f\n\n    private val temp = AABB()\n    private val dpcallback = DestroyParticlesInShapeCallback()\n\n    private val temp2 = AABB()\n    private val tempVec = Vec2()\n    private val tempTransform = Transform()\n    private val tempTransform2 = Transform()\n    private val createParticleGroupCallback = CreateParticleGroupCallback()\n    private val tempParticleDef = ParticleDef()\n\n    private val ubccallback = UpdateBodyContactsCallback()\n\n    private val sccallback = SolveCollisionCallback()\n\n    private val tempVec2 = Vec2()\n    private val tempRot = Rot()\n    private val tempXf = Transform()\n    private val tempXf2 = Transform()\n\n    private val newIndices = NewIndices()\n\n    var particleDensity: Float\n        get() = m_density\n        set(density) {\n            m_density = density\n            m_inverseDensity = 1 / m_density\n        }\n\n    var particleRadius: Float\n        get() = m_particleDiameter / 2\n        set(radius) {\n            m_particleDiameter = 2 * radius\n            m_squaredDiameter = m_particleDiameter * m_particleDiameter\n            m_inverseDiameter = 1 / m_particleDiameter\n        }\n\n    internal val particleStride: Float\n        get() = Settings.particleStride * m_particleDiameter\n\n    internal val particleMass: Float\n        get() {\n            val stride = particleStride\n            return m_density * stride * stride\n        }\n\n    internal val particleInvMass: Float\n        get() = 1.777777f * m_inverseDensity * m_inverseDiameter * m_inverseDiameter\n\n    val particleFlagsBuffer: IntArray?\n        get() = m_flagsBuffer.data\n\n    val particlePositionBuffer: Array<Vec2>?\n        get() = m_positionBuffer.data\n\n    val particleVelocityBuffer: Array<Vec2>?\n        get() = m_velocityBuffer.data\n\n    val particleColorBuffer: Array<ParticleColor>?\n        get() {\n            m_colorBuffer.data = requestParticleBuffer({ ParticleColor() }, m_colorBuffer.data)\n            return m_colorBuffer.data\n        }\n\n    val particleUserDataBuffer: Array<Any>?\n        get() {\n            m_userDataBuffer.data = requestParticleBuffer({ Any() }, m_userDataBuffer.data)\n            return m_userDataBuffer.data\n        }\n\n    var particleMaxCount: Int\n        get() = m_maxCount\n        set(count) {\n            assert(particleCount <= count)\n            m_maxCount = count\n        }\n\n    //  public void assertNotSamePosition() {\n    //    for (int i = 0; i < m_count; i++) {\n    //      Vec2 vi = m_positionBuffer.data[i];\n    //      for (int j = i + 1; j < m_count; j++) {\n    //        Vec2 vj = m_positionBuffer.data[j];\n    //        assert(vi.x != vj.x || vi.y != vj.y);\n    //      }\n    //    }\n    //  }\n\n    fun createParticle(def: ParticleDef): Int {\n        if (particleCount >= m_internalAllocatedCapacity) {\n            var capacity = if (particleCount != 0) 2 * particleCount else Settings.minParticleBufferCapacity\n            capacity = limitCapacity(capacity, m_maxCount)\n            capacity = limitCapacity(capacity, m_flagsBuffer.userSuppliedCapacity)\n            capacity = limitCapacity(capacity, m_positionBuffer.userSuppliedCapacity)\n            capacity = limitCapacity(capacity, m_velocityBuffer.userSuppliedCapacity)\n            capacity = limitCapacity(capacity, m_colorBuffer.userSuppliedCapacity)\n            capacity = limitCapacity(capacity, m_userDataBuffer.userSuppliedCapacity)\n            if (m_internalAllocatedCapacity < capacity) {\n                m_flagsBuffer.data = reallocateBuffer(m_flagsBuffer, m_internalAllocatedCapacity, capacity, false)\n                m_positionBuffer.data = reallocateBuffer(m_positionBuffer, m_internalAllocatedCapacity, capacity, false)\n                m_velocityBuffer.data = reallocateBuffer(m_velocityBuffer, m_internalAllocatedCapacity, capacity, false)\n                m_accumulationBuffer = BufferUtils.reallocateBuffer(m_accumulationBuffer, 0, m_internalAllocatedCapacity, capacity, false)\n                m_accumulation2Buffer = BufferUtils.reallocateBuffer({ Vec2() }, m_accumulation2Buffer, 0, m_internalAllocatedCapacity, capacity, true)\n                m_depthBuffer = BufferUtils.reallocateBuffer(m_depthBuffer, 0, m_internalAllocatedCapacity, capacity, true)\n                m_colorBuffer.data = reallocateBuffer(m_colorBuffer, m_internalAllocatedCapacity, capacity, true)\n                particleGroupBuffer = BufferUtils.reallocateBuffer<ParticleGroup>({ ParticleGroup() }, particleGroupBuffer as Array<ParticleGroup>, 0, m_internalAllocatedCapacity, capacity, false) as Array<ParticleGroup?>\n                m_userDataBuffer.data = reallocateBuffer(m_userDataBuffer, m_internalAllocatedCapacity, capacity, true)\n                m_internalAllocatedCapacity = capacity\n            }\n        }\n        if (particleCount >= m_internalAllocatedCapacity) {\n            return Settings.invalidParticleIndex\n        }\n        val index = particleCount++\n        m_flagsBuffer!!.data!![index] = def.flags\n        m_positionBuffer.data!![index].set(def.position)\n        //    assertNotSamePosition();\n        m_velocityBuffer.data!![index].set(def.velocity)\n        particleGroupBuffer!![index] = null\n        if (m_depthBuffer != null) {\n            m_depthBuffer!![index] = 0f\n        }\n        if (m_colorBuffer.data != null || def.color != null) {\n            m_colorBuffer.data = requestParticleBuffer(m_colorBuffer.dataClass, m_colorBuffer.data)\n            m_colorBuffer.data!![index].set(def.color!!)\n        }\n        if (m_userDataBuffer.data != null || def.userData != null) {\n            m_userDataBuffer.data = requestParticleBuffer(m_userDataBuffer.dataClass, m_userDataBuffer.data)\n            m_userDataBuffer.data!![index] = def.userData!!\n        }\n        if (m_proxyCount >= m_proxyCapacity) {\n            val oldCapacity = m_proxyCapacity\n            val newCapacity = if (m_proxyCount != 0) 2 * m_proxyCount else Settings.minParticleBufferCapacity\n            m_proxyBuffer = BufferUtils.reallocateBuffer({ Proxy() }, m_proxyBuffer, oldCapacity, newCapacity)\n            m_proxyCapacity = newCapacity\n        }\n        m_proxyBuffer[m_proxyCount++].index = index\n        return index\n    }\n\n    fun destroyParticle(index: Int, callDestructionListener: Boolean) {\n        var flags = ParticleType.b2_zombieParticle\n        if (callDestructionListener) {\n            flags = flags or ParticleType.b2_destructionListener\n        }\n        m_flagsBuffer!!.data!![index] = m_flagsBuffer!!.data!![index] or flags\n    }\n\n    fun destroyParticlesInShape(shape: Shape, xf: Transform, callDestructionListener: Boolean): Int {\n        dpcallback.init(this, shape, xf, callDestructionListener)\n        shape.computeAABB(temp, xf, 0)\n        m_world.queryAABB(dpcallback, temp)\n        return dpcallback.destroyed\n    }\n\n    fun destroyParticlesInGroup(group: ParticleGroup, callDestructionListener: Boolean) {\n        for (i in group.m_firstIndex until group.m_lastIndex) {\n            destroyParticle(i, callDestructionListener)\n        }\n    }\n\n    fun createParticleGroup(groupDef: ParticleGroupDef): ParticleGroup {\n        val stride = particleStride\n        val identity = tempTransform\n        identity.setIdentity()\n        val transform = tempTransform2\n        transform.setIdentity()\n        val firstIndex = particleCount\n        if (groupDef.shape != null) {\n            val particleDef = tempParticleDef\n            particleDef.flags = groupDef.flags\n            particleDef.color = groupDef.color\n            particleDef.userData = groupDef.userData\n            val shape = groupDef.shape\n            transform.setRadians(groupDef.position, groupDef.angleRadians)\n            val aabb = temp\n            val childCount = shape!!.getChildCount()\n            for (childIndex in 0 until childCount) {\n                if (childIndex == 0) {\n                    shape.computeAABB(aabb, identity, childIndex)\n                } else {\n                    val childAABB = temp2\n                    shape.computeAABB(childAABB, identity, childIndex)\n                    aabb.combine(childAABB)\n                }\n            }\n            val upperBoundY = aabb.upperBound.y\n            val upperBoundX = aabb.upperBound.x\n            var y = MathUtils.floor(aabb.lowerBound.y / stride) * stride\n            while (y < upperBoundY) {\n                var x = MathUtils.floor(aabb.lowerBound.x / stride) * stride\n                while (x < upperBoundX) {\n                    val p = tempVec\n                    p.x = x\n                    p.y = y\n                    if (shape.testPoint(identity, p)) {\n                        Transform.mulToOut(transform, p, p)\n                        particleDef.position.x = p.x\n                        particleDef.position.y = p.y\n                        p.subLocal(groupDef.position)\n                        Vec2.crossToOutUnsafe(groupDef.angularVelocity, p, particleDef.velocity)\n                        particleDef.velocity.addLocal(groupDef.linearVelocity)\n                        createParticle(particleDef)\n                    }\n                    x += stride\n                }\n                y += stride\n            }\n        }\n        val lastIndex = particleCount\n\n        val group = ParticleGroup()\n        group.m_system = this\n        group.m_firstIndex = firstIndex\n        group.m_lastIndex = lastIndex\n        group.m_groupFlags = groupDef.groupFlags\n        group.m_strength = groupDef.strength\n        group.m_userData = groupDef.userData\n        group.m_transform.set(transform)\n        group.m_destroyAutomatically = groupDef.destroyAutomatically\n        group.m_prev = null\n        group.m_next = m_groupList\n        if (m_groupList != null) {\n            m_groupList!!.m_prev = group\n        }\n        m_groupList = group\n        ++particleGroupCount\n        for (i in firstIndex until lastIndex) {\n            particleGroupBuffer!![i] = group\n        }\n\n        updateContacts(true)\n        if (groupDef.flags and k_pairFlags != 0) {\n            for (k in 0 until m_contactCount) {\n                val contact = m_contactBuffer[k]\n                var a = contact.indexA\n                var b = contact.indexB\n                if (a > b) {\n                    val temp = a\n                    a = b\n                    b = temp\n                }\n                if (firstIndex <= a && b < lastIndex) {\n                    if (m_pairCount >= m_pairCapacity) {\n                        val oldCapacity = m_pairCapacity\n                        val newCapacity = if (m_pairCount != 0) 2 * m_pairCount else Settings.minParticleBufferCapacity\n                        m_pairBuffer = BufferUtils.reallocateBuffer({ Pair() }, m_pairBuffer, oldCapacity, newCapacity)\n                        m_pairCapacity = newCapacity\n                    }\n                    val pair = m_pairBuffer[m_pairCount]\n                    pair.indexA = a\n                    pair.indexB = b\n                    pair.flags = contact.flags\n                    pair.strength = groupDef.strength\n                    pair.distance = MathUtils.distance(m_positionBuffer.data!![a], m_positionBuffer.data!![b])\n                    m_pairCount++\n                }\n            }\n        }\n        if (groupDef.flags and k_triadFlags != 0) {\n            val diagram = VoronoiDiagram(lastIndex - firstIndex)\n            for (i in firstIndex until lastIndex) {\n                diagram.addGenerator(m_positionBuffer.data!![i], i)\n            }\n            diagram.generate(stride / 2)\n            createParticleGroupCallback.system = this\n            createParticleGroupCallback.def = groupDef\n            createParticleGroupCallback.firstIndex = firstIndex\n            diagram.getNodes(createParticleGroupCallback)\n        }\n        if (groupDef.groupFlags and ParticleGroupType.b2_solidParticleGroup != 0) {\n            computeDepthForGroup(group)\n        }\n\n        return group\n    }\n\n    fun joinParticleGroups(groupA: ParticleGroup, groupB: ParticleGroup) {\n        assert(groupA != groupB)\n        RotateBuffer(groupB.m_firstIndex, groupB.m_lastIndex, particleCount)\n        assert(groupB.m_lastIndex == particleCount)\n        RotateBuffer(groupA.m_firstIndex, groupA.m_lastIndex, groupB.m_firstIndex)\n        assert(groupA.m_lastIndex == groupB.m_firstIndex)\n\n        var particleFlags = 0\n        for (i in groupA.m_firstIndex until groupB.m_lastIndex) {\n            particleFlags = particleFlags or m_flagsBuffer.data!![i]\n        }\n\n        updateContacts(true)\n        if (particleFlags and k_pairFlags != 0) {\n            for (k in 0 until m_contactCount) {\n                val contact = m_contactBuffer[k]\n                var a = contact.indexA\n                var b = contact.indexB\n                if (a > b) {\n                    val temp = a\n                    a = b\n                    b = temp\n                }\n                if (groupA.m_firstIndex <= a && a < groupA.m_lastIndex && groupB.m_firstIndex <= b\n                        && b < groupB.m_lastIndex) {\n                    if (m_pairCount >= m_pairCapacity) {\n                        val oldCapacity = m_pairCapacity\n                        val newCapacity = if (m_pairCount != 0) 2 * m_pairCount else Settings.minParticleBufferCapacity\n                        m_pairBuffer = BufferUtils.reallocateBuffer({ Pair() }, m_pairBuffer, oldCapacity, newCapacity)\n                        m_pairCapacity = newCapacity\n                    }\n                    val pair = m_pairBuffer[m_pairCount]\n                    pair.indexA = a\n                    pair.indexB = b\n                    pair.flags = contact.flags\n                    pair.strength = MathUtils.min(groupA.m_strength, groupB.m_strength)\n                    pair.distance = MathUtils.distance(m_positionBuffer.data!![a], m_positionBuffer.data!![b])\n                    m_pairCount++\n                }\n            }\n        }\n        if (particleFlags and k_triadFlags != 0) {\n            val diagram = VoronoiDiagram(groupB.m_lastIndex - groupA.m_firstIndex)\n            for (i in groupA.m_firstIndex until groupB.m_lastIndex) {\n                if (m_flagsBuffer.data!![i] and ParticleType.b2_zombieParticle == 0) {\n                    diagram.addGenerator(m_positionBuffer.data!![i], i)\n                }\n            }\n            diagram.generate(particleStride / 2)\n            val callback = JoinParticleGroupsCallback()\n            callback.system = this\n            callback.groupA = groupA\n            callback.groupB = groupB\n            diagram.getNodes(callback)\n        }\n\n        for (i in groupB.m_firstIndex until groupB.m_lastIndex) {\n            particleGroupBuffer!![i] = groupA\n        }\n        val groupFlags = groupA.m_groupFlags or groupB.m_groupFlags\n        groupA.m_groupFlags = groupFlags\n        groupA.m_lastIndex = groupB.m_lastIndex\n        groupB.m_firstIndex = groupB.m_lastIndex\n        destroyParticleGroup(groupB)\n\n        if (groupFlags and ParticleGroupType.b2_solidParticleGroup != 0) {\n            computeDepthForGroup(groupA)\n        }\n    }\n\n    // Only called from solveZombie() or joinParticleGroups().\n    internal fun destroyParticleGroup(group: ParticleGroup?) {\n        assert(particleGroupCount > 0)\n        assert(group != null)\n\n        if (m_world.particleDestructionListener != null) {\n            m_world.particleDestructionListener!!.sayGoodbye(group!!)\n        }\n\n        for (i in group!!.m_firstIndex until group.m_lastIndex) {\n            particleGroupBuffer!![i] = null\n        }\n\n        if (group.m_prev != null) {\n            group.m_prev!!.m_next = group.m_next\n        }\n        if (group.m_next != null) {\n            group.m_next!!.m_prev = group.m_prev\n        }\n        if (group == m_groupList) {\n            m_groupList = group.m_next\n        }\n\n        --particleGroupCount\n    }\n\n    fun computeDepthForGroup(group: ParticleGroup) {\n        for (i in group.m_firstIndex until group.m_lastIndex) {\n            m_accumulationBuffer!![i] = 0f\n        }\n        for (k in 0 until m_contactCount) {\n            val contact = m_contactBuffer[k]\n            val a = contact.indexA\n            val b = contact.indexB\n            if (a >= group.m_firstIndex && a < group.m_lastIndex && b >= group.m_firstIndex\n                    && b < group.m_lastIndex) {\n                val w = contact.weight\n                m_accumulationBuffer!![a] += w\n                m_accumulationBuffer!![b] += w\n            }\n        }\n        m_depthBuffer = requestParticleBuffer(m_depthBuffer)\n        for (i in group.m_firstIndex until group.m_lastIndex) {\n            val w = m_accumulationBuffer!![i]\n            m_depthBuffer!![i] = if (w < 0.8f) 0f else Float.MAX_VALUE\n        }\n        val interationCount = group.particleCount\n        for (t in 0 until interationCount) {\n            var updated = false\n            for (k in 0 until m_contactCount) {\n                val contact = m_contactBuffer[k]\n                val a = contact.indexA\n                val b = contact.indexB\n                if (a >= group.m_firstIndex && a < group.m_lastIndex && b >= group.m_firstIndex\n                        && b < group.m_lastIndex) {\n                    val r = 1 - contact.weight\n                    val ap0 = m_depthBuffer!![a]\n                    val bp0 = m_depthBuffer!![b]\n                    val ap1 = bp0 + r\n                    val bp1 = ap0 + r\n                    if (ap0 > ap1) {\n                        m_depthBuffer!![a] = ap1\n                        updated = true\n                    }\n                    if (bp0 > bp1) {\n                        m_depthBuffer!![b] = bp1\n                        updated = true\n                    }\n                }\n            }\n            if (!updated) {\n                break\n            }\n        }\n        for (i in group.m_firstIndex until group.m_lastIndex) {\n            val p = m_depthBuffer!![i]\n            if (p < Float.MAX_VALUE) {\n                m_depthBuffer!![i] *= m_particleDiameter\n            } else {\n                m_depthBuffer!![i] = 0f\n            }\n        }\n    }\n\n    fun addContact(a: Int, b: Int) {\n        assert(a != b)\n        val pa = m_positionBuffer.data!![a]\n        val pb = m_positionBuffer.data!![b]\n        val dx = pb.x - pa.x\n        val dy = pb.y - pa.y\n        val d2 = dx * dx + dy * dy\n        //    assert(d2 != 0);\n        if (d2 < m_squaredDiameter) {\n            if (m_contactCount >= m_contactCapacity) {\n                val oldCapacity = m_contactCapacity\n                val newCapacity = if (m_contactCount != 0) 2 * m_contactCount else Settings.minParticleBufferCapacity\n                m_contactBuffer = BufferUtils.reallocateBuffer({ ParticleContact() }, m_contactBuffer, oldCapacity,\n                        newCapacity)\n                m_contactCapacity = newCapacity\n            }\n            val invD = if (d2 != 0f) MathUtils.sqrt(1 / d2) else Float.MAX_VALUE\n            val contact = m_contactBuffer[m_contactCount]\n            contact.indexA = a\n            contact.indexB = b\n            contact.flags = m_flagsBuffer.data!![a] or m_flagsBuffer.data!![b]\n            contact.weight = 1 - d2 * invD * m_inverseDiameter\n            contact.normal.x = invD * dx\n            contact.normal.y = invD * dy\n            m_contactCount++\n        }\n    }\n\n    fun updateContacts(exceptZombie: Boolean) {\n        for (p in 0 until m_proxyCount) {\n            val proxy = m_proxyBuffer[p]\n            val i = proxy.index\n            val pos = m_positionBuffer.data!![i]\n            proxy.tag = computeTag(m_inverseDiameter * pos.x, m_inverseDiameter * pos.y)\n        }\n        Arrays_sort(m_proxyBuffer, 0, m_proxyCount)\n        m_contactCount = 0\n        var c_index = 0\n        for (i in 0 until m_proxyCount) {\n            val a = m_proxyBuffer[i]\n            val rightTag = computeRelativeTag(a.tag, 1, 0)\n            for (j in i + 1 until m_proxyCount) {\n                val b = m_proxyBuffer[j]\n                if (rightTag < b.tag) {\n                    break\n                }\n                addContact(a.index, b.index)\n            }\n            val bottomLeftTag = computeRelativeTag(a.tag, -1, 1)\n            while (c_index < m_proxyCount) {\n                val c = m_proxyBuffer[c_index]\n                if (bottomLeftTag <= c.tag) {\n                    break\n                }\n                c_index++\n            }\n            val bottomRightTag = computeRelativeTag(a.tag, 1, 1)\n\n            for (b_index in c_index until m_proxyCount) {\n                val b = m_proxyBuffer[b_index]\n                if (bottomRightTag < b.tag) {\n                    break\n                }\n                addContact(a.index, b.index)\n            }\n        }\n        if (exceptZombie) {\n            var j = m_contactCount\n            var i = 0\n            while (i < j) {\n                if (m_contactBuffer[i].flags and ParticleType.b2_zombieParticle != 0) {\n                    --j\n                    val temp = m_contactBuffer[j]\n                    m_contactBuffer[j] = m_contactBuffer[i]\n                    m_contactBuffer[i] = temp\n                    --i\n                }\n                i++\n            }\n            m_contactCount = j\n        }\n    }\n\n    fun updateBodyContacts() {\n        val aabb = temp\n        aabb.lowerBound.x = Float.MAX_VALUE\n        aabb.lowerBound.y = Float.MAX_VALUE\n        aabb.upperBound.x = -Float.MAX_VALUE\n        aabb.upperBound.y = -Float.MAX_VALUE\n        for (i in 0 until particleCount) {\n            val p = m_positionBuffer.data!![i]\n            Vec2.minToOut(aabb.lowerBound, p, aabb.lowerBound)\n            Vec2.maxToOut(aabb.upperBound, p, aabb.upperBound)\n        }\n        aabb.lowerBound.x -= m_particleDiameter\n        aabb.lowerBound.y -= m_particleDiameter\n        aabb.upperBound.x += m_particleDiameter\n        aabb.upperBound.y += m_particleDiameter\n        m_bodyContactCount = 0\n\n        ubccallback.system = this\n        m_world.queryAABB(ubccallback, aabb)\n    }\n\n    fun solveCollision(step: TimeStep) {\n        val aabb = temp\n        val lowerBound = aabb.lowerBound\n        val upperBound = aabb.upperBound\n        lowerBound.x = Float.MAX_VALUE\n        lowerBound.y = Float.MAX_VALUE\n        upperBound.x = -Float.MAX_VALUE\n        upperBound.y = -Float.MAX_VALUE\n        for (i in 0 until particleCount) {\n            val v = m_velocityBuffer.data!![i]\n            val p1 = m_positionBuffer.data!![i]\n            val p1x = p1.x\n            val p1y = p1.y\n            val p2x = p1x + step.dt * v.x\n            val p2y = p1y + step.dt * v.y\n            val bx = if (p1x < p2x) p1x else p2x\n            val by = if (p1y < p2y) p1y else p2y\n            lowerBound.x = if (lowerBound.x < bx) lowerBound.x else bx\n            lowerBound.y = if (lowerBound.y < by) lowerBound.y else by\n            val b1x = if (p1x > p2x) p1x else p2x\n            val b1y = if (p1y > p2y) p1y else p2y\n            upperBound.x = if (upperBound.x > b1x) upperBound.x else b1x\n            upperBound.y = if (upperBound.y > b1y) upperBound.y else b1y\n        }\n        sccallback.step = step\n        sccallback.system = this\n        m_world.queryAABB(sccallback, aabb)\n    }\n\n    fun solve(step: TimeStep) {\n        ++m_timestamp\n        if (particleCount == 0) {\n            return\n        }\n        m_allParticleFlags = 0\n        for (i in 0 until particleCount) {\n            m_allParticleFlags = m_allParticleFlags or m_flagsBuffer.data!![i]\n        }\n        if (m_allParticleFlags and ParticleType.b2_zombieParticle != 0) {\n            solveZombie()\n        }\n        if (particleCount == 0) {\n            return\n        }\n        m_allGroupFlags = 0\n        var group = m_groupList\n        while (group != null) {\n            m_allGroupFlags = m_allGroupFlags or group.m_groupFlags\n            group = group.getNext()\n        }\n        val gravityx = step.dt * particleGravityScale * m_world.gravity.x\n        val gravityy = step.dt * particleGravityScale * m_world.gravity.y\n        val criticalVelocytySquared = getCriticalVelocitySquared(step)\n        for (i in 0 until particleCount) {\n            val v = m_velocityBuffer.data!![i]\n            v.x += gravityx\n            v.y += gravityy\n            val v2 = v.x * v.x + v.y * v.y\n            if (v2 > criticalVelocytySquared) {\n                val a = if (v2 == 0f) Float.MAX_VALUE else MathUtils.sqrt(criticalVelocytySquared / v2)\n                v.x *= a\n                v.y *= a\n            }\n        }\n        solveCollision(step)\n        if (m_allGroupFlags and ParticleGroupType.b2_rigidParticleGroup != 0) {\n            solveRigid(step)\n        }\n        if (m_allParticleFlags and ParticleType.b2_wallParticle != 0) {\n            solveWall(step)\n        }\n        for (i in 0 until particleCount) {\n            val pos = m_positionBuffer.data!![i]\n            val vel = m_velocityBuffer.data!![i]\n            pos.x += step.dt * vel.x\n            pos.y += step.dt * vel.y\n        }\n        updateBodyContacts()\n        updateContacts(false)\n        if (m_allParticleFlags and ParticleType.b2_viscousParticle != 0) {\n            solveViscous(step)\n        }\n        if (m_allParticleFlags and ParticleType.b2_powderParticle != 0) {\n            solvePowder(step)\n        }\n        if (m_allParticleFlags and ParticleType.b2_tensileParticle != 0) {\n            solveTensile(step)\n        }\n        if (m_allParticleFlags and ParticleType.b2_elasticParticle != 0) {\n            solveElastic(step)\n        }\n        if (m_allParticleFlags and ParticleType.b2_springParticle != 0) {\n            solveSpring(step)\n        }\n        if (m_allGroupFlags and ParticleGroupType.b2_solidParticleGroup != 0) {\n            solveSolid(step)\n        }\n        if (m_allParticleFlags and ParticleType.b2_colorMixingParticle != 0) {\n            solveColorMixing(step)\n        }\n        solvePressure(step)\n        solveDamping(step)\n    }\n\n    internal fun solvePressure(step: TimeStep) {\n        // calculates the sum of contact-weights for each particle\n        // that means dimensionless density\n        for (i in 0 until particleCount) {\n            m_accumulationBuffer[i] = 0f\n        }\n        for (k in 0 until m_bodyContactCount) {\n            val contact = m_bodyContactBuffer[k]\n            val a = contact.index\n            val w = contact.weight\n            m_accumulationBuffer[a] += w\n        }\n        for (k in 0 until m_contactCount) {\n            val contact = m_contactBuffer[k]\n            val a = contact.indexA\n            val b = contact.indexB\n            val w = contact.weight\n            m_accumulationBuffer[a] += w\n            m_accumulationBuffer[b] += w\n        }\n        // ignores powder particles\n        if (m_allParticleFlags and k_noPressureFlags != 0) {\n            for (i in 0 until particleCount) {\n                if (m_flagsBuffer.data!![i] and k_noPressureFlags != 0) {\n                    m_accumulationBuffer[i] = 0f\n                }\n            }\n        }\n        // calculates pressure as a linear function of density\n        val pressurePerWeight = m_pressureStrength * getCriticalPressure(step)\n        for (i in 0 until particleCount) {\n            val w = m_accumulationBuffer!![i]\n            val h = pressurePerWeight * MathUtils.max(0.0f, MathUtils.min(w, Settings.maxParticleWeight) - Settings.minParticleWeight)\n            m_accumulationBuffer[i] = h\n        }\n        // applies pressure between each particles in contact\n        val velocityPerPressure = step.dt / (m_density * m_particleDiameter)\n        for (k in 0 until m_bodyContactCount) {\n            val contact = m_bodyContactBuffer[k]\n            val a = contact.index\n            val b = contact.body\n            val w = contact.weight\n            val m = contact.mass\n            val n = contact.normal\n            val p = m_positionBuffer.data!![a]\n            val h = m_accumulationBuffer!![a] + pressurePerWeight * w\n            val f = tempVec\n            val coef = velocityPerPressure * w * m * h\n            f.x = coef * n.x\n            f.y = coef * n.y\n            val velData = m_velocityBuffer.data!![a]\n            val particleInvMass = particleInvMass\n            velData.x -= particleInvMass * f.x\n            velData.y -= particleInvMass * f.y\n            b!!.applyLinearImpulse(f, p, true)\n        }\n        for (k in 0 until m_contactCount) {\n            val contact = m_contactBuffer[k]\n            val a = contact.indexA\n            val b = contact.indexB\n            val w = contact.weight\n            val n = contact.normal\n            val h = m_accumulationBuffer!![a] + m_accumulationBuffer!![b]\n            val fx = velocityPerPressure * w * h * n.x\n            val fy = velocityPerPressure * w * h * n.y\n            val velDataA = m_velocityBuffer.data!![a]\n            val velDataB = m_velocityBuffer.data!![b]\n            velDataA.x -= fx\n            velDataA.y -= fy\n            velDataB.x += fx\n            velDataB.y += fy\n        }\n    }\n\n    internal fun solveDamping(step: TimeStep) {\n        // reduces normal velocity of each contact\n        val damping = particleDamping\n        for (k in 0 until m_bodyContactCount) {\n            val contact = m_bodyContactBuffer[k]\n            val a = contact.index\n            val b = contact.body\n            val w = contact.weight\n            val m = contact.mass\n            val n = contact.normal\n            val p = m_positionBuffer.data!![a]\n            val tempX = p.x - b!!.sweep.c.x\n            val tempY = p.y - b!!.sweep.c.y\n            val velA = m_velocityBuffer.data!![a]\n            // getLinearVelocityFromWorldPointToOut, with -= velA\n            val vx = -b!!._angularVelocity * tempY + b!!._linearVelocity.x - velA.x\n            val vy = b!!._angularVelocity * tempX + b!!._linearVelocity.y - velA.y\n            // done\n            val vn = vx * n.x + vy * n.y\n            if (vn < 0) {\n                val f = tempVec\n                f.x = damping * w * m * vn * n.x\n                f.y = damping * w * m * vn * n.y\n                val invMass = particleInvMass\n                velA.x += invMass * f.x\n                velA.y += invMass * f.y\n                f.x = -f.x\n                f.y = -f.y\n                b!!.applyLinearImpulse(f, p, true)\n            }\n        }\n        for (k in 0 until m_contactCount) {\n            val contact = m_contactBuffer[k]\n            val a = contact.indexA\n            val b = contact.indexB\n            val w = contact.weight\n            val n = contact.normal\n            val velA = m_velocityBuffer.data!![a]\n            val velB = m_velocityBuffer.data!![b]\n            val vx = velB.x - velA.x\n            val vy = velB.y - velA.y\n            val vn = vx * n.x + vy * n.y\n            if (vn < 0) {\n                val fx = damping * w * vn * n.x\n                val fy = damping * w * vn * n.y\n                velA.x += fx\n                velA.y += fy\n                velB.x -= fx\n                velB.y -= fy\n            }\n        }\n    }\n\n    fun solveWall(step: TimeStep) {\n        for (i in 0 until particleCount) {\n            if (m_flagsBuffer.data!![i] and ParticleType.b2_wallParticle != 0) {\n                val r = m_velocityBuffer.data!![i]\n                r.x = 0.0f\n                r.y = 0.0f\n            }\n        }\n    }\n\n    internal fun solveRigid(step: TimeStep) {\n        var group = m_groupList\n        while (group != null) {\n            if (group.m_groupFlags and ParticleGroupType.b2_rigidParticleGroup != 0) {\n                group.updateStatistics()\n                val temp = tempVec\n                val cross = tempVec2\n                val rotation = tempRot\n                rotation.setRadians(step.dt * group.m_angularVelocity)\n                Rot.mulToOutUnsafe(rotation, group.m_center, cross)\n                temp.set(group.m_linearVelocity).mulLocal(step.dt).addLocal(group.m_center).subLocal(cross)\n                tempXf.p.set(temp)\n                tempXf.q.set(rotation)\n                Transform.mulToOut(tempXf, group.m_transform, group.m_transform)\n                val velocityTransform = tempXf2\n                velocityTransform.p.x = step.inv_dt * tempXf.p.x\n                velocityTransform.p.y = step.inv_dt * tempXf.p.y\n                velocityTransform.q.s = step.inv_dt * tempXf.q.s\n                velocityTransform.q.c = step.inv_dt * (tempXf.q.c - 1)\n                for (i in group.m_firstIndex until group.m_lastIndex) {\n                    Transform.mulToOutUnsafe(velocityTransform, m_positionBuffer.data!![i],\n                            m_velocityBuffer.data!![i])\n                }\n            }\n            group = group.getNext()\n        }\n    }\n\n    internal fun solveElastic(step: TimeStep) {\n        val elasticStrength = step.inv_dt * m_elasticStrength\n        for (k in 0 until m_triadCount) {\n            val triad = m_triadBuffer[k]\n            if (triad.flags and ParticleType.b2_elasticParticle != 0) {\n                val a = triad.indexA\n                val b = triad.indexB\n                val c = triad.indexC\n                val oa = triad.pa\n                val ob = triad.pb\n                val oc = triad.pc\n                val pa = m_positionBuffer.data!![a]\n                val pb = m_positionBuffer.data!![b]\n                val pc = m_positionBuffer.data!![c]\n                val px = 1f / 3 * (pa.x + pb.x + pc.x)\n                val py = 1f / 3 * (pa.y + pb.y + pc.y)\n                var rs = Vec2.cross(oa, pa) + Vec2.cross(ob, pb) + Vec2.cross(oc, pc)\n                var rc = Vec2.dot(oa, pa) + Vec2.dot(ob, pb) + Vec2.dot(oc, pc)\n                val r2 = rs * rs + rc * rc\n                val invR = if (r2 == 0f) Float.MAX_VALUE else MathUtils.sqrt(1f / r2)\n                rs *= invR\n                rc *= invR\n                val strength = elasticStrength * triad.strength\n                val roax = rc * oa.x - rs * oa.y\n                val roay = rs * oa.x + rc * oa.y\n                val robx = rc * ob.x - rs * ob.y\n                val roby = rs * ob.x + rc * ob.y\n                val rocx = rc * oc.x - rs * oc.y\n                val rocy = rs * oc.x + rc * oc.y\n                val va = m_velocityBuffer.data!![a]\n                val vb = m_velocityBuffer.data!![b]\n                val vc = m_velocityBuffer.data!![c]\n                va.x += strength * (roax - (pa.x - px))\n                va.y += strength * (roay - (pa.y - py))\n                vb.x += strength * (robx - (pb.x - px))\n                vb.y += strength * (roby - (pb.y - py))\n                vc.x += strength * (rocx - (pc.x - px))\n                vc.y += strength * (rocy - (pc.y - py))\n            }\n        }\n    }\n\n    internal fun solveSpring(step: TimeStep) {\n        val springStrength = step.inv_dt * m_springStrength\n        for (k in 0 until m_pairCount) {\n            val pair = m_pairBuffer[k]\n            if (pair.flags and ParticleType.b2_springParticle != 0) {\n                val a = pair.indexA\n                val b = pair.indexB\n                val pa = m_positionBuffer.data!![a]\n                val pb = m_positionBuffer.data!![b]\n                val dx = pb.x - pa.x\n                val dy = pb.y - pa.y\n                val r0 = pair.distance\n                var r1 = MathUtils.sqrt(dx * dx + dy * dy)\n                if (r1 == 0f) r1 = Float.MAX_VALUE\n                val strength = springStrength * pair.strength\n                val fx = strength * (r0 - r1) / r1 * dx\n                val fy = strength * (r0 - r1) / r1 * dy\n                val va = m_velocityBuffer.data!![a]\n                val vb = m_velocityBuffer.data!![b]\n                va.x -= fx\n                va.y -= fy\n                vb.x += fx\n                vb.y += fy\n            }\n        }\n    }\n\n    internal fun solveTensile(step: TimeStep) {\n        m_accumulation2Buffer = requestParticleBuffer({ Vec2() }, m_accumulation2Buffer)\n        for (i in 0 until particleCount) {\n            m_accumulationBuffer[i] = 0f\n            m_accumulation2Buffer!![i].setZero()\n        }\n        for (k in 0 until m_contactCount) {\n            val contact = m_contactBuffer[k]\n            if (contact.flags and ParticleType.b2_tensileParticle != 0) {\n                val a = contact.indexA\n                val b = contact.indexB\n                val w = contact.weight\n                val n = contact.normal\n                m_accumulationBuffer[a] += w\n                m_accumulationBuffer[b] += w\n                val a2A = m_accumulation2Buffer!![a]\n                val a2B = m_accumulation2Buffer!![b]\n                val inter = (1 - w) * w\n                a2A.x -= inter * n.x\n                a2A.y -= inter * n.y\n                a2B.x += inter * n.x\n                a2B.y += inter * n.y\n            }\n        }\n        val strengthA = m_surfaceTensionStrengthA * getCriticalVelocity(step)\n        val strengthB = m_surfaceTensionStrengthB * getCriticalVelocity(step)\n        for (k in 0 until m_contactCount) {\n            val contact = m_contactBuffer[k]\n            if (contact.flags and ParticleType.b2_tensileParticle != 0) {\n                val a = contact.indexA\n                val b = contact.indexB\n                val w = contact.weight\n                val n = contact.normal\n                val a2A = m_accumulation2Buffer!![a]\n                val a2B = m_accumulation2Buffer!![b]\n                val h = m_accumulationBuffer!![a] + m_accumulationBuffer!![b]\n                val sx = a2B.x - a2A.x\n                val sy = a2B.y - a2A.y\n                val fn = (strengthA * (h - 2) + strengthB * (sx * n.x + sy * n.y)) * w\n                val fx = fn * n.x\n                val fy = fn * n.y\n                val va = m_velocityBuffer.data!![a]\n                val vb = m_velocityBuffer.data!![b]\n                va.x -= fx\n                va.y -= fy\n                vb.x += fx\n                vb.y += fy\n            }\n        }\n    }\n\n    internal fun solveViscous(step: TimeStep) {\n        val viscousStrength = m_viscousStrength\n        for (k in 0 until m_bodyContactCount) {\n            val contact = m_bodyContactBuffer[k]\n            val a = contact.index\n            if (m_flagsBuffer.data!![a] and ParticleType.b2_viscousParticle != 0) {\n                val b = contact.body\n                val w = contact.weight\n                val m = contact.mass\n                val p = m_positionBuffer.data!![a]\n                val va = m_velocityBuffer.data!![a]\n                val tempX = p.x - b!!.sweep.c.x\n                val tempY = p.y - b!!.sweep.c.y\n                val vx = -b!!._angularVelocity * tempY + b!!._linearVelocity.x - va.x\n                val vy = b!!._angularVelocity * tempX + b!!._linearVelocity.y - va.y\n                val f = tempVec\n                val pInvMass = particleInvMass\n                f.x = viscousStrength * m * w * vx\n                f.y = viscousStrength * m * w * vy\n                va.x += pInvMass * f.x\n                va.y += pInvMass * f.y\n                f.x = -f.x\n                f.y = -f.y\n                b!!.applyLinearImpulse(f, p, true)\n            }\n        }\n        for (k in 0 until m_contactCount) {\n            val contact = m_contactBuffer[k]\n            if (contact.flags and ParticleType.b2_viscousParticle != 0) {\n                val a = contact.indexA\n                val b = contact.indexB\n                val w = contact.weight\n                val va = m_velocityBuffer.data!![a]\n                val vb = m_velocityBuffer.data!![b]\n                val vx = vb.x - va.x\n                val vy = vb.y - va.y\n                val fx = viscousStrength * w * vx\n                val fy = viscousStrength * w * vy\n                va.x += fx\n                va.y += fy\n                vb.x -= fx\n                vb.y -= fy\n            }\n        }\n    }\n\n    internal fun solvePowder(step: TimeStep) {\n        val powderStrength = m_powderStrength * getCriticalVelocity(step)\n        val minWeight = 1.0f - Settings.particleStride\n        for (k in 0 until m_bodyContactCount) {\n            val contact = m_bodyContactBuffer[k]\n            val a = contact.index\n            if (m_flagsBuffer.data!![a] and ParticleType.b2_powderParticle != 0) {\n                val w = contact.weight\n                if (w > minWeight) {\n                    val b = contact.body\n                    val m = contact.mass\n                    val p = m_positionBuffer.data!![a]\n                    val n = contact.normal\n                    val f = tempVec\n                    val va = m_velocityBuffer.data!![a]\n                    val inter = powderStrength * m * (w - minWeight)\n                    val pInvMass = particleInvMass\n                    f.x = inter * n.x\n                    f.y = inter * n.y\n                    va.x -= pInvMass * f.x\n                    va.y -= pInvMass * f.y\n                    b!!.applyLinearImpulse(f, p, true)\n                }\n            }\n        }\n        for (k in 0 until m_contactCount) {\n            val contact = m_contactBuffer[k]\n            if (contact.flags and ParticleType.b2_powderParticle != 0) {\n                val w = contact.weight\n                if (w > minWeight) {\n                    val a = contact.indexA\n                    val b = contact.indexB\n                    val n = contact.normal\n                    val va = m_velocityBuffer.data!![a]\n                    val vb = m_velocityBuffer.data!![b]\n                    val inter = powderStrength * (w - minWeight)\n                    val fx = inter * n.x\n                    val fy = inter * n.y\n                    va.x -= fx\n                    va.y -= fy\n                    vb.x += fx\n                    vb.y += fy\n                }\n            }\n        }\n    }\n\n    internal fun solveSolid(step: TimeStep) {\n        // applies extra repulsive force from solid particle groups\n        m_depthBuffer = requestParticleBuffer(m_depthBuffer)\n        val ejectionStrength = step.inv_dt * m_ejectionStrength\n        for (k in 0 until m_contactCount) {\n            val contact = m_contactBuffer[k]\n            val a = contact.indexA\n            val b = contact.indexB\n            if (particleGroupBuffer!![a] != particleGroupBuffer!![b]) {\n                val w = contact.weight\n                val n = contact.normal\n                val h = m_depthBuffer!![a] + m_depthBuffer!![b]\n                val va = m_velocityBuffer.data!![a]\n                val vb = m_velocityBuffer.data!![b]\n                val inter = ejectionStrength * h * w\n                val fx = inter * n.x\n                val fy = inter * n.y\n                va.x -= fx\n                va.y -= fy\n                vb.x += fx\n                vb.y += fy\n            }\n        }\n    }\n\n    internal fun solveColorMixing(step: TimeStep) {\n        // mixes color between contacting particles\n        m_colorBuffer.data = requestParticleBuffer({ ParticleColor() }, m_colorBuffer.data)\n        val colorMixing256 = (256 * m_colorMixingStrength).toInt()\n        for (k in 0 until m_contactCount) {\n            val contact = m_contactBuffer[k]\n            val a = contact.indexA\n            val b = contact.indexB\n            if (m_flagsBuffer.data!![a] and m_flagsBuffer.data!![b] and ParticleType.b2_colorMixingParticle != 0) {\n                val colorA = m_colorBuffer.data!![a]!!\n                val colorB = m_colorBuffer.data!![b]!!\n                val dr = (colorMixing256 * ((colorB.r.toInt() and 0xFF) - (colorA.r.toInt() and 0xFF))) ushr 8\n                val dg = (colorMixing256 * ((colorB.g.toInt() and 0xFF) - (colorA.g.toInt() and 0xFF))) ushr 8\n                val db = (colorMixing256 * ((colorB.b.toInt() and 0xFF) - (colorA.b.toInt() and 0xFF))) ushr 8\n                val da = (colorMixing256 * ((colorB.a.toInt() and 0xFF) - (colorA.a.toInt() and 0xFF))) ushr 8\n                colorA.r = (colorA.r.toInt() + dr).toByte()\n                colorA.g = (colorA.g.toInt() + dg).toByte()\n                colorA.b = (colorA.b.toInt() + db).toByte()\n                colorA.a = (colorA.a.toInt() + da).toByte()\n                colorB.r = (colorB.r.toInt() - dr).toByte()\n                colorB.g = (colorB.g.toInt() - dg).toByte()\n                colorB.b = (colorB.b.toInt() - db).toByte()\n                colorB.a = (colorB.a.toInt() - da).toByte()\n            }\n        }\n    }\n\n    internal fun solveZombie() {\n        // removes particles with zombie flag\n        var newCount = 0\n        val newIndices = IntArray(particleCount)\n        for (i in 0 until particleCount) {\n            val flags = m_flagsBuffer.data!![i]\n            if (flags and ParticleType.b2_zombieParticle != 0) {\n                val destructionListener = m_world.particleDestructionListener\n                if (flags and ParticleType.b2_destructionListener != 0 && destructionListener != null) {\n                    destructionListener.sayGoodbye(i)\n                }\n                newIndices[i] = Settings.invalidParticleIndex\n            } else {\n                newIndices[i] = newCount\n                if (i != newCount) {\n                    m_flagsBuffer!!.data!![newCount] = m_flagsBuffer.data!![i]\n                    m_positionBuffer.data!![newCount].set(m_positionBuffer.data!![i])\n                    m_velocityBuffer.data!![newCount].set(m_velocityBuffer.data!![i])\n                    particleGroupBuffer!![newCount] = particleGroupBuffer!![i]!!\n                    if (m_depthBuffer != null) {\n                        m_depthBuffer!![newCount] = m_depthBuffer!![i]\n                    }\n                    if (m_colorBuffer.data != null) {\n                        m_colorBuffer.data!![newCount].set(m_colorBuffer.data!![i])\n                    }\n                    if (m_userDataBuffer.data != null) {\n                        m_userDataBuffer!!.data!![newCount] = m_userDataBuffer.data!![i]\n                    }\n                }\n                newCount++\n            }\n        }\n\n        // update proxies\n        for (k in 0 until m_proxyCount) {\n            val proxy = m_proxyBuffer[k]\n            proxy.index = newIndices[proxy.index]\n        }\n\n        // Proxy lastProxy = std.remove_if(\n        // m_proxyBuffer, m_proxyBuffer + m_proxyCount,\n        // Test.IsProxyInvalid);\n        // m_proxyCount = (int) (lastProxy - m_proxyBuffer);\n        var j = m_proxyCount\n        run {\n            var i = 0\n            while (i < j) {\n                if (Test.IsProxyInvalid(m_proxyBuffer[i])) {\n                    --j\n                    val temp = m_proxyBuffer[j]\n                    m_proxyBuffer[j] = m_proxyBuffer[i]\n                    m_proxyBuffer[i] = temp\n                    --i\n                }\n                i++\n            }\n        }\n        m_proxyCount = j\n\n        // update contacts\n        for (k in 0 until m_contactCount) {\n            val contact = m_contactBuffer[k]\n            contact.indexA = newIndices[contact.indexA]\n            contact.indexB = newIndices[contact.indexB]\n        }\n        // ParticleContact lastContact = std.remove_if(\n        // m_contactBuffer, m_contactBuffer + m_contactCount,\n        // Test.IsContactInvalid);\n        // m_contactCount = (int) (lastContact - m_contactBuffer);\n        j = m_contactCount\n        run {\n            var i = 0\n            while (i < j) {\n                if (Test.IsContactInvalid(m_contactBuffer[i])) {\n                    --j\n                    val temp = m_contactBuffer[j]\n                    m_contactBuffer[j] = m_contactBuffer[i]\n                    m_contactBuffer[i] = temp\n                    --i\n                }\n                i++\n            }\n        }\n        m_contactCount = j\n\n        // update particle-body contacts\n        for (k in 0 until m_bodyContactCount) {\n            val contact = m_bodyContactBuffer[k]\n            contact.index = newIndices[contact.index]\n        }\n        // ParticleBodyContact lastBodyContact = std.remove_if(\n        // m_bodyContactBuffer, m_bodyContactBuffer + m_bodyContactCount,\n        // Test.IsBodyContactInvalid);\n        // m_bodyContactCount = (int) (lastBodyContact - m_bodyContactBuffer);\n        j = m_bodyContactCount\n        run {\n            var i = 0\n            while (i < j) {\n                if (Test.IsBodyContactInvalid(m_bodyContactBuffer[i])) {\n                    --j\n                    val temp = m_bodyContactBuffer[j]\n                    m_bodyContactBuffer[j] = m_bodyContactBuffer[i]\n                    m_bodyContactBuffer[i] = temp\n                    --i\n                }\n                i++\n            }\n        }\n        m_bodyContactCount = j\n\n        // update pairs\n        for (k in 0 until m_pairCount) {\n            val pair = m_pairBuffer[k]\n            pair.indexA = newIndices[pair.indexA]\n            pair.indexB = newIndices[pair.indexB]\n        }\n        // Pair lastPair = std.remove_if(m_pairBuffer, m_pairBuffer + m_pairCount, Test.IsPairInvalid);\n        // m_pairCount = (int) (lastPair - m_pairBuffer);\n        j = m_pairCount\n        run {\n            var i = 0\n            while (i < j) {\n                if (Test.IsPairInvalid(m_pairBuffer[i])) {\n                    --j\n                    val temp = m_pairBuffer[j]\n                    m_pairBuffer[j] = m_pairBuffer[i]\n                    m_pairBuffer[i] = temp\n                    --i\n                }\n                i++\n            }\n        }\n        m_pairCount = j\n\n        // update triads\n        for (k in 0 until m_triadCount) {\n            val triad = m_triadBuffer[k]\n            triad.indexA = newIndices[triad.indexA]\n            triad.indexB = newIndices[triad.indexB]\n            triad.indexC = newIndices[triad.indexC]\n        }\n        // Triad lastTriad =\n        // std.remove_if(m_triadBuffer, m_triadBuffer + m_triadCount, Test.isTriadInvalid);\n        // m_triadCount = (int) (lastTriad - m_triadBuffer);\n        j = m_triadCount\n        run {\n            var i = 0\n            while (i < j) {\n                if (Test.IsTriadInvalid(m_triadBuffer[i])) {\n                    --j\n                    val temp = m_triadBuffer[j]\n                    m_triadBuffer[j] = m_triadBuffer[i]\n                    m_triadBuffer[i] = temp\n                    --i\n                }\n                i++\n            }\n        }\n        m_triadCount = j\n\n        // update groups\n        run {\n            var group = m_groupList\n            while (group != null) {\n                var firstIndex = newCount\n                var lastIndex = 0\n                var modified = false\n                for (i in group!!.m_firstIndex until group!!.m_lastIndex) {\n                    j = newIndices[i]\n                    if (j >= 0) {\n                        firstIndex = MathUtils.min(firstIndex, j)\n                        lastIndex = MathUtils.max(lastIndex, j + 1)\n                    } else {\n                        modified = true\n                    }\n                }\n                if (firstIndex < lastIndex) {\n                    group!!.m_firstIndex = firstIndex\n                    group!!.m_lastIndex = lastIndex\n                    if (modified) {\n                        if (group!!.m_groupFlags and ParticleGroupType.b2_rigidParticleGroup != 0) {\n                            group!!.m_toBeSplit = true\n                        }\n                    }\n                } else {\n                    group!!.m_firstIndex = 0\n                    group!!.m_lastIndex = 0\n                    if (group!!.m_destroyAutomatically) {\n                        group!!.m_toBeDestroyed = true\n                    }\n                }\n                group = group!!.getNext()\n            }\n        }\n\n        // update particle count\n        particleCount = newCount\n        // m_world.m_stackAllocator.Free(newIndices);\n\n        // destroy bodies with no particles\n        var group = m_groupList\n        while (group != null) {\n            val next = group!!.getNext()\n            if (group!!.m_toBeDestroyed) {\n                destroyParticleGroup(group)\n            } else if (group!!.m_toBeSplit) {\n                // TODO: split the group\n            }\n            group = next\n        }\n    }\n\n    private class NewIndices {\n        internal var start: Int = 0\n        internal var mid: Int = 0\n        internal var end: Int = 0\n\n        internal fun getIndex(i: Int): Int {\n            return if (i < start) {\n                i\n            } else if (i < mid) {\n                i + end - mid\n            } else if (i < end) {\n                i + start - mid\n            } else {\n                i\n            }\n        }\n    }\n\n\n    internal fun RotateBuffer(start: Int, mid: Int, end: Int) {\n        // move the particles assigned to the given group toward the end of array\n        if (start == mid || mid == end) {\n            return\n        }\n        newIndices.start = start\n        newIndices.mid = mid\n        newIndices.end = end\n\n        BufferUtils.rotate(m_flagsBuffer.data!!, start, mid, end)\n        BufferUtils.rotate<Vec2>(m_positionBuffer.data!!, start, mid, end)\n        BufferUtils.rotate<Vec2>(m_velocityBuffer.data!!, start, mid, end)\n        BufferUtils.rotate<ParticleGroup>(particleGroupBuffer!! as Array<ParticleGroup>, start, mid, end)\n        if (m_depthBuffer != null) {\n            BufferUtils.rotate(m_depthBuffer!!, start, mid, end)\n        }\n        if (m_colorBuffer.data != null) {\n            BufferUtils.rotate<ParticleColor>(m_colorBuffer.data!!, start, mid, end)\n        }\n        if (m_userDataBuffer.data != null) {\n            BufferUtils.rotate<Any>(m_userDataBuffer.data!!, start, mid, end)\n        }\n\n        // update proxies\n        for (k in 0 until m_proxyCount) {\n            val proxy = m_proxyBuffer[k]\n            proxy.index = newIndices.getIndex(proxy.index)\n        }\n\n        // update contacts\n        for (k in 0 until m_contactCount) {\n            val contact = m_contactBuffer[k]\n            contact.indexA = newIndices.getIndex(contact.indexA)\n            contact.indexB = newIndices.getIndex(contact.indexB)\n        }\n\n        // update particle-body contacts\n        for (k in 0 until m_bodyContactCount) {\n            val contact = m_bodyContactBuffer[k]\n            contact.index = newIndices.getIndex(contact.index)\n        }\n\n        // update pairs\n        for (k in 0 until m_pairCount) {\n            val pair = m_pairBuffer[k]\n            pair.indexA = newIndices.getIndex(pair.indexA)\n            pair.indexB = newIndices.getIndex(pair.indexB)\n        }\n\n        // update triads\n        for (k in 0 until m_triadCount) {\n            val triad = m_triadBuffer[k]\n            triad.indexA = newIndices.getIndex(triad.indexA)\n            triad.indexB = newIndices.getIndex(triad.indexB)\n            triad.indexC = newIndices.getIndex(triad.indexC)\n        }\n\n        // update groups\n        var group = m_groupList\n        while (group != null) {\n            group.m_firstIndex = newIndices.getIndex(group.m_firstIndex)\n            group.m_lastIndex = newIndices.getIndex(group.m_lastIndex - 1) + 1\n            group = group.getNext()\n        }\n    }\n\n    internal fun getCriticalVelocity(step: TimeStep): Float {\n        return m_particleDiameter * step.inv_dt\n    }\n\n    internal fun getCriticalVelocitySquared(step: TimeStep): Float {\n        val velocity = getCriticalVelocity(step)\n        return velocity * velocity\n    }\n\n    internal fun getCriticalPressure(step: TimeStep): Float {\n        return m_density * getCriticalVelocitySquared(step)\n    }\n\n    internal fun setParticleBuffer(buffer: ParticleBufferInt, newData: IntArray?, newCapacity: Int) {\n        assert(newData != null && newCapacity != 0 || newData == null && newCapacity == 0)\n        if (buffer.userSuppliedCapacity != 0) {\n            // m_world.m_blockAllocator.Free(buffer.data, sizeof(T) * m_internalAllocatedCapacity);\n        }\n        buffer.data = newData\n        buffer.userSuppliedCapacity = newCapacity\n    }\n\n    internal fun <T : Any> setParticleBuffer(buffer: ParticleBuffer<T>, newData: Array<T>?, newCapacity: Int) {\n        assert(newData != null && newCapacity != 0 || newData == null && newCapacity == 0)\n        if (buffer.userSuppliedCapacity != 0) {\n            // m_world.m_blockAllocator.Free(buffer.data, sizeof(T) * m_internalAllocatedCapacity);\n        }\n        buffer.data = newData\n        buffer.userSuppliedCapacity = newCapacity\n    }\n\n    fun setParticleFlagsBuffer(buffer: IntArray, capacity: Int) {\n        setParticleBuffer(m_flagsBuffer, buffer, capacity)\n    }\n\n    fun setParticlePositionBuffer(buffer: Array<Vec2>, capacity: Int) {\n        setParticleBuffer(m_positionBuffer, buffer, capacity)\n    }\n\n    fun setParticleVelocityBuffer(buffer: Array<Vec2>, capacity: Int) {\n        setParticleBuffer(m_velocityBuffer, buffer, capacity)\n    }\n\n    fun setParticleColorBuffer(buffer: Array<ParticleColor>, capacity: Int) {\n        setParticleBuffer(m_colorBuffer, buffer, capacity)\n    }\n\n    fun getParticleGroupList(): Array<ParticleGroup?>? {\n        return particleGroupBuffer!!\n    }\n\n    fun setParticleUserDataBuffer(buffer: Array<Any>, capacity: Int) {\n        setParticleBuffer(m_userDataBuffer, buffer, capacity)\n    }\n\n    fun queryAABB(callback: ParticleQueryCallback, aabb: AABB) {\n        if (m_proxyCount == 0) {\n            return\n        }\n\n        val lowerBoundX = aabb.lowerBound.x\n        val lowerBoundY = aabb.lowerBound.y\n        val upperBoundX = aabb.upperBound.x\n        val upperBoundY = aabb.upperBound.y\n        val firstProxy = lowerBound(m_proxyBuffer, m_proxyCount,\n                computeTag(m_inverseDiameter * lowerBoundX, m_inverseDiameter * lowerBoundY))\n        val lastProxy = upperBound(m_proxyBuffer, m_proxyCount,\n                computeTag(m_inverseDiameter * upperBoundX, m_inverseDiameter * upperBoundY))\n        for (proxy in firstProxy until lastProxy) {\n            val i = m_proxyBuffer[proxy].index\n            val p = m_positionBuffer.data!![i]\n            if (lowerBoundX < p.x && p.x < upperBoundX && lowerBoundY < p.y && p.y < upperBoundY) {\n                if (!callback.reportParticle(i)) {\n                    break\n                }\n            }\n        }\n    }\n\n    /**\n     * @param callback\n     * @param point1\n     * @param point2\n     */\n    fun raycast(callback: ParticleRaycastCallback, point1: Vec2, point2: Vec2) {\n        if (m_proxyCount == 0) {\n            return\n        }\n        val firstProxy = lowerBound(\n                m_proxyBuffer,\n                m_proxyCount,\n                computeTag(m_inverseDiameter * MathUtils.min(point1.x, point2.x) - 1, m_inverseDiameter * MathUtils.min(point1.y, point2.y) - 1))\n        val lastProxy = upperBound(\n                m_proxyBuffer,\n                m_proxyCount,\n                computeTag(m_inverseDiameter * MathUtils.max(point1.x, point2.x) + 1, m_inverseDiameter * MathUtils.max(point1.y, point2.y) + 1))\n        var fraction = 1f\n        // solving the following equation:\n        // ((1-t)*point1+t*point2-position)^2=diameter^2\n        // where t is a potential fraction\n        val vx = point2.x - point1.x\n        val vy = point2.y - point1.y\n        var v2 = vx * vx + vy * vy\n        if (v2 == 0f) v2 = Float.MAX_VALUE\n        for (proxy in firstProxy until lastProxy) {\n            val i = m_proxyBuffer[proxy].index\n            val posI = m_positionBuffer.data!![i]\n            val px = point1.x - posI.x\n            val py = point1.y - posI.y\n            val pv = px * vx + py * vy\n            val p2 = px * px + py * py\n            val determinant = pv * pv - v2 * (p2 - m_squaredDiameter)\n            if (determinant >= 0) {\n                val sqrtDeterminant = MathUtils.sqrt(determinant)\n                // find a solution between 0 and fraction\n                var t = (-pv - sqrtDeterminant) / v2\n                if (t > fraction) {\n                    continue\n                }\n                if (t < 0) {\n                    t = (-pv + sqrtDeterminant) / v2\n                    if (t < 0 || t > fraction) {\n                        continue\n                    }\n                }\n                val n = tempVec\n                tempVec.x = px + t * vx\n                tempVec.y = py + t * vy\n                n.normalize()\n                val point = tempVec2\n                point.x = point1.x + t * vx\n                point.y = point1.y + t * vy\n                val f = callback.reportParticle(i, point, n, t)\n                fraction = MathUtils.min(fraction, f)\n                if (fraction <= 0) {\n                    break\n                }\n            }\n        }\n    }\n\n    fun computeParticleCollisionEnergy(): Float {\n        var sum_v2 = 0f\n        for (k in 0 until m_contactCount) {\n            val contact = m_contactBuffer[k]\n            val a = contact.indexA\n            val b = contact.indexB\n            val n = contact.normal\n            val va = m_velocityBuffer.data!![a]\n            val vb = m_velocityBuffer.data!![b]\n            val vx = vb.x - va.x\n            val vy = vb.y - va.y\n            val vn = vx * n.x + vy * n.y\n            if (vn < 0) {\n                sum_v2 += vn * vn\n            }\n        }\n        return 0.5f * particleMass * sum_v2\n    }\n\n    internal fun <T : Any> requestParticleBuffer(newInstance: () -> T, buffer: Array<T>?): Array<T> {\n        var buffer = buffer\n        if (buffer == null) {\n            buffer = Array<Any>(m_internalAllocatedCapacity) { newInstance() } as Array<T>\n        }\n        return buffer\n    }\n\n    internal fun requestParticleBuffer(buffer: FloatArray?): FloatArray {\n        var buffer = buffer\n        if (buffer == null) {\n            buffer = FloatArray(m_internalAllocatedCapacity)\n        }\n        return buffer\n    }\n\n    class ParticleBuffer<T : Any>(internal val dataClass: () -> T) {\n        var data: Array<T>? = null\n        internal var userSuppliedCapacity: Int = 0\n    }\n\n    internal class ParticleBufferInt {\n        var data: IntArray? = null\n        var userSuppliedCapacity: Int = 0\n    }\n\n    /** Used for detecting particle contacts  */\n    class Proxy : Comparable<Proxy> {\n        internal var index: Int = 0\n        internal var tag: Long = 0\n\n        override fun compareTo(o: Proxy): Int {\n            return if (tag - o.tag < 0) -1 else if (o.tag == tag) 0 else 1\n        }\n\n        override fun equals(obj: Any?): Boolean {\n            if (this === obj) return true\n            if (obj == null) return false\n            if (this::class != obj::class) return false\n            val other = obj as Proxy?\n            return tag == other!!.tag\n        }\n    }\n\n    /** Connection between two particles  */\n    class Pair {\n        internal var indexA: Int = 0\n        internal var indexB: Int = 0\n        internal var flags: Int = 0\n        internal var strength: Float = 0.toFloat()\n        internal var distance: Float = 0.toFloat()\n    }\n\n    /** Connection between three particles  */\n    class Triad {\n        internal var indexA: Int = 0\n        internal var indexB: Int = 0\n        internal var indexC: Int = 0\n        internal var flags: Int = 0\n        internal var strength: Float = 0.toFloat()\n        internal val pa = Vec2()\n        internal val pb = Vec2()\n        internal val pc = Vec2()\n        internal var ka: Float = 0.toFloat()\n        internal var kb: Float = 0.toFloat()\n        internal var kc: Float = 0.toFloat()\n        internal var s: Float = 0.toFloat()\n    }\n\n    // Callback used with VoronoiDiagram.\n    internal class CreateParticleGroupCallback : VoronoiDiagramCallback {\n\n        var system: ParticleSystem? = null\n        var def: ParticleGroupDef? = null // pointer\n        var firstIndex: Int = 0\n        override fun callback(a: Int, b: Int, c: Int) {\n            val pa = system!!.m_positionBuffer.data!![a]\n            val pb = system!!.m_positionBuffer.data!![b]\n            val pc = system!!.m_positionBuffer.data!![c]\n            val dabx = pa.x - pb.x\n            val daby = pa.y - pb.y\n            val dbcx = pb.x - pc.x\n            val dbcy = pb.y - pc.y\n            val dcax = pc.x - pa.x\n            val dcay = pc.y - pa.y\n            val maxDistanceSquared = Settings.maxTriadDistanceSquared * system!!.m_squaredDiameter\n            if (dabx * dabx + daby * daby < maxDistanceSquared\n                    && dbcx * dbcx + dbcy * dbcy < maxDistanceSquared\n                    && dcax * dcax + dcay * dcay < maxDistanceSquared) {\n                if (system!!.m_triadCount >= system!!.m_triadCapacity) {\n                    val oldCapacity = system!!.m_triadCapacity\n                    val newCapacity = if (system!!.m_triadCount != 0)\n                        2 * system!!.m_triadCount\n                    else\n                        Settings.minParticleBufferCapacity\n                    system!!.m_triadBuffer = BufferUtils.reallocateBuffer({ Triad() }, system!!.m_triadBuffer, oldCapacity,\n                            newCapacity)\n                    system!!.m_triadCapacity = newCapacity\n                }\n                val triad = system!!.m_triadBuffer[system!!.m_triadCount]\n                triad.indexA = a\n                triad.indexB = b\n                triad.indexC = c\n                triad.flags = (system!!.m_flagsBuffer.data!![a] or system!!.m_flagsBuffer.data!![b]\n                        or system!!.m_flagsBuffer.data!![c])\n                triad.strength = def!!.strength\n                val midPointx = 1.toFloat() / 3 * (pa.x + pb.x + pc.x)\n                val midPointy = 1.toFloat() / 3 * (pa.y + pb.y + pc.y)\n                triad.pa.x = pa.x - midPointx\n                triad.pa.y = pa.y - midPointy\n                triad.pb.x = pb.x - midPointx\n                triad.pb.y = pb.y - midPointy\n                triad.pc.x = pc.x - midPointx\n                triad.pc.y = pc.y - midPointy\n                triad.ka = -(dcax * dabx + dcay * daby)\n                triad.kb = -(dabx * dbcx + daby * dbcy)\n                triad.kc = -(dbcx * dcax + dbcy * dcay)\n                triad.s = Vec2.cross(pa, pb) + Vec2.cross(pb, pc) + Vec2.cross(pc, pa)\n                system!!.m_triadCount++\n            }\n        }\n    }\n\n    // Callback used with VoronoiDiagram.\n    internal class JoinParticleGroupsCallback : VoronoiDiagramCallback {\n\n        var system: ParticleSystem? = null\n        var groupA: ParticleGroup? = null\n        var groupB: ParticleGroup? = null\n        override fun callback(a: Int, b: Int, c: Int) {\n            // Create a triad if it will contain particles from both groups.\n            val countA = ((if (a < groupB!!.m_firstIndex) 1 else 0) + (if (b < groupB!!.m_firstIndex) 1 else 0)\n                    + if (c < groupB!!.m_firstIndex) 1 else 0)\n            if (countA > 0 && countA < 3) {\n                val af = system!!.m_flagsBuffer.data!![a]\n                val bf = system!!.m_flagsBuffer.data!![b]\n                val cf = system!!.m_flagsBuffer.data!![c]\n                if (af and bf and cf and k_triadFlags != 0) {\n                    val pa = system!!.m_positionBuffer.data!![a]\n                    val pb = system!!.m_positionBuffer.data!![b]\n                    val pc = system!!.m_positionBuffer.data!![c]\n                    val dabx = pa.x - pb.x\n                    val daby = pa.y - pb.y\n                    val dbcx = pb.x - pc.x\n                    val dbcy = pb.y - pc.y\n                    val dcax = pc.x - pa.x\n                    val dcay = pc.y - pa.y\n                    val maxDistanceSquared = Settings.maxTriadDistanceSquared * system!!.m_squaredDiameter\n                    if (dabx * dabx + daby * daby < maxDistanceSquared\n                            && dbcx * dbcx + dbcy * dbcy < maxDistanceSquared\n                            && dcax * dcax + dcay * dcay < maxDistanceSquared) {\n                        if (system!!.m_triadCount >= system!!.m_triadCapacity) {\n                            val oldCapacity = system!!.m_triadCapacity\n                            val newCapacity = if (system!!.m_triadCount != 0)\n                                2 * system!!.m_triadCount\n                            else\n                                Settings.minParticleBufferCapacity\n                            system!!.m_triadBuffer = BufferUtils.reallocateBuffer({ Triad() }, system!!.m_triadBuffer, oldCapacity,\n                                    newCapacity)\n                            system!!.m_triadCapacity = newCapacity\n                        }\n                        val triad = system!!.m_triadBuffer[system!!.m_triadCount]\n                        triad.indexA = a\n                        triad.indexB = b\n                        triad.indexC = c\n                        triad.flags = af or bf or cf\n                        triad.strength = MathUtils.min(groupA!!.m_strength, groupB!!.m_strength)\n                        val midPointx = 1.toFloat() / 3 * (pa.x + pb.x + pc.x)\n                        val midPointy = 1.toFloat() / 3 * (pa.y + pb.y + pc.y)\n                        triad.pa.x = pa.x - midPointx\n                        triad.pa.y = pa.y - midPointy\n                        triad.pb.x = pb.x - midPointx\n                        triad.pb.y = pb.y - midPointy\n                        triad.pc.x = pc.x - midPointx\n                        triad.pc.y = pc.y - midPointy\n                        triad.ka = -(dcax * dabx + dcay * daby)\n                        triad.kb = -(dabx * dbcx + daby * dbcy)\n                        triad.kc = -(dbcx * dcax + dbcy * dcay)\n                        triad.s = Vec2.cross(pa, pb) + Vec2.cross(pb, pc) + Vec2.cross(pc, pa)\n                        system!!.m_triadCount++\n                    }\n                }\n            }\n        }\n    }\n\n    internal class DestroyParticlesInShapeCallback : ParticleQueryCallback {\n        lateinit var system: ParticleSystem\n        lateinit var shape: Shape\n        lateinit var xf: Transform\n        var callDestructionListener: Boolean = false\n        var destroyed: Int = 0\n\n        fun init(system: ParticleSystem, shape: Shape, xf: Transform,\n                 callDestructionListener: Boolean) {\n            this.system = system\n            this.shape = shape\n            this.xf = xf\n            this.destroyed = 0\n            this.callDestructionListener = callDestructionListener\n        }\n\n        override fun reportParticle(index: Int): Boolean {\n            assert(index >= 0 && index < system.particleCount)\n            if (shape.testPoint(xf, system.m_positionBuffer.data!![index])) {\n                system.destroyParticle(index, callDestructionListener)\n                destroyed++\n            }\n            return true\n        }\n    }// TODO Auto-generated constructor stub\n\n    internal class UpdateBodyContactsCallback : QueryCallback {\n        var system: ParticleSystem? = null\n\n        private val tempVec = Vec2()\n\n        override fun reportFixture(fixture: Fixture): Boolean {\n            if (fixture.isSensor) {\n                return true\n            }\n            val shape = fixture.getShape()\n            val b = fixture.getBody()\n            val bp = b!!.worldCenter\n            val bm = b.getMass()\n            val bI = b.inertia - bm * b.localCenter.lengthSquared()\n            val invBm = if (bm > 0) 1f / bm else 0f\n            val invBI = if (bI > 0) 1f / bI else 0f\n            val childCount = shape!!.getChildCount()\n            for (childIndex in 0 until childCount) {\n                val aabb = fixture.getAABB(childIndex)\n                val aabblowerBoundx = aabb.lowerBound.x - system!!.m_particleDiameter\n                val aabblowerBoundy = aabb.lowerBound.y - system!!.m_particleDiameter\n                val aabbupperBoundx = aabb.upperBound.x + system!!.m_particleDiameter\n                val aabbupperBoundy = aabb.upperBound.y + system!!.m_particleDiameter\n                val firstProxy = lowerBound(\n                        system!!.m_proxyBuffer,\n                        system!!.m_proxyCount,\n                        computeTag(system!!.m_inverseDiameter * aabblowerBoundx, system!!.m_inverseDiameter * aabblowerBoundy))\n                val lastProxy = upperBound(\n                        system!!.m_proxyBuffer,\n                        system!!.m_proxyCount,\n                        computeTag(system!!.m_inverseDiameter * aabbupperBoundx, system!!.m_inverseDiameter * aabbupperBoundy))\n\n                for (proxy in firstProxy until lastProxy) {\n                    val a = system!!.m_proxyBuffer[proxy].index\n                    val ap = system!!.m_positionBuffer.data!![a]\n                    if (aabblowerBoundx <= ap.x && ap.x <= aabbupperBoundx && aabblowerBoundy <= ap.y\n                            && ap.y <= aabbupperBoundy) {\n                        val d: Float\n                        val n = tempVec\n                        d = fixture.computeDistance(ap, childIndex, n)\n                        if (d < system!!.m_particleDiameter) {\n                            val invAm = if (system!!.m_flagsBuffer.data!![a] and ParticleType.b2_wallParticle != 0)\n                                0f\n                            else\n                                system!!.particleInvMass!!\n                            val rpx = ap.x - bp.x\n                            val rpy = ap.y - bp.y\n                            val rpn = rpx * n.y - rpy * n.x\n                            if (system!!.m_bodyContactCount >= system!!.m_bodyContactCapacity) {\n                                val oldCapacity = system!!.m_bodyContactCapacity\n                                val newCapacity = if (system!!.m_bodyContactCount != 0)\n                                    2 * system!!.m_bodyContactCount\n                                else\n                                    Settings.minParticleBufferCapacity\n                                system!!.m_bodyContactBuffer = BufferUtils.reallocateBuffer({ ParticleBodyContact() },\n                                        system!!.m_bodyContactBuffer, oldCapacity, newCapacity)\n                                system!!.m_bodyContactCapacity = newCapacity\n                            }\n                            val contact = system!!.m_bodyContactBuffer[system!!.m_bodyContactCount]\n                            contact.index = a\n                            contact.body = b\n                            contact.weight = 1 - d * system!!.m_inverseDiameter\n                            contact.normal.x = -n.x\n                            contact.normal.y = -n.y\n                            contact.mass = 1 / (invAm + invBm + invBI * rpn * rpn)\n                            system!!.m_bodyContactCount++\n                        }\n                    }\n                }\n            }\n            return true\n        }\n    }\n\n    internal class SolveCollisionCallback : QueryCallback {\n        var system: ParticleSystem? = null\n        var step: TimeStep? = null\n\n        private val input = RayCastInput()\n        private val output = RayCastOutput()\n        private val tempVec = Vec2()\n        private val tempVec2 = Vec2()\n\n        override fun reportFixture(fixture: Fixture): Boolean {\n            if (fixture.isSensor) {\n                return true\n            }\n            val shape = fixture.getShape()\n            val body = fixture.getBody()\n            val childCount = shape!!.getChildCount()\n            for (childIndex in 0 until childCount) {\n                val aabb = fixture.getAABB(childIndex)\n                val aabblowerBoundx = aabb.lowerBound.x - system!!.m_particleDiameter\n                val aabblowerBoundy = aabb.lowerBound.y - system!!.m_particleDiameter\n                val aabbupperBoundx = aabb.upperBound.x + system!!.m_particleDiameter\n                val aabbupperBoundy = aabb.upperBound.y + system!!.m_particleDiameter\n                val firstProxy = lowerBound(\n                        system!!.m_proxyBuffer,\n                        system!!.m_proxyCount,\n                        computeTag(system!!.m_inverseDiameter * aabblowerBoundx, system!!.m_inverseDiameter * aabblowerBoundy))\n                val lastProxy = upperBound(\n                        system!!.m_proxyBuffer,\n                        system!!.m_proxyCount,\n                        computeTag(system!!.m_inverseDiameter * aabbupperBoundx, system!!.m_inverseDiameter * aabbupperBoundy))\n\n                for (proxy in firstProxy until lastProxy) {\n                    val a = system!!.m_proxyBuffer[proxy].index\n                    val ap = system!!.m_positionBuffer.data!![a]\n                    if (aabblowerBoundx <= ap.x && ap.x <= aabbupperBoundx && aabblowerBoundy <= ap.y\n                            && ap.y <= aabbupperBoundy) {\n                        val av = system!!.m_velocityBuffer.data!![a]\n                        val temp = tempVec\n                        Transform.mulTransToOutUnsafe(body!!.xf0, ap, temp)\n                        Transform.mulToOutUnsafe(body.xf, temp, input.p1)\n                        input.p2.x = ap.x + step!!.dt * av.x\n                        input.p2.y = ap.y + step!!.dt * av.y\n                        input.maxFraction = 1f\n                        if (fixture.raycast(output, input, childIndex)) {\n                            val p = tempVec\n                            p.x = ((1 - output.fraction) * input.p1.x + output.fraction * input.p2.x\n                                    + Settings.linearSlop * output.normal.x)\n                            p.y = ((1 - output.fraction) * input.p1.y + output.fraction * input.p2.y\n                                    + Settings.linearSlop * output.normal.y)\n\n                            val vx = step!!.inv_dt * (p.x - ap.x)\n                            val vy = step!!.inv_dt * (p.y - ap.y)\n                            av.x = vx\n                            av.y = vy\n                            val particleMass = system!!.particleMass\n                            val ax = particleMass * (av.x - vx)\n                            val ay = particleMass * (av.y - vy)\n                            val b = output.normal\n                            val fdn = ax * b.x + ay * b.y\n                            val f = tempVec2\n                            f.x = fdn * b.x\n                            f.y = fdn * b.y\n                            body.applyLinearImpulse(f, p, true)\n                        }\n                    }\n                }\n            }\n            return true\n        }\n    }\n\n    internal object Test {\n        fun IsProxyInvalid(proxy: Proxy): Boolean {\n            return proxy.index < 0\n        }\n\n        fun IsContactInvalid(contact: ParticleContact): Boolean {\n            return contact.indexA < 0 || contact.indexB < 0\n        }\n\n        fun IsBodyContactInvalid(contact: ParticleBodyContact): Boolean {\n            return contact.index < 0\n        }\n\n        fun IsPairInvalid(pair: Pair): Boolean {\n            return pair.indexA < 0 || pair.indexB < 0\n        }\n\n        fun IsTriadInvalid(triad: Triad): Boolean {\n            return triad.indexA < 0 || triad.indexB < 0 || triad.indexC < 0\n        }\n    }\n\n    companion object {\n        /** All particle types that require creating pairs  */\n        private val k_pairFlags = ParticleType.b2_springParticle\n        /** All particle types that require creating triads  */\n        private val k_triadFlags = ParticleType.b2_elasticParticle\n        /** All particle types that require computing depth  */\n        private val k_noPressureFlags = ParticleType.b2_powderParticle\n\n        internal val xTruncBits = 12\n        internal val yTruncBits = 12\n        internal val tagBits = 8 * 4 - 1  /* sizeof(int) */\n        internal val yOffset = (1 shl yTruncBits - 1).toLong()\n        internal val yShift = tagBits - yTruncBits\n        internal val xShift = tagBits - yTruncBits - xTruncBits\n        internal val xScale = (1 shl xShift).toLong()\n        internal val xOffset = xScale * (1 shl xTruncBits - 1)\n        internal val xMask = (1 shl xTruncBits) - 1\n        internal val yMask = (1 shl yTruncBits) - 1\n\n        internal fun computeTag(x: Float, y: Float): Long {\n            return ((y + yOffset).toLong() shl yShift) + ((xScale * x).toLong() + xOffset)\n        }\n\n        internal fun computeRelativeTag(tag: Long, x: Int, y: Int): Long {\n            return tag + (y shl yShift).toLong() + (x shl xShift).toLong()\n        }\n\n        internal fun limitCapacity(capacity: Int, maxCount: Int): Int {\n            return if (maxCount != 0 && capacity > maxCount) maxCount else capacity\n        }\n\n        private fun lowerBound(ray: Array<Proxy>, length: Int, tag: Long): Int {\n            var length = length\n            var left = 0\n            var step: Int\n            var curr: Int\n            while (length > 0) {\n                step = length / 2\n                curr = left + step\n                if (ray[curr].tag < tag) {\n                    left = curr + 1\n                    length -= step + 1\n                } else {\n                    length = step\n                }\n            }\n            return left\n        }\n\n        private fun upperBound(ray: Array<Proxy>, length: Int, tag: Long): Int {\n            var length = length\n            var left = 0\n            var step: Int\n            var curr: Int\n            while (length > 0) {\n                step = length / 2\n                curr = left + step\n                if (ray[curr].tag <= tag) {\n                    left = curr + 1\n                    length -= step + 1\n                } else {\n                    length = step\n                }\n            }\n            return left\n        }\n\n        // reallocate a buffer\n        internal fun <T : Any> reallocateBuffer(buffer: ParticleBuffer<T>, oldCapacity: Int, newCapacity: Int,\n                                          deferred: Boolean): Array<T> {\n            assert(newCapacity > oldCapacity)\n            return BufferUtils.reallocateBuffer(buffer.dataClass, buffer.data, buffer.userSuppliedCapacity,\n                    oldCapacity, newCapacity, deferred)\n        }\n\n        internal fun reallocateBuffer(buffer: ParticleBufferInt, oldCapacity: Int, newCapacity: Int,\n                                      deferred: Boolean): IntArray {\n            assert(newCapacity > oldCapacity)\n            return BufferUtils.reallocateBuffer(buffer.data, buffer.userSuppliedCapacity, oldCapacity,\n                    newCapacity, deferred)\n        }\n    }\n}\n","package org.jbox2d.particle\n\n/**\n * The particle type. Can be combined with | operator. Zero means liquid.\n *\n * @author dmurph\n */\nobject ParticleType {\n\n    val b2_waterParticle = 0\n    /** removed after next step  */\n\n    val b2_zombieParticle = 1 shl 1\n    /** zero velocity  */\n\n    val b2_wallParticle = 1 shl 2\n    /** with restitution from stretching  */\n\n    val b2_springParticle = 1 shl 3\n    /** with restitution from deformation  */\n\n    val b2_elasticParticle = 1 shl 4\n    /** with viscosity  */\n\n    val b2_viscousParticle = 1 shl 5\n    /** without isotropic pressure  */\n\n    val b2_powderParticle = 1 shl 6\n    /** with surface tension  */\n\n    val b2_tensileParticle = 1 shl 7\n    /** mixing color between contacting particles  */\n\n    val b2_colorMixingParticle = 1 shl 8\n    /** call b2DestructionListener on destruction  */\n\n    val b2_destructionListener = 1 shl 9\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.pooling.arrays\n\nimport org.jbox2d.common.Vec2\nimport org.jbox2d.internal.assert\n\n/**\n * not thread safe Vec2[] pool\n * @author dmurph\n */\nclass Vec2ArrayPool {\n\n    private val map = HashMap<Int, Array<Vec2>>()\n\n    operator fun get(argLength: Int): Array<Vec2> {\n        assert(argLength > 0)\n\n        if (!map.containsKey(argLength)) {\n            map[argLength] = getInitializedArray(argLength)\n        }\n\n        assert(map[argLength]!!.size == argLength) { \"Array not built of correct length\" }\n        return map[argLength]!!\n    }\n\n    protected fun getInitializedArray(argLength: Int): Array<Vec2> {\n        return Array<Vec2>(argLength) { Vec2() }\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * Created at 3:26:14 AM Jan 11, 2011\n */\npackage org.jbox2d.pooling.normal\n\nimport org.jbox2d.collision.AABB\nimport org.jbox2d.collision.Collision\nimport org.jbox2d.collision.Distance\nimport org.jbox2d.collision.TimeOfImpact\nimport org.jbox2d.common.Mat22\nimport org.jbox2d.common.Mat33\nimport org.jbox2d.common.Rot\nimport org.jbox2d.common.Settings\nimport org.jbox2d.common.Vec2\nimport org.jbox2d.common.Vec3\nimport org.jbox2d.dynamics.contacts.ChainAndCircleContact\nimport org.jbox2d.dynamics.contacts.ChainAndPolygonContact\nimport org.jbox2d.dynamics.contacts.CircleContact\nimport org.jbox2d.dynamics.contacts.Contact\nimport org.jbox2d.dynamics.contacts.EdgeAndCircleContact\nimport org.jbox2d.dynamics.contacts.EdgeAndPolygonContact\nimport org.jbox2d.dynamics.contacts.PolygonAndCircleContact\nimport org.jbox2d.dynamics.contacts.PolygonContact\nimport org.jbox2d.internal.assert\nimport org.jbox2d.pooling.IDynamicStack\nimport org.jbox2d.pooling.IWorldPool\n\n/**\n * Provides object pooling for all objects used in the engine. Objects retrieved from here should\n * only be used temporarily, and then pushed back (with the exception of arrays).\n *\n * @author Daniel Murphy\n */\nclass DefaultWorldPool(argSize: Int, argContainerSize: Int) : IWorldPool {\n    private val world = this\n\n    private val vecs: OrderedStack<Vec2> = LambdaOrderedStack(argSize, argContainerSize) { Vec2() }\n    private val vec3s: OrderedStack<Vec3> = LambdaOrderedStack(argSize, argContainerSize) { Vec3() }\n    private val mats: OrderedStack<Mat22> = LambdaOrderedStack(argSize, argContainerSize) { Mat22() }\n    private val mat33s: OrderedStack<Mat33> = LambdaOrderedStack(argSize, argContainerSize) { Mat33() }\n    private val aabbs: OrderedStack<AABB> = LambdaOrderedStack(argSize, argContainerSize) { AABB() }\n    private val rots: OrderedStack<Rot> = LambdaOrderedStack(argSize, argContainerSize) { Rot() }\n\n    private val afloats = HashMap<Int, FloatArray>()\n    private val aints = HashMap<Int, IntArray>()\n    private val avecs = HashMap<Int, Array<Vec2>>()\n\n    private val pcstack  = ContactMutableStack({ PolygonContact(world) }, { arrayOfNulls<PolygonContact>(it) })\n    private val ccstack  = ContactMutableStack({ CircleContact(world) }, { arrayOfNulls<CircleContact>(it) })\n    private val cpstack  = ContactMutableStack({ PolygonAndCircleContact(world) }, { arrayOfNulls<PolygonAndCircleContact>(it) })\n    private val ecstack  = ContactMutableStack({ EdgeAndCircleContact(world) }, { arrayOfNulls<EdgeAndCircleContact>(it) })\n    private val epstack  = ContactMutableStack({ EdgeAndPolygonContact(world) }, { arrayOfNulls<EdgeAndPolygonContact>(it) })\n    private val chcstack = ContactMutableStack({ ChainAndCircleContact(world) }, { arrayOfNulls<ChainAndCircleContact>(it) })\n    private val chpstack = ContactMutableStack({ ChainAndPolygonContact(world) }, { arrayOfNulls<ChainAndPolygonContact>(it) })\n\n    override val collision: Collision = Collision(this)\n    override val timeOfImpact: TimeOfImpact = TimeOfImpact(this)\n    override val distance: Distance = Distance()\n\n    override val polyContactStack: IDynamicStack<Contact> get() = pcstack\n    override val circleContactStack: IDynamicStack<Contact> get() = ccstack\n    override val polyCircleContactStack: IDynamicStack<Contact> get() = cpstack\n    override val edgeCircleContactStack: IDynamicStack<Contact> get() = ecstack\n    override val edgePolyContactStack: IDynamicStack<Contact> get() = epstack\n    override val chainCircleContactStack: IDynamicStack<Contact> get() = chcstack\n    override val chainPolyContactStack: IDynamicStack<Contact> get() = chpstack\n\n    override fun popVec2(): Vec2 {\n        return vecs.pop()\n    }\n\n    override fun popVec2(argNum: Int): Array<Vec2> {\n        return vecs.pop(argNum)\n    }\n\n    override fun pushVec2(argNum: Int) {\n        vecs.push(argNum)\n    }\n\n    override fun popVec3(): Vec3 {\n        return vec3s.pop()\n    }\n\n    override fun popVec3(argNum: Int): Array<Vec3> {\n        return vec3s.pop(argNum)\n    }\n\n    override fun pushVec3(argNum: Int) {\n        vec3s.push(argNum)\n    }\n\n    override fun popMat22(): Mat22 {\n        return mats.pop()\n    }\n\n    override fun popMat22(argNum: Int): Array<Mat22> {\n        return mats.pop(argNum)\n    }\n\n    override fun pushMat22(argNum: Int) {\n        mats.push(argNum)\n    }\n\n    override fun popMat33(): Mat33 {\n        return mat33s.pop()\n    }\n\n    override fun pushMat33(argNum: Int) {\n        mat33s.push(argNum)\n    }\n\n    override fun popAABB(): AABB {\n        return aabbs.pop()\n    }\n\n    override fun popAABB(argNum: Int): Array<AABB> {\n        return aabbs.pop(argNum)\n    }\n\n    override fun pushAABB(argNum: Int) {\n        aabbs.push(argNum)\n    }\n\n    override fun popRot(): Rot {\n        return rots.pop()\n    }\n\n    override fun pushRot(num: Int) {\n        rots.push(num)\n    }\n\n    override fun getFloatArray(argLength: Int): FloatArray {\n        if (!afloats.containsKey(argLength)) {\n            afloats[argLength] = FloatArray(argLength)\n        }\n\n        assert(afloats[argLength]!!.size == argLength) { \"Array not built with correct length\" }\n        return afloats[argLength]!!\n    }\n\n    override fun getIntArray(argLength: Int): IntArray {\n        if (!aints.containsKey(argLength)) {\n            aints[argLength] = IntArray(argLength)\n        }\n\n        assert(aints[argLength]!!.size == argLength) { \"Array not built with correct length\" }\n        return aints[argLength]!!\n    }\n\n    override fun getVec2Array(argLength: Int): Array<Vec2> {\n        if (!avecs.containsKey(argLength)) {\n            avecs[argLength] = Array<Vec2>(argLength) { Vec2() }\n        }\n\n        assert(avecs[argLength]!!.size == argLength) { \"Array not built with correct length\" }\n        return avecs[argLength]!!\n    }\n}\n\nclass LambdaOrderedStack<T>(argSize: Int, argContainerSize: Int, val newInstanceLambda: () -> T) : OrderedStack<T>(argSize, argContainerSize) {\n    override fun newInstance(): T {\n        //println(\"newInstanceLambda:$newInstanceLambda\")\n        return newInstanceLambda()\n    }\n}\n\nclass ContactMutableStack(private val newInstanceLambda: () -> Contact, val newArrayLambda: (Int) -> Array<out Contact?>) : MutableStack<Contact>(Settings.CONTACT_STACK_INIT_SIZE) {\n    override fun newInstance(): Contact = newInstanceLambda()\n    override fun newArray(size: Int): Array<Contact> {\n        //println(\"ContactMutableStack.newArray: $this, $newInstanceLambda, $newArrayLambda\")\n        return newArrayLambda(size) as Array<Contact>\n    }\n}\n\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.pooling.normal\n\nimport org.jbox2d.internal.arraycopy\nimport org.jbox2d.internal.assert\nimport org.jbox2d.pooling.IDynamicStack\n\nabstract class MutableStack<E>(private val argInitSize: Int) : IDynamicStack<E> {\n    private var stack: Array<E>? = null\n    private var index: Int = 0\n    private var size: Int = 0\n\n    private fun ensureInit() {\n        if (stack == null) {\n            extendStack(argInitSize)\n        }\n    }\n\n    private fun extendStack(argSize: Int) {\n        val newStack = newArray(argSize)\n        if (stack != null) {\n            arraycopy(stack!!, 0, newStack, 0, size)\n        }\n        for (i in newStack.indices) {\n            newStack[i] = newInstance()\n        }\n        stack = newStack\n        size = newStack.size\n    }\n\n    override fun pop(): E {\n        ensureInit()\n        if (index >= size) {\n            extendStack(size * 2)\n        }\n        return stack!![index++]\n    }\n\n    override fun push(argObject: E) {\n        ensureInit()\n        assert(index > 0)\n        stack!![--index] = argObject\n    }\n\n    /** Creates a new instance of the object contained by this stack.  */\n    protected abstract fun newInstance(): E\n\n    protected abstract fun newArray(size: Int): Array<E>\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * Created at 12:52:04 AM Jan 20, 2011\n */\npackage org.jbox2d.pooling.normal\n\nimport org.jbox2d.internal.arraycopy\nimport org.jbox2d.internal.assert\n\n/**\n * @author Daniel Murphy\n */\nabstract class OrderedStack<E>(private val size: Int, argContainerSize: Int) {\n    private val pool: Array<Any> by lazy { Array(size) { newInstance() as Any } }\n    private var index: Int = 0\n    private val container: Array<Any> = Array(argContainerSize) { }\n\n    fun pop(): E {\n        assert(index < size) { \"End of stack reached, there is probably a leak somewhere\" }\n        return pool[index++] as E\n    }\n\n    fun pop(argNum: Int): Array<E> {\n        assert(index + argNum < size) { \"End of stack reached, there is probably a leak somewhere\" }\n        assert(argNum <= container.size) { \"Container array is too small\" }\n        arraycopy(pool, index, container, 0, argNum)\n        index += argNum\n        return container as Array<E>\n    }\n\n    fun push(argNum: Int) {\n        index -= argNum\n        assert(index >= 0) { \"Beginning of stack reached, push/pops are unmatched\" }\n    }\n\n    /** Creates a new instance of the object contained by this stack.  */\n    protected abstract fun newInstance(): E\n}\n","package org.jbox2d.userdata\n\ninterface Box2dTypedUserData {\n    @kotlin.Suppress(\"unused\")\n    open class Key<T>\n\n    operator fun <T> contains(key: Key<T>): Boolean\n    operator fun <T> get(key: Key<T>): T?\n    operator fun <T : Any> set(key: Key<T>, value: T?)\n\n    class Mixin : Box2dTypedUserData {\n        private var typedUserData: LinkedHashMap<Key<*>, Any>? = null\n        override operator fun <T> contains(key: Key<T>): Boolean = typedUserData?.containsKey(key) == true\n        override operator fun <T> get(key: Key<T>): T? = typedUserData?.get(key) as T?\n        override operator fun <T : Any> set(key: Key<T>, value: T?) {\n            if (value != null) {\n                if (typedUserData == null) typedUserData = LinkedHashMap()\n                typedUserData?.set(key, value)\n            } else {\n                typedUserData?.remove(key)\n            }\n        }\n    }\n}\n","package org.jbox2d.internal\n\nimport kotlin.js.Date\n\n//actual fun System_nanoTime(): Long = window.performance.now().toLong() // @TODO: node.js: https://nodejs.org/api/process.html#process_process_hrtime_time\nactual fun System_nanoTime(): Long = (Date.now().toLong() * 1000000L)\n","package org.jbox2d.dynamics\n\nimport org.jbox2d.dynamics.joints.Joint\n\ninline fun WorldRef.forEachBody(callback: (body: Body) -> Unit) {\n    var node = world.bodyList\n    while (node != null) {\n        callback(node)\n        node = node.m_next\n    }\n}\n\ninline fun WorldRef.forEachJoint(callback: (joint: Joint) -> Unit) {\n    var node = world.jointList\n    while (node != null) {\n        callback(node)\n        node = node.next\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * Created at 4:25:42 AM Jul 15, 2010\n */\npackage org.jbox2d.callbacks\n\nimport org.jbox2d.dynamics.Fixture\n\n// updated to rev 100\n/**\n * Implement this class to provide collision filtering. In other words, you can implement\n * this class if you want finer control over contact creation.\n * @author Daniel Murphy\n */\nclass ContactFilter {\n\n    /**\n     * Return true if contact calculations should be performed between these two shapes.\n     * @warning for performance reasons this is only called when the AABBs begin to overlap.\n     * @param fixtureA\n     * @param fixtureB\n     * @return\n     */\n    fun shouldCollide(fixtureA: Fixture, fixtureB: Fixture): Boolean {\n        val filterA = fixtureA.filterData\n        val filterB = fixtureB.filterData\n\n        if (filterA.groupIndex == filterB.groupIndex && filterA.groupIndex != 0) {\n            return filterA.groupIndex > 0\n        }\n\n        val collide = filterA.maskBits and filterB.categoryBits != 0 && filterA.categoryBits and filterB.maskBits != 0\n        return collide\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.collision.shapes\n\n\nimport org.jbox2d.collision.AABB\nimport org.jbox2d.collision.RayCastInput\nimport org.jbox2d.collision.RayCastOutput\nimport org.jbox2d.common.MathUtils\nimport org.jbox2d.common.Settings\nimport org.jbox2d.common.Transform\nimport org.jbox2d.common.Vec2\nimport org.jbox2d.internal.assert\n\n/**\n * A chain shape is a free form sequence of line segments. The chain has two-sided collision, so you\n * can use inside and outside collision. Therefore, you may use any winding order. Connectivity\n * information is used to create smooth collisions. WARNING: The chain will not collide properly if\n * there are self-intersections.\n *\n * @author Daniel\n */\nclass ChainShape : Shape(ShapeType.CHAIN) {\n\n    var vertices: Array<Vec2>? = null\n\n    var count: Int = 0\n\n    val prevVertex = Vec2()\n    val nextVertex = Vec2()\n\n    var hasPrevVertex = false\n    var hasNextVertex = false\n\n    private val pool0 = EdgeShape()\n\n    init {\n        vertices = null\n        radius = Settings.polygonRadius\n        count = 0\n    }\n\n    fun clear() {\n        vertices = null\n        count = 0\n    }\n\n    override fun getChildCount(): Int {\n        return count - 1\n    }\n\n    /**\n     * Get a child edge.\n     */\n    fun getChildEdge(edge: EdgeShape, index: Int) {\n        assert(0 <= index && index < count - 1)\n        edge.radius = radius\n\n        val v0 = vertices!![index + 0]\n        val v1 = vertices!![index + 1]\n        edge.vertex1.x = v0.x\n        edge.vertex1.y = v0.y\n        edge.vertex2.x = v1.x\n        edge.vertex2.y = v1.y\n\n        if (index > 0) {\n            val v = vertices!![index - 1]\n            edge.vertex0.x = v.x\n            edge.vertex0.y = v.y\n            edge.hasVertex0 = true\n        } else {\n            edge.vertex0.x = prevVertex.x\n            edge.vertex0.y = prevVertex.y\n            edge.hasVertex0 = hasPrevVertex\n        }\n\n        if (index < count - 2) {\n            val v = vertices!![index + 2]\n            edge.vertex3.x = v.x\n            edge.vertex3.y = v.y\n            edge.hasVertex3 = true\n        } else {\n            edge.vertex3.x = nextVertex.x\n            edge.vertex3.y = nextVertex.y\n            edge.hasVertex3 = hasNextVertex\n        }\n    }\n\n    override fun computeDistanceToOut(xf: Transform, p: Vec2, childIndex: Int, normalOut: Vec2): Float {\n        val edge = pool0\n        getChildEdge(edge, childIndex)\n        return edge.computeDistanceToOut(xf, p, 0, normalOut)\n    }\n\n    override fun testPoint(xf: Transform, p: Vec2): Boolean {\n        return false\n    }\n\n    override fun raycast(output: RayCastOutput, input: RayCastInput, xf: Transform, childIndex: Int): Boolean {\n        assert(childIndex < count)\n\n        val edgeShape = pool0\n\n        val i1 = childIndex\n        var i2 = childIndex + 1\n        if (i2 == count) {\n            i2 = 0\n        }\n        val v = vertices!![i1]\n        edgeShape.vertex1.x = v.x\n        edgeShape.vertex1.y = v.y\n        val v1 = vertices!![i2]\n        edgeShape.vertex2.x = v1.x\n        edgeShape.vertex2.y = v1.y\n\n        return edgeShape.raycast(output, input, xf, 0)\n    }\n\n    override fun computeAABB(aabb: AABB, xf: Transform, childIndex: Int) {\n        assert(childIndex < count)\n        val lower = aabb.lowerBound\n        val upper = aabb.upperBound\n\n        val i1 = childIndex\n        var i2 = childIndex + 1\n        if (i2 == count) {\n            i2 = 0\n        }\n\n        val vi1 = vertices!![i1]\n        val vi2 = vertices!![i2]\n        val xfq = xf.q\n        val xfp = xf.p\n        val v1x = xfq.c * vi1.x - xfq.s * vi1.y + xfp.x\n        val v1y = xfq.s * vi1.x + xfq.c * vi1.y + xfp.y\n        val v2x = xfq.c * vi2.x - xfq.s * vi2.y + xfp.x\n        val v2y = xfq.s * vi2.x + xfq.c * vi2.y + xfp.y\n\n        lower.x = if (v1x < v2x) v1x else v2x\n        lower.y = if (v1y < v2y) v1y else v2y\n        upper.x = if (v1x > v2x) v1x else v2x\n        upper.y = if (v1y > v2y) v1y else v2y\n    }\n\n    override fun computeMass(massData: MassData, density: Float) {\n        massData.mass = 0.0f\n        massData.center.setZero()\n        massData.I = 0.0f\n    }\n\n    override fun clone(): Shape {\n        val clone = ChainShape()\n        clone.createChain(vertices, count)\n        clone.prevVertex.set(prevVertex)\n        clone.nextVertex.set(nextVertex)\n        clone.hasPrevVertex = hasPrevVertex\n        clone.hasNextVertex = hasNextVertex\n        return clone\n    }\n\n    /**\n     * Create a loop. This automatically adjusts connectivity.\n     *\n     * @param vertices an array of vertices, these are copied\n     * @param count the vertex count\n     */\n    fun createLoop(vertices: Array<Vec2>, count: Int) {\n        assert(this.vertices == null && this.count == 0)\n        assert(count >= 3)\n        this.count = count + 1\n        this.vertices = Array(this.count) { Vec2.dummy }\n        for (i in 1 until count) {\n            val v1 = vertices[i - 1]\n            val v2 = vertices[i]\n            // If the code crashes here, it means your vertices are too close together.\n            if (MathUtils.distanceSquared(v1, v2) < Settings.linearSlop * Settings.linearSlop) {\n                throw RuntimeException(\"Vertices of chain shape are too close together\")\n            }\n        }\n        for (i in 0 until count) {\n            this.vertices!![i] = Vec2(vertices[i])\n        }\n        this.vertices!![count] = Vec2(this.vertices!![0])\n        prevVertex.set(this.vertices!![this.count - 2])\n        nextVertex.set(this.vertices!![1])\n        hasPrevVertex = true\n        hasNextVertex = true\n    }\n\n    /**\n     * Create a chain with isolated end vertices.\n     *\n     * @param vertices an array of vertices, these are copied\n     * @param count the vertex count\n     */\n    fun createChain(vertices: Array<Vec2>?, count: Int) {\n        assert(this.vertices == null && this.count == 0)\n        assert(count >= 2)\n        this.count = count\n        this.vertices = Array(this.count) { Vec2.dummy }\n        for (i in 1 until this.count) {\n            val v1 = vertices!![i - 1]\n            val v2 = vertices[i]\n            // If the code crashes here, it means your vertices are too close together.\n            if (MathUtils.distanceSquared(v1, v2) < Settings.linearSlop * Settings.linearSlop) {\n                throw RuntimeException(\"Vertices of chain shape are too close together\")\n            }\n        }\n        for (i in 0 until this.count) {\n            this.vertices!![i] = Vec2(vertices!![i])\n        }\n        hasPrevVertex = false\n        hasNextVertex = false\n\n        prevVertex.setZero()\n        nextVertex.setZero()\n    }\n\n    /**\n     * Establish connectivity to a vertex that precedes the first vertex. Don't call this for loops.\n     *\n     * @param prevVertex\n     */\n    fun setPrevVertex(prevVertex: Vec2) {\n        this.prevVertex.set(prevVertex)\n        hasPrevVertex = true\n    }\n\n    /**\n     * Establish connectivity to a vertex that follows the last vertex. Don't call this for loops.\n     *\n     * @param nextVertex\n     */\n    fun setNextVertex(nextVertex: Vec2) {\n        this.nextVertex.set(nextVertex)\n        hasNextVertex = true\n    }\n}\n","package org.jbox2d.common\n\nimport org.jbox2d.internal.arraycopy\nimport org.jbox2d.internal.assert\n\nobject BufferUtils {\n    /** Reallocate a buffer.  */\n\n    fun <T : Any> reallocateBuffer(\n        klass: () -> T, oldBuffer: Array<T>?, oldCapacity: Int,\n        newCapacity: Int\n    ): Array<T> {\n        assert(newCapacity > oldCapacity)\n        return Array<Any>(newCapacity) { if (oldBuffer != null && it < oldCapacity) oldBuffer[it] else klass() } as Array<T>\n    }\n\n    /** Reallocate a buffer.  */\n\n    fun reallocateBuffer(oldBuffer: IntArray?, oldCapacity: Int, newCapacity: Int): IntArray {\n        assert(newCapacity > oldCapacity)\n        val newBuffer = IntArray(newCapacity)\n        if (oldBuffer != null) {\n            arraycopy(oldBuffer, 0, newBuffer, 0, oldCapacity)\n        }\n        return newBuffer\n    }\n\n    /** Reallocate a buffer.  */\n\n    fun reallocateBuffer(oldBuffer: FloatArray?, oldCapacity: Int, newCapacity: Int): FloatArray {\n        assert(newCapacity > oldCapacity)\n        val newBuffer = FloatArray(newCapacity)\n        if (oldBuffer != null) {\n            arraycopy(oldBuffer, 0, newBuffer, 0, oldCapacity)\n        }\n        return newBuffer\n    }\n\n    /**\n     * Reallocate a buffer. A 'deferred' buffer is reallocated only if it is not NULL. If\n     * 'userSuppliedCapacity' is not zero, buffer is user supplied and must be kept.\n     */\n\n    fun <T : Any> reallocateBuffer(\n        klass: () -> T, buffer: Array<T>?, userSuppliedCapacity: Int,\n        oldCapacity: Int, newCapacity: Int, deferred: Boolean\n    ): Array<T> {\n        var buffer = buffer\n        assert(newCapacity > oldCapacity)\n        assert(userSuppliedCapacity == 0 || newCapacity <= userSuppliedCapacity)\n        if ((!deferred || buffer != null) && userSuppliedCapacity == 0) {\n            buffer = reallocateBuffer(klass, buffer, oldCapacity, newCapacity)\n        }\n        return buffer!!\n    }\n\n    /**\n     * Reallocate an int buffer. A 'deferred' buffer is reallocated only if it is not NULL. If\n     * 'userSuppliedCapacity' is not zero, buffer is user supplied and must be kept.\n     */\n\n    fun reallocateBuffer(\n        buffer: IntArray?, userSuppliedCapacity: Int, oldCapacity: Int,\n        newCapacity: Int, deferred: Boolean\n    ): IntArray {\n        var buffer = buffer\n        assert(newCapacity > oldCapacity)\n        assert(userSuppliedCapacity == 0 || newCapacity <= userSuppliedCapacity)\n        if ((!deferred || buffer != null) && userSuppliedCapacity == 0) {\n            buffer = reallocateBuffer(buffer, oldCapacity, newCapacity)\n        }\n        return buffer!!\n    }\n\n    /**\n     * Reallocate a float buffer. A 'deferred' buffer is reallocated only if it is not NULL. If\n     * 'userSuppliedCapacity' is not zero, buffer is user supplied and must be kept.\n     */\n\n    fun reallocateBuffer(\n        buffer: FloatArray?, userSuppliedCapacity: Int, oldCapacity: Int,\n        newCapacity: Int, deferred: Boolean\n    ): FloatArray {\n        var buffer = buffer\n        assert(newCapacity > oldCapacity)\n        assert(userSuppliedCapacity == 0 || newCapacity <= userSuppliedCapacity)\n        if ((!deferred || buffer != null) && userSuppliedCapacity == 0) {\n            buffer = reallocateBuffer(buffer, oldCapacity, newCapacity)\n        }\n        return buffer!!\n    }\n\n    /** Rotate an array, see std::rotate  */\n\n    fun <T> rotate(ray: Array<T>, first: Int, new_first: Int, last: Int) {\n        var first = first\n        var new_first = new_first\n        var next = new_first\n        while (next != first) {\n            val temp = ray[first]\n            ray[first] = ray[next]\n            ray[next] = temp\n            first++\n            next++\n            if (next == last) {\n                next = new_first\n            } else if (first == new_first) {\n                new_first = next\n            }\n        }\n    }\n\n    /** Rotate an array, see std::rotate  */\n\n    fun rotate(ray: IntArray, first: Int, new_first: Int, last: Int) {\n        var first = first\n        var new_first = new_first\n        var next = new_first\n        while (next != first) {\n            val temp = ray[first]\n            ray[first] = ray[next]\n            ray[next] = temp\n            first++\n            next++\n            if (next == last) {\n                next = new_first\n            } else if (first == new_first) {\n                new_first = next\n            }\n        }\n    }\n\n    /** Rotate an array, see std::rotate  */\n\n    fun rotate(ray: FloatArray, first: Int, new_first: Int, last: Int) {\n        var first = first\n        var new_first = new_first\n        var next = new_first\n        while (next != first) {\n            val temp = ray[first]\n            ray[first] = ray[next]\n            ray[next] = temp\n            first++\n            next++\n            if (next == last) {\n                next = new_first\n            } else if (first == new_first) {\n                new_first = next\n            }\n        }\n    }\n}\n","/*******************************************************************************\n * Copyright (c) 2013, Daniel Murphy\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.jbox2d.dynamics.joints\n\nimport org.jbox2d.common.Vec2\nimport org.jbox2d.dynamics.Body\nimport org.jbox2d.dynamics.SolverData\nimport org.jbox2d.dynamics.World\nimport org.jbox2d.internal.assert\nimport org.jbox2d.pooling.IWorldPool\nimport org.jbox2d.userdata.Box2dTypedUserData\n\n/**\n * The base joint class. Joints are used to constrain two bodies together in various fashions. Some\n * joints also feature limits and motors.\n *\n * @author Daniel Murphy\n */\nabstract class Joint protected constructor(\n    // Cache here per time step to reduce cache misses.\n    protected var pool: IWorldPool,\n    def: JointDef\n) : Box2dTypedUserData by Box2dTypedUserData.Mixin() {\n\n    /**\n     * get the type of the concrete joint.\n     *\n     * @return\n     */\n    val type: JointType\n\n    var prev: Joint? = null\n\n    /**\n     * get the next joint the world joint list.\n     */\n    var next: Joint? = null\n\n    var edgeA: JointEdge\n    var edgeB: JointEdge\n\n    /**\n     * get the first body attached to this joint.\n     */\n    var bodyA: Body? = null\n\n    /**\n     * get the second body attached to this joint.\n     */\n    var bodyB: Body? = null\n\n    var islandFlag: Boolean = false\n\n    /**\n     * Get collide connected. Note: modifying the collide connect flag won't work correctly because\n     * the flag is only checked when fixture AABBs begin to overlap.\n     */\n\n    val _collideConnected: Boolean\n\n    fun getCollideConnected() = _collideConnected\n\n    var userData: Any? = null\n\n    /**\n     * Short-cut function to determine if either body is inactive.\n     */\n    val isActive: Boolean\n        get() = bodyA!!.isActive && bodyB!!.isActive\n\n    init {\n        assert(def.bodyA !== def.bodyB)\n        this.type = def.type\n        prev = null\n        next = null\n        bodyA = def.bodyA\n        bodyB = def.bodyB\n        _collideConnected = def.collideConnected\n        islandFlag = false\n        userData = def.userData\n\n        edgeA = JointEdge()\n        edgeA.joint = null\n        edgeA.other = null\n        edgeA.prev = null\n        edgeA.next = null\n\n        edgeB = JointEdge()\n        edgeB.joint = null\n        edgeB.other = null\n        edgeB.prev = null\n        edgeB.next = null\n\n        // m_localCenterA = new Vec2();\n        // m_localCenterB = new Vec2();\n    }\n\n    /**\n     * get the anchor point on bodyA in world coordinates.\n     */\n    abstract fun getAnchorA(out: Vec2)\n\n    /**\n     * get the anchor point on bodyB in world coordinates.\n     */\n    abstract fun getAnchorB(out: Vec2)\n\n    /**\n     * get the reaction force on body2 at the joint anchor in Newtons.\n     */\n    abstract fun getReactionForce(inv_dt: Float, out: Vec2)\n\n    /**\n     * get the reaction torque on body2 in N*m.\n     */\n    abstract fun getReactionTorque(inv_dt: Float): Float\n\n    /** Internal  */\n    abstract fun initVelocityConstraints(data: SolverData)\n\n    /** Internal  */\n    abstract fun solveVelocityConstraints(data: SolverData)\n\n    /**\n     * This returns true if the position errors are within tolerance. Internal.\n     */\n    abstract fun solvePositionConstraints(data: SolverData): Boolean\n\n    /**\n     * Override to handle destruction of joint\n     */\n    open fun destructor() {}\n\n    companion object {\n\n        fun create(world: World, def: JointDef): Joint? {\n            // Joint joint = null;\n            when (def.type) {\n                JointType.MOUSE -> return MouseJoint(world.pool, def as MouseJointDef)\n                JointType.DISTANCE -> return DistanceJoint(world.pool, def as DistanceJointDef)\n                JointType.PRISMATIC -> return PrismaticJoint(world.pool, def as PrismaticJointDef)\n                JointType.REVOLUTE -> return RevoluteJoint(world.pool, def as RevoluteJointDef)\n                JointType.WELD -> return WeldJoint(world.pool, def as WeldJointDef)\n                JointType.FRICTION -> return FrictionJoint(world.pool, def as FrictionJointDef)\n                JointType.WHEEL -> return WheelJoint(world.pool, def as WheelJointDef)\n                JointType.GEAR -> return GearJoint(world.pool, def as GearJointDef)\n                JointType.PULLEY -> return PulleyJoint(world.pool, def as PulleyJointDef)\n                JointType.CONSTANT_VOLUME -> return ConstantVolumeJoint(world, def as ConstantVolumeJointDef)\n                JointType.ROPE -> return RopeJoint(world.pool, def as RopeJointDef)\n                JointType.MOTOR -> return MotorJoint(world.pool, def as MotorJointDef)\n                JointType.UNKNOWN -> return null\n                else -> return null\n            }\n        }\n\n\n        fun destroy(joint: Joint) {\n            joint.destructor()\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine\n\nimport com.esotericsoftware.spine.Animation.MixBlend.*\nimport com.esotericsoftware.spine.Animation.MixDirection.*\nimport com.esotericsoftware.spine.attachments.*\nimport com.esotericsoftware.spine.utils.*\nimport com.esotericsoftware.spine.utils.SpineUtils.arraycopy\nimport com.soywiz.kds.*\nimport com.soywiz.kds.iterators.*\nimport kotlin.math.*\n\n/** A simple container for a list of timelines and a name.  */\nclass Animation(\n    /** The animation's name, which is unique across all animations in the skeleton.  */\n    val name: String,\n    timelines: FastArrayList<Timeline>,\n    /** The duration of the animation in seconds, which is the highest time of all keys in the timeline.  */\n    var duration: Float\n) {\n    lateinit internal var timelines: FastArrayList<Timeline>\n    internal val timelineIDs = IntSet()\n\n    init {\n        setTimelines(timelines)\n    }\n\n    /** If the returned array or the timelines it contains are modified, [.setTimelines] must be called.  */\n    fun getTimelines(): FastArrayList<Timeline> {\n        return timelines\n    }\n\n    fun setTimelines(timelines: FastArrayList<Timeline>) {\n        this.timelines = timelines\n\n        timelineIDs.clear()\n        timelines.fastForEach { timeline ->\n            timelineIDs.add(timeline.propertyId)\n        }\n    }\n\n    /** Return true if this animation contains a timeline with the specified property ID.  */\n    fun hasTimeline(id: Int): Boolean {\n        return timelineIDs.contains(id)\n    }\n\n    /** Applies all the animation's timelines to the specified skeleton.\n     *\n     *\n     * See Timeline [Timeline.apply].\n     * @param loop If true, the animation repeats after [.getDuration].\n     * @param events May be null to ignore fired events.\n     */\n    fun apply(skeleton: Skeleton, lastTime: Float, time: Float, loop: Boolean, events: FastArrayList<Event>?, alpha: Float,\n              blend: MixBlend, direction: MixDirection) {\n        var lastTime = lastTime\n        var time = time\n\n        if (loop && duration != 0f) {\n            time %= duration\n            if (lastTime > 0) lastTime %= duration\n        }\n\n        val timelines = this.timelines\n        var i = 0\n        val n = timelines.size\n        while (i < n) {\n            timelines[i].apply(skeleton, lastTime, time, events, alpha, blend, direction)\n            i++\n        }\n    }\n\n    override fun toString(): String {\n        return name ?: \"\"\n    }\n\n    /** The interface for all timelines.  */\n    interface Timeline {\n\n        /** Uniquely encodes both the type of this timeline and the skeleton property that it affects.  */\n        val propertyId: Int\n\n        /** Applies this timeline to the skeleton.\n         * @param skeleton The skeleton the timeline is being applied to. This provides access to the bones, slots, and other\n         * skeleton components the timeline may change.\n         * @param lastTime The time this timeline was last applied. Timelines such as [EventTimeline] trigger only at specific\n         * times rather than every frame. In that case, the timeline triggers everything between `lastTime`\n         * (exclusive) and `time` (inclusive).\n         * @param time The time within the animation. Most timelines find the key before and the key after this time so they can\n         * interpolate between the keys.\n         * @param events If any events are fired, they are added to this list. Can be null to ignore fired events or if the timeline\n         * does not fire events.\n         * @param alpha 0 applies the current or setup value (depending on `blend`). 1 applies the timeline value.\n         * Between 0 and 1 applies a value between the current or setup value and the timeline value. By adjusting\n         * `alpha` over time, an animation can be mixed in or out. `alpha` can also be useful to\n         * apply animations on top of each other (layering).\n         * @param blend Controls how mixing is applied when `alpha` < 1.\n         * @param direction Indicates whether the timeline is mixing in or out. Used by timelines which perform instant transitions,\n         * such as [DrawOrderTimeline] or [AttachmentTimeline], and other such as [ScaleTimeline].\n         */\n        fun apply(skeleton: Skeleton, lastTime: Float, time: Float, events: FastArrayList<Event>?, alpha: Float, blend: MixBlend,\n                  direction: MixDirection)\n    }\n\n    /** Controls how a timeline value is mixed with the setup pose value or current pose value when a timeline's `alpha`\n     * < 1.\n     *\n     *\n     * See Timeline [Timeline.apply].  */\n    enum class MixBlend {\n        /** Transitions from the setup value to the timeline value (the current value is not used). Before the first key, the setup\n         * value is set.  */\n        setup,\n\n        /** Transitions from the current value to the timeline value. Before the first key, transitions from the current value to\n         * the setup value. Timelines which perform instant transitions, such as [DrawOrderTimeline] or\n         * [AttachmentTimeline], use the setup value before the first key.\n         *\n         *\n         * `first` is intended for the first animations applied, not for animations layered on top of those.  */\n        first,\n\n        /** Transitions from the current value to the timeline value. No change is made before the first key (the current value is\n         * kept until the first key).\n         *\n         *\n         * `replace` is intended for animations layered on top of others, not for the first animations applied.  */\n        replace,\n\n        /** Transitions from the current value to the current value plus the timeline value. No change is made before the first key\n         * (the current value is kept until the first key).\n         *\n         *\n         * `add` is intended for animations layered on top of others, not for the first animations applied. Properties\n         * keyed by additive animations must be set manually or by another animation before applying the additive animations, else\n         * the property values will increase continually.  */\n        add\n    }\n\n    /** Indicates whether a timeline's `alpha` is mixing out over time toward 0 (the setup or current pose value) or\n     * mixing in toward 1 (the timeline's value).\n     *\n     *\n     * See Timeline [Timeline.apply].  */\n    enum class MixDirection {\n        `in`, out\n    }\n\n    private enum class TimelineType {\n        rotate, translate, scale, shear, //\n        attachment, color, deform, //\n        event, drawOrder, //\n        ikConstraint, transformConstraint, //\n        pathConstraintPosition, pathConstraintSpacing, pathConstraintMix, //\n        twoColor\n    }\n\n    /** An interface for timelines which change the property of a bone.  */\n    interface BoneTimeline : Timeline {\n\n        /** The index of the bone in [Skeleton.getBones] that will be changed.  */\n        var boneIndex: Int\n    }\n\n    /** An interface for timelines which change the property of a slot.  */\n    interface SlotTimeline : Timeline {\n\n        /** The index of the slot in [Skeleton.getSlots] that will be changed.  */\n        var slotIndex: Int\n    }\n\n    /** The base class for timelines that use interpolation between key frame values.  */\n    abstract class CurveTimeline(frameCount: Int) : Timeline {\n\n        private val curves: FloatArray // type, x, y, ...\n\n        /** The number of key frames for this timeline.  */\n        val frameCount: Int\n            get() = curves.size / BEZIER_SIZE + 1\n\n        init {\n            require(frameCount > 0) { \"frameCount must be > 0: $frameCount\" }\n            curves = FloatArray((frameCount - 1) * BEZIER_SIZE)\n        }\n\n        /** Sets the specified key frame to linear interpolation.  */\n        fun setLinear(frameIndex: Int) {\n            curves[frameIndex * BEZIER_SIZE] = LINEAR\n        }\n\n        /** Sets the specified key frame to stepped interpolation.  */\n        fun setStepped(frameIndex: Int) {\n            curves[frameIndex * BEZIER_SIZE] = STEPPED\n        }\n\n        /** Returns the interpolation type for the specified key frame.\n         * @return Linear is 0, stepped is 1, Bezier is 2.\n         */\n        fun getCurveType(frameIndex: Int): Float {\n            val index = frameIndex * BEZIER_SIZE\n            if (index == curves.size) return LINEAR\n            val type = curves[index]\n            if (type == LINEAR) return LINEAR\n            return if (type == STEPPED) STEPPED else BEZIER\n        }\n\n        /** Sets the specified key frame to Bezier interpolation. `cx1` and `cx2` are from 0 to 1,\n         * representing the percent of time between the two key frames. `cy1` and `cy2` are the percent of the\n         * difference between the key frame's values.  */\n        fun setCurve(frameIndex: Int, cx1: Float, cy1: Float, cx2: Float, cy2: Float) {\n            val tmpx = (-cx1 * 2 + cx2) * 0.03f\n            val tmpy = (-cy1 * 2 + cy2) * 0.03f\n            val dddfx = ((cx1 - cx2) * 3 + 1) * 0.006f\n            val dddfy = ((cy1 - cy2) * 3 + 1) * 0.006f\n            var ddfx = tmpx * 2 + dddfx\n            var ddfy = tmpy * 2 + dddfy\n            var dfx = cx1 * 0.3f + tmpx + dddfx * 0.16666667f\n            var dfy = cy1 * 0.3f + tmpy + dddfy * 0.16666667f\n\n            var i = frameIndex * BEZIER_SIZE\n            val curves = this.curves\n            curves[i++] = BEZIER\n\n            var x = dfx\n            var y = dfy\n            val n = i + BEZIER_SIZE - 1\n            while (i < n) {\n                curves[i] = x\n                curves[i + 1] = y\n                dfx += ddfx\n                dfy += ddfy\n                ddfx += dddfx\n                ddfy += dddfy\n                x += dfx\n                y += dfy\n                i += 2\n            }\n        }\n\n        /** Returns the interpolated percentage for the specified key frame and linear percentage.  */\n        fun getCurvePercent(frameIndex: Int, percent: Float): Float {\n            var percent = percent\n            percent = percent.coerceIn(0f, 1f)\n            val curves = this.curves\n            var i = frameIndex * BEZIER_SIZE\n            val type = curves[i]\n            if (type == LINEAR) return percent\n            if (type == STEPPED) return 0f\n            i++\n            var x = 0f\n            val start = i\n            val n = i + BEZIER_SIZE - 1\n            while (i < n) {\n                x = curves[i]\n                if (x >= percent) {\n                    if (i == start) return curves[i + 1] * percent / x // First point is 0,0.\n                    val prevX = curves[i - 2]\n                    val prevY = curves[i - 1]\n                    return prevY + (curves[i + 1] - prevY) * (percent - prevX) / (x - prevX)\n                }\n                i += 2\n            }\n            val y = curves[i - 1]\n            return y + (1 - y) * (percent - x) / (1 - x) // Last point is 1,1.\n        }\n\n        companion object {\n            val LINEAR = 0f\n            val STEPPED = 1f\n            val BEZIER = 2f\n            private val BEZIER_SIZE = 10 * 2 - 1\n        }\n    }\n\n    /** Changes a bone's local [Bone.getRotation].  */\n    class RotateTimeline(frameCount: Int) : CurveTimeline(frameCount), BoneTimeline {\n\n        /** The index of the bone in [Skeleton.getBones] that will be changed.  */\n        override var boneIndex: Int = 0\n            set(index) {\n                require(index >= 0) { \"index must be >= 0.\" }\n                field = index\n            }\n\n        /** The time in seconds and rotation in degrees for each key frame.  */\n        val frames: FloatArray = FloatArray(frameCount shl 1) // time, degrees, ...\n\n        override val propertyId: Int\n            get() = (TimelineType.rotate.ordinal shl 24) + boneIndex\n\n        /** Sets the time in seconds and the rotation in degrees for the specified key frame.  */\n        fun setFrame(frameIndex: Int, time: Float, degrees: Float) {\n            var frameIndex = frameIndex\n            frameIndex = frameIndex shl 1\n            frames[frameIndex] = time\n            frames[frameIndex + ROTATION] = degrees\n        }\n\n        override fun apply(skeleton: Skeleton, lastTime: Float, time: Float, events: FastArrayList<Event>?, alpha: Float, blend: MixBlend,\n                           direction: MixDirection) {\n\n            val bone = skeleton.bones[boneIndex]\n            if (!bone.isActive) return\n            val frames = this.frames\n            if (time < frames[0]) { // Time is before first frame.\n                when (blend) {\n                    setup -> {\n                        bone.rotation = bone.data.rotation\n                        return\n                    }\n                    first -> {\n                        val r = bone.data.rotation - bone.rotation\n                        bone.rotation += (r - (16384 - (16384.499999999996 - r / 360).toInt()) * 360) * alpha\n                    }\n                    else -> Unit\n                }\n                return\n            }\n\n            if (time >= frames[frames.size - ENTRIES]) { // Time is after last frame.\n                var r = frames[frames.size + PREV_ROTATION]\n                when (blend) {\n                    setup -> bone.rotation = bone.data.rotation + r * alpha\n                    first, replace -> {\n                        r += bone.data.rotation - bone.rotation\n                        r -= ((16384 - (16384.499999999996 - r / 360).toInt()) * 360).toFloat()\n                        bone.rotation += r * alpha\n                    }\n                    // Fall through.\n                    add -> bone.rotation += r * alpha\n                }\n                return\n            }\n\n            // Interpolate between the previous frame and the current frame.\n            val frame = binarySearch(frames, time, ENTRIES)\n            val prevRotation = frames[frame + PREV_ROTATION]\n            val frameTime = frames[frame]\n            val percent = getCurvePercent((frame shr 1) - 1, 1 - (time - frameTime) / (frames[frame + PREV_TIME] - frameTime))\n\n            var r = frames[frame + ROTATION] - prevRotation\n            r = prevRotation + (r - (16384 - (16384.499999999996 - r / 360).toInt()) * 360) * percent\n            when (blend) {\n                setup -> bone.rotation = bone.data.rotation + (r - (16384 - (16384.499999999996 - r / 360).toInt()) * 360) * alpha\n                first, replace -> {\n                    r += bone.data.rotation - bone.rotation\n                    bone.rotation += (r - (16384 - (16384.499999999996 - r / 360).toInt()) * 360) * alpha\n                }\n                // Fall through.\n                add -> bone.rotation += (r - (16384 - (16384.499999999996 - r / 360).toInt()) * 360) * alpha\n            }\n        }\n\n        companion object {\n            val ENTRIES = 2\n            internal val PREV_TIME = -2\n            internal val PREV_ROTATION = -1\n            internal val ROTATION = 1\n        }\n    }\n\n    /** Changes a bone's local [Bone.getX] and [Bone.getY].  */\n    open class TranslateTimeline(frameCount: Int) : CurveTimeline(frameCount), BoneTimeline {\n\n        /** The index of the bone in [Skeleton.getBones] that will be changed.  */\n        override var boneIndex: Int = 0\n            set(index) {\n                require(index >= 0) { \"index must be >= 0.\" }\n                field = index\n            }\n\n        /** The time in seconds, x, and y values for each key frame.  */\n        val frames: FloatArray // time, x, y, ...\n\n        override val propertyId: Int\n            get() = (TimelineType.translate.ordinal shl 24) + boneIndex\n\n        init {\n            frames = FloatArray(frameCount * ENTRIES)\n        }\n\n        /** Sets the time in seconds, x, and y values for the specified key frame.  */\n        fun setFrame(frameIndex: Int, time: Float, x: Float, y: Float) {\n            var frameIndex = frameIndex\n            frameIndex *= ENTRIES\n            frames[frameIndex] = time\n            frames[frameIndex + X] = x\n            frames[frameIndex + Y] = y\n        }\n\n        override fun apply(skeleton: Skeleton, lastTime: Float, time: Float, events: FastArrayList<Event>?, alpha: Float, blend: MixBlend,\n                           direction: MixDirection) {\n\n            val bone = skeleton.bones[boneIndex]\n            if (!bone.isActive) return\n            val frames = this.frames\n            if (time < frames[0]) { // Time is before first frame.\n                when (blend) {\n                    setup -> {\n                        bone.x = bone.data.x\n                        bone.y = bone.data.y\n                        return\n                    }\n                    first -> {\n                        bone.x += (bone.data.x - bone.x) * alpha\n                        bone.y += (bone.data.y - bone.y) * alpha\n                    }\n                    else -> Unit\n                }\n                return\n            }\n\n            var x: Float\n            var y: Float\n            if (time >= frames[frames.size - ENTRIES]) { // Time is after last frame.\n                x = frames[frames.size + PREV_X]\n                y = frames[frames.size + PREV_Y]\n            } else {\n                // Interpolate between the previous frame and the current frame.\n                val frame = binarySearch(frames, time, ENTRIES)\n                x = frames[frame + PREV_X]\n                y = frames[frame + PREV_Y]\n                val frameTime = frames[frame]\n                val percent = getCurvePercent(frame / ENTRIES - 1,\n                        1 - (time - frameTime) / (frames[frame + PREV_TIME] - frameTime))\n\n                x += (frames[frame + X] - x) * percent\n                y += (frames[frame + Y] - y) * percent\n            }\n            when (blend) {\n                setup -> {\n                    bone.x = bone.data.x + x * alpha\n                    bone.y = bone.data.y + y * alpha\n                }\n                first, replace -> {\n                    bone.x += (bone.data.x + x - bone.x) * alpha\n                    bone.y += (bone.data.y + y - bone.y) * alpha\n                }\n                add -> {\n                    bone.x += x * alpha\n                    bone.y += y * alpha\n                }\n            }\n        }\n\n        companion object {\n            val ENTRIES = 3\n            internal val PREV_TIME = -3\n            internal val PREV_X = -2\n            internal val PREV_Y = -1\n            internal val X = 1\n            internal val Y = 2\n        }\n    }\n\n    /** Changes a bone's local [Bone.getScaleX] and [Bone.getScaleY].  */\n    class ScaleTimeline(frameCount: Int) : TranslateTimeline(frameCount) {\n\n        override val propertyId: Int\n            get() = (TimelineType.scale.ordinal shl 24) + boneIndex\n\n        override fun apply(skeleton: Skeleton, lastTime: Float, time: Float, events: FastArrayList<Event>?, alpha: Float, blend: MixBlend,\n                           direction: MixDirection) {\n\n            val bone = skeleton.bones[boneIndex]\n            if (!bone.isActive) return\n            val frames = this.frames\n            if (time < frames[0]) { // Time is before first frame.\n                when (blend) {\n                    setup -> {\n                        bone.scaleX = bone.data.scaleX\n                        bone.scaleY = bone.data.scaleY\n                        return\n                    }\n                    first -> {\n                        bone.scaleX += (bone.data.scaleX - bone.scaleX) * alpha\n                        bone.scaleY += (bone.data.scaleY - bone.scaleY) * alpha\n                    }\n                    else -> Unit\n                }\n                return\n            }\n\n            var x: Float\n            var y: Float\n            if (time >= frames[frames.size - Animation.TranslateTimeline.ENTRIES]) { // Time is after last frame.\n                x = frames[frames.size + Animation.TranslateTimeline.PREV_X] * bone.data.scaleX\n                y = frames[frames.size + Animation.TranslateTimeline.PREV_Y] * bone.data.scaleY\n            } else {\n                // Interpolate between the previous frame and the current frame.\n                val frame = binarySearch(frames, time, Animation.TranslateTimeline.ENTRIES)\n                x = frames[frame + Animation.TranslateTimeline.PREV_X]\n                y = frames[frame + Animation.TranslateTimeline.PREV_Y]\n                val frameTime = frames[frame]\n                val percent = getCurvePercent(frame / Animation.TranslateTimeline.ENTRIES - 1,\n                        1 - (time - frameTime) / (frames[frame + Animation.TranslateTimeline.PREV_TIME] - frameTime))\n\n                x = (x + (frames[frame + Animation.TranslateTimeline.X] - x) * percent) * bone.data.scaleX\n                y = (y + (frames[frame + Animation.TranslateTimeline.Y] - y) * percent) * bone.data.scaleY\n            }\n            if (alpha == 1f) {\n                if (blend == add) {\n                    bone.scaleX += x - bone.data.scaleX\n                    bone.scaleY += y - bone.data.scaleY\n                } else {\n                    bone.scaleX = x\n                    bone.scaleY = y\n                }\n            } else {\n                // Mixing out uses sign of setup or current pose, else use sign of key.\n                val bx: Float\n                val by: Float\n                if (direction == out) {\n                    when (blend) {\n                        setup -> {\n                            bx = bone.data.scaleX\n                            by = bone.data.scaleY\n                            bone.scaleX = bx + (kotlin.math.abs(x) * (bx.sign) - bx) * alpha\n                            bone.scaleY = by + (kotlin.math.abs(y) * (by.sign) - by) * alpha\n                        }\n                        first, replace -> {\n                            bx = bone.scaleX\n                            by = bone.scaleY\n                            bone.scaleX = bx + (kotlin.math.abs(x) * (bx.sign) - bx) * alpha\n                            bone.scaleY = by + (kotlin.math.abs(y) * (by.sign) - by) * alpha\n                        }\n                        add -> {\n                            bx = bone.scaleX\n                            by = bone.scaleY\n                            bone.scaleX = bx + (kotlin.math.abs(x) * (bx.sign) - bone.data.scaleX) * alpha\n                            bone.scaleY = by + (kotlin.math.abs(y) * (by.sign) - bone.data.scaleY) * alpha\n                        }\n                    }\n                } else {\n                    when (blend) {\n                        setup -> {\n                            bx = kotlin.math.abs(bone.data.scaleX) * (x.sign)\n                            by = kotlin.math.abs(bone.data.scaleY) * (y.sign)\n                            bone.scaleX = bx + (x - bx) * alpha\n                            bone.scaleY = by + (y - by) * alpha\n                        }\n                        first, replace -> {\n                            bx = kotlin.math.abs(bone.scaleX) * (x.sign)\n                            by = kotlin.math.abs(bone.scaleY) * (y.sign)\n                            bone.scaleX = bx + (x - bx) * alpha\n                            bone.scaleY = by + (y - by) * alpha\n                        }\n                        add -> {\n                            bx = (x.sign)\n                            by = (y.sign)\n                            bone.scaleX = kotlin.math.abs(bone.scaleX) * bx + (x - kotlin.math.abs(bone.data.scaleX) * bx) * alpha\n                            bone.scaleY = kotlin.math.abs(bone.scaleY) * by + (y - kotlin.math.abs(bone.data.scaleY) * by) * alpha\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /** Changes a bone's local [Bone.getShearX] and [Bone.getShearY].  */\n    class ShearTimeline(frameCount: Int) : TranslateTimeline(frameCount) {\n\n        override val propertyId: Int\n            get() = (TimelineType.shear.ordinal shl 24) + boneIndex\n\n        override fun apply(skeleton: Skeleton, lastTime: Float, time: Float, events: FastArrayList<Event>?, alpha: Float, blend: MixBlend,\n                           direction: MixDirection) {\n\n            val bone = skeleton.bones[boneIndex]\n            if (!bone.isActive) return\n            val frames = this.frames\n            if (time < frames[0]) { // Time is before first frame.\n                when (blend) {\n                    setup -> {\n                        bone.shearX = bone.data.shearX\n                        bone.shearY = bone.data.shearY\n                        return\n                    }\n                    first -> {\n                        bone.shearX += (bone.data.shearX - bone.shearX) * alpha\n                        bone.shearY += (bone.data.shearY - bone.shearY) * alpha\n                    }\n                    else -> Unit\n                }\n                return\n            }\n\n            var x: Float\n            var y: Float\n            if (time >= frames[frames.size - Animation.TranslateTimeline.ENTRIES]) { // Time is after last frame.\n                x = frames[frames.size + Animation.TranslateTimeline.PREV_X]\n                y = frames[frames.size + Animation.TranslateTimeline.PREV_Y]\n            } else {\n                // Interpolate between the previous frame and the current frame.\n                val frame = binarySearch(frames, time, Animation.TranslateTimeline.ENTRIES)\n                x = frames[frame + Animation.TranslateTimeline.PREV_X]\n                y = frames[frame + Animation.TranslateTimeline.PREV_Y]\n                val frameTime = frames[frame]\n                val percent = getCurvePercent(frame / Animation.TranslateTimeline.ENTRIES - 1,\n                        1 - (time - frameTime) / (frames[frame + Animation.TranslateTimeline.PREV_TIME] - frameTime))\n\n                x = x + (frames[frame + Animation.TranslateTimeline.X] - x) * percent\n                y = y + (frames[frame + Animation.TranslateTimeline.Y] - y) * percent\n            }\n            when (blend) {\n                setup -> {\n                    bone.shearX = bone.data.shearX + x * alpha\n                    bone.shearY = bone.data.shearY + y * alpha\n                }\n                first, replace -> {\n                    bone.shearX += (bone.data.shearX + x - bone.shearX) * alpha\n                    bone.shearY += (bone.data.shearY + y - bone.shearY) * alpha\n                }\n                add -> {\n                    bone.shearX += x * alpha\n                    bone.shearY += y * alpha\n                }\n            }\n        }\n    }\n\n    /** Changes a slot's [Slot.getColor].  */\n    class ColorTimeline(frameCount: Int) : CurveTimeline(frameCount), SlotTimeline {\n\n        /** The index of the slot in [Skeleton.getSlots] that will be changed.  */\n        override var slotIndex: Int = 0\n            set(index) {\n                require(index >= 0) { \"index must be >= 0.\" }\n                field = index\n            }\n\n        /** The time in seconds, red, green, blue, and alpha values for each key frame.  */\n        val frames: FloatArray // time, r, g, b, a, ...\n\n        override val propertyId: Int\n            get() = (TimelineType.color.ordinal shl 24) + slotIndex\n\n        init {\n            frames = FloatArray(frameCount * ENTRIES)\n        }\n\n        /** Sets the time in seconds, red, green, blue, and alpha for the specified key frame.  */\n        fun setFrame(frameIndex: Int, time: Float, r: Float, g: Float, b: Float, a: Float) {\n            var frameIndex = frameIndex\n            frameIndex *= ENTRIES\n            frames[frameIndex] = time\n            frames[frameIndex + R] = r\n            frames[frameIndex + G] = g\n            frames[frameIndex + B] = b\n            frames[frameIndex + A] = a\n        }\n\n        override fun apply(skeleton: Skeleton, lastTime: Float, time: Float, events: FastArrayList<Event>?, alpha: Float, blend: MixBlend,\n                           direction: MixDirection) {\n\n            val slot = skeleton.slots[slotIndex]\n            if (!slot.bone.isActive) return\n            val frames = this.frames\n            if (time < frames[0]) { // Time is before first frame.\n                when (blend) {\n                    setup -> {\n                        slot.color.setTo(slot.data.color)\n                        return\n                    }\n                    first -> {\n                        val color = slot.color\n                        val setup = slot.data.color\n                        color.add((setup.r - color.r) * alpha, (setup.g - color.g) * alpha, (setup.b - color.b) * alpha,\n                                (setup.a - color.a) * alpha)\n                    }\n                    else -> Unit\n                }\n                return\n            }\n\n            var r: Float\n            var g: Float\n            var b: Float\n            var a: Float\n            if (time >= frames[frames.size - ENTRIES]) { // Time is after last frame.\n                val i = frames.size\n                r = frames[i + PREV_R]\n                g = frames[i + PREV_G]\n                b = frames[i + PREV_B]\n                a = frames[i + PREV_A]\n            } else {\n                // Interpolate between the previous frame and the current frame.\n                val frame = binarySearch(frames, time, ENTRIES)\n                r = frames[frame + PREV_R]\n                g = frames[frame + PREV_G]\n                b = frames[frame + PREV_B]\n                a = frames[frame + PREV_A]\n                val frameTime = frames[frame]\n                val percent = getCurvePercent(frame / ENTRIES - 1,\n                        1 - (time - frameTime) / (frames[frame + PREV_TIME] - frameTime))\n\n                r += (frames[frame + R] - r) * percent\n                g += (frames[frame + G] - g) * percent\n                b += (frames[frame + B] - b) * percent\n                a += (frames[frame + A] - a) * percent\n            }\n            if (alpha == 1f)\n                slot.color.setTo(r, g, b, a)\n            else {\n                val color = slot.color\n                if (blend == setup) color.setTo(slot.data.color)\n                color.add((r - color.r) * alpha, (g - color.g) * alpha, (b - color.b) * alpha, (a - color.a) * alpha)\n            }\n        }\n\n        companion object {\n            val ENTRIES = 5\n            private val PREV_TIME = -5\n            private val PREV_R = -4\n            private val PREV_G = -3\n            private val PREV_B = -2\n            private val PREV_A = -1\n            private val R = 1\n            private val G = 2\n            private val B = 3\n            private val A = 4\n        }\n    }\n\n    /** Changes a slot's [Slot.getColor] and [Slot.getDarkColor] for two color tinting.  */\n    class TwoColorTimeline(frameCount: Int) : CurveTimeline(frameCount), SlotTimeline {\n\n        /** The index of the slot in [Skeleton.getSlots] that will be changed. The [Slot.getDarkColor] must not be\n         * null.  */\n        override var slotIndex: Int = 0\n            set(index) {\n                require(index >= 0) { \"index must be >= 0.\" }\n                field = index\n\n            }\n\n        /** The time in seconds, red, green, blue, and alpha values for each key frame.  */\n        val frames: FloatArray // time, r, g, b, a, r2, g2, b2, ...\n\n        override val propertyId: Int\n            get() = (TimelineType.twoColor.ordinal shl 24) + slotIndex\n\n        init {\n            frames = FloatArray(frameCount * ENTRIES)\n        }\n\n        /** Sets the time in seconds, light, and dark colors for the specified key frame.  */\n        fun setFrame(frameIndex: Int, time: Float, r: Float, g: Float, b: Float, a: Float, r2: Float, g2: Float, b2: Float) {\n            var frameIndex = frameIndex\n            frameIndex *= ENTRIES\n            frames[frameIndex] = time\n            frames[frameIndex + R] = r\n            frames[frameIndex + G] = g\n            frames[frameIndex + B] = b\n            frames[frameIndex + A] = a\n            frames[frameIndex + R2] = r2\n            frames[frameIndex + G2] = g2\n            frames[frameIndex + B2] = b2\n        }\n\n        override fun apply(skeleton: Skeleton, lastTime: Float, time: Float, events: FastArrayList<Event>?, alpha: Float, blend: MixBlend,\n                           direction: MixDirection) {\n\n            val slot = skeleton.slots[slotIndex]\n            if (!slot.bone.isActive) return\n            val frames = this.frames\n            if (time < frames[0]) { // Time is before first frame.\n                when (blend) {\n                    setup -> {\n                        slot.color.setTo(slot.data.color)\n                        slot.darkColor!!.setTo(slot.data.darkColor!!)\n                        return\n                    }\n                    first -> {\n                        val light = slot.color\n                        val dark = slot.darkColor\n                        val setupLight = slot.data.color\n                        val setupDark = slot.data.darkColor!!\n                        light.add((setupLight.r - light.r) * alpha, (setupLight.g - light.g) * alpha, (setupLight.b - light.b) * alpha,\n                                (setupLight.a - light.a) * alpha)\n                        dark!!.add((setupDark.r - dark.r) * alpha, (setupDark.g - dark.g) * alpha, (setupDark.b - dark.b) * alpha, 0f)\n                    }\n                    else -> Unit\n                }\n                return\n            }\n\n            var r: Float\n            var g: Float\n            var b: Float\n            var a: Float\n            var r2: Float\n            var g2: Float\n            var b2: Float\n            if (time >= frames[frames.size - ENTRIES]) { // Time is after last frame.\n                val i = frames.size\n                r = frames[i + PREV_R]\n                g = frames[i + PREV_G]\n                b = frames[i + PREV_B]\n                a = frames[i + PREV_A]\n                r2 = frames[i + PREV_R2]\n                g2 = frames[i + PREV_G2]\n                b2 = frames[i + PREV_B2]\n            } else {\n                // Interpolate between the previous frame and the current frame.\n                val frame = binarySearch(frames, time, ENTRIES)\n                r = frames[frame + PREV_R]\n                g = frames[frame + PREV_G]\n                b = frames[frame + PREV_B]\n                a = frames[frame + PREV_A]\n                r2 = frames[frame + PREV_R2]\n                g2 = frames[frame + PREV_G2]\n                b2 = frames[frame + PREV_B2]\n                val frameTime = frames[frame]\n                val percent = getCurvePercent(frame / ENTRIES - 1,\n                        1 - (time - frameTime) / (frames[frame + PREV_TIME] - frameTime))\n\n                r += (frames[frame + R] - r) * percent\n                g += (frames[frame + G] - g) * percent\n                b += (frames[frame + B] - b) * percent\n                a += (frames[frame + A] - a) * percent\n                r2 += (frames[frame + R2] - r2) * percent\n                g2 += (frames[frame + G2] - g2) * percent\n                b2 += (frames[frame + B2] - b2) * percent\n            }\n            if (alpha == 1f) {\n                slot.color.setTo(r, g, b, a)\n                slot.darkColor!!.setTo(r2, g2, b2, 1f)\n            } else {\n                val light = slot.color\n                val dark = slot.darkColor\n                if (blend == setup) {\n                    light.setTo(slot.data.color)\n                    dark!!.setTo(slot.data.darkColor!!)\n                }\n                light.add((r - light.r) * alpha, (g - light.g) * alpha, (b - light.b) * alpha, (a - light.a) * alpha)\n                dark!!.add((r2 - dark.r) * alpha, (g2 - dark.g) * alpha, (b2 - dark.b) * alpha, 0f)\n            }\n        }\n\n        companion object {\n            val ENTRIES = 8\n            private val PREV_TIME = -8\n            private val PREV_R = -7\n            private val PREV_G = -6\n            private val PREV_B = -5\n            private val PREV_A = -4\n            private val PREV_R2 = -3\n            private val PREV_G2 = -2\n            private val PREV_B2 = -1\n            private val R = 1\n            private val G = 2\n            private val B = 3\n            private val A = 4\n            private val R2 = 5\n            private val G2 = 6\n            private val B2 = 7\n        }\n    }\n\n    /** Changes a slot's [Slot.getAttachment].  */\n    class AttachmentTimeline(frameCount: Int) : SlotTimeline {\n        /** The index of the slot in [Skeleton.getSlots] that will be changed.  */\n        override var slotIndex: Int = 0\n            set(index) {\n                require(index >= 0) { \"index must be >= 0.\" }\n                field = index\n            }\n\n        init {\n            require(frameCount > 0) { \"frameCount must be > 0: $frameCount\" }\n        }\n\n        /** The time in seconds for each key frame.  */\n        val frames: FloatArray = FloatArray(frameCount) // time, ...\n\n        /** The attachment name for each key frame. May contain null values to clear the attachment.  */\n        val attachmentNames: Array<String?> = arrayOfNulls(frameCount)\n\n        override val propertyId: Int\n            get() = (TimelineType.attachment.ordinal shl 24) + slotIndex\n\n        /** The number of key frames for this timeline.  */\n        val frameCount: Int\n            get() = frames.size\n\n        /** Sets the time in seconds and the attachment name for the specified key frame.  */\n        fun setFrame(frameIndex: Int, time: Float, attachmentName: String?) {\n            frames[frameIndex] = time\n            attachmentNames[frameIndex] = attachmentName\n        }\n\n        override fun apply(skeleton: Skeleton, lastTime: Float, time: Float, events: FastArrayList<Event>?, alpha: Float, blend: MixBlend,\n                           direction: MixDirection) {\n\n            val slot = skeleton.slots[slotIndex]\n            if (!slot.bone.isActive) return\n            if (direction == out) {\n                if (blend == setup) setAttachment(skeleton, slot, slot.data.attachmentName)\n                return\n            }\n\n            val frames = this.frames\n            if (time < frames[0]) { // Time is before first frame.\n                if (blend == setup || blend == first) setAttachment(skeleton, slot, slot.data.attachmentName)\n                return\n            }\n\n            val frameIndex: Int\n            if (time >= frames[frames.size - 1])\n            // Time is after last frame.\n                frameIndex = frames.size - 1\n            else\n                frameIndex = binarySearch(frames, time) - 1\n\n            setAttachment(skeleton, slot, attachmentNames[frameIndex])\n        }\n\n        private fun setAttachment(skeleton: Skeleton, slot: Slot, attachmentName: String?) {\n            slot.setAttachment(if (attachmentName == null) null else skeleton.getAttachment(slotIndex, attachmentName))\n        }\n    }\n\n    /** Changes a slot's [Slot.getDeform] to deform a [VertexAttachment].  */\n    class DeformTimeline(frameCount: Int) : CurveTimeline(frameCount), SlotTimeline {\n        /** The index of the slot in [Skeleton.getSlots] that will be changed.  */\n        override var slotIndex: Int = 0\n            set(index) {\n                require(index >= 0) { \"index must be >= 0.\" }\n                field = index\n            }\n\n        /** The attachment that will be deformed.  */\n        lateinit var attachment: VertexAttachment\n\n        /** The time in seconds for each key frame.  */\n        val frames: FloatArray = FloatArray(frameCount) // time, ...\n\n        /** The vertices for each key frame.  */\n        val vertices: Array<FloatArray> = arrayOfNulls<FloatArray>(frameCount) as Array<FloatArray>\n\n        override val propertyId: Int\n            get() = (TimelineType.deform.ordinal shl 27) + attachment.id + slotIndex\n\n        /** Sets the time in seconds and the vertices for the specified key frame.\n         * @param vertices Vertex positions for an unweighted VertexAttachment, or deform offsets if it has weights.\n         */\n        fun setFrame(frameIndex: Int, time: Float, vertices: FloatArray) {\n            frames[frameIndex] = time\n            this.vertices[frameIndex] = vertices\n        }\n\n        override fun apply(skeleton: Skeleton, lastTime: Float, time: Float, events: FastArrayList<Event>?, alpha: Float, blend: MixBlend,\n                           direction: MixDirection) {\n            var alpha = alpha\n            var blend = blend\n\n            val slot = skeleton.slots[slotIndex]\n            if (!slot.bone.isActive) return\n            val slotAttachment = slot.attachment\n            if (slotAttachment !is VertexAttachment || slotAttachment.deformAttachment !== attachment)\n                return\n\n            val deformArray = slot.deform\n            if (deformArray.size == 0) blend = setup\n\n            val frameVertices = this.vertices\n            val vertexCount = frameVertices[0].size\n\n            val frames = this.frames\n            if (time < frames[0]) { // Time is before first frame.\n                when (blend) {\n                    setup -> {\n                        deformArray.clear()\n                        return\n                    }\n                    first -> {\n                        if (alpha == 1f) {\n                            deformArray.clear()\n                            return\n                        }\n                        val deform = deformArray.setSize(vertexCount)\n                        if (slotAttachment.bones == null) {\n                            // Unweighted vertex positions.\n                            val setupVertices = slotAttachment.vertices\n                            for (i in 0 until vertexCount)\n                                deform[i] += (setupVertices!![i] - deform[i]) * alpha\n                        } else {\n                            // Weighted deform offsets.\n                            alpha = 1 - alpha\n                            for (i in 0 until vertexCount)\n                                deform[i] *= alpha\n                        }\n                    }\n                    else -> Unit\n                }\n                return\n            }\n\n            val deform = deformArray.setSize(vertexCount)\n\n            if (time >= frames[frames.size - 1]) { // Time is after last frame.\n                val lastVertices = frameVertices[frames.size - 1]\n                if (alpha == 1f) {\n                    if (blend == add) {\n                        if (slotAttachment.bones == null) {\n                            // Unweighted vertex positions, no alpha.\n                            val setupVertices = slotAttachment.vertices\n                            for (i in 0 until vertexCount)\n                                deform[i] += lastVertices[i] - setupVertices!![i]\n                        } else {\n                            // Weighted deform offsets, no alpha.\n                            for (i in 0 until vertexCount)\n                                deform[i] += lastVertices[i]\n                        }\n                    } else {\n                        // Vertex positions or deform offsets, no alpha.\n                        arraycopy(lastVertices, 0, deform, 0, vertexCount)\n                    }\n                } else {\n                    when (blend) {\n                        setup -> {\n                            if (slotAttachment.bones == null) {\n                                // Unweighted vertex positions, with alpha.\n                                val setupVertices = slotAttachment.vertices\n                                for (i in 0 until vertexCount) {\n                                    val setup = setupVertices!![i]\n                                    deform[i] = setup + (lastVertices[i] - setup) * alpha\n                                }\n                            } else {\n                                // Weighted deform offsets, with alpha.\n                                for (i in 0 until vertexCount)\n                                    deform[i] = lastVertices[i] * alpha\n                            }\n                        }\n                        first, replace ->\n                            // Vertex positions or deform offsets, with alpha.\n                            for (i in 0 until vertexCount)\n                                deform[i] += (lastVertices[i] - deform[i]) * alpha\n                        add -> {\n                            if (slotAttachment.bones == null) {\n                                // Unweighted vertex positions, no alpha.\n                                val setupVertices = slotAttachment.vertices\n                                for (i in 0 until vertexCount)\n                                    deform[i] += (lastVertices[i] - setupVertices!![i]) * alpha\n                            } else {\n                                // Weighted deform offsets, alpha.\n                                for (i in 0 until vertexCount)\n                                    deform[i] += lastVertices[i] * alpha\n                            }\n                        }\n                    }\n                }\n                return\n            }\n\n            // Interpolate between the previous frame and the current frame.\n            val frame = binarySearch(frames, time)\n            val prevVertices = frameVertices[frame - 1]\n            val nextVertices = frameVertices[frame]\n            val frameTime = frames[frame]\n            val percent = getCurvePercent(frame - 1, 1 - (time - frameTime) / (frames[frame - 1] - frameTime))\n\n            if (alpha == 1f) {\n                if (blend == add) {\n                    if (slotAttachment.bones == null) {\n                        // Unweighted vertex positions, no alpha.\n                        val setupVertices = slotAttachment.vertices\n                        for (i in 0 until vertexCount) {\n                            val prev = prevVertices[i]\n                            deform[i] += prev + (nextVertices[i] - prev) * percent - setupVertices!![i]\n                        }\n                    } else {\n                        // Weighted deform offsets, no alpha.\n                        for (i in 0 until vertexCount) {\n                            val prev = prevVertices[i]\n                            deform[i] += prev + (nextVertices[i] - prev) * percent\n                        }\n                    }\n                } else {\n                    // Vertex positions or deform offsets, no alpha.\n                    for (i in 0 until vertexCount) {\n                        val prev = prevVertices[i]\n                        deform[i] = prev + (nextVertices[i] - prev) * percent\n                    }\n                }\n            } else {\n                when (blend) {\n                    setup -> {\n                        if (slotAttachment.bones == null) {\n                            // Unweighted vertex positions, with alpha.\n                            val setupVertices = slotAttachment.vertices\n                            for (i in 0 until vertexCount) {\n                                val prev = prevVertices[i]\n                                val setup = setupVertices!![i]\n                                deform[i] = setup + (prev + (nextVertices[i] - prev) * percent - setup) * alpha\n                            }\n                        } else {\n                            // Weighted deform offsets, with alpha.\n                            for (i in 0 until vertexCount) {\n                                val prev = prevVertices[i]\n                                deform[i] = (prev + (nextVertices[i] - prev) * percent) * alpha\n                            }\n                        }\n                    }\n                    first, replace ->\n                        // Vertex positions or deform offsets, with alpha.\n                        for (i in 0 until vertexCount) {\n                            val prev = prevVertices[i]\n                            deform[i] += (prev + (nextVertices[i] - prev) * percent - deform[i]) * alpha\n                        }\n                    add -> {\n                        if (slotAttachment.bones == null) {\n                            // Unweighted vertex positions, with alpha.\n                            val setupVertices = slotAttachment.vertices\n                            for (i in 0 until vertexCount) {\n                                val prev = prevVertices[i]\n                                deform[i] += (prev + (nextVertices[i] - prev) * percent - setupVertices!![i]) * alpha\n                            }\n                        } else {\n                            // Weighted deform offsets, with alpha.\n                            for (i in 0 until vertexCount) {\n                                val prev = prevVertices[i]\n                                deform[i] += (prev + (nextVertices[i] - prev) * percent) * alpha\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /** Fires an [Event] when specific animation times are reached.  */\n    class EventTimeline(frameCount: Int) : Timeline {\n        init {\n            require(frameCount > 0) { \"frameCount must be > 0: $frameCount\" }\n        }\n        /** The time in seconds for each key frame.  */\n        val frames: FloatArray = FloatArray(frameCount) // time, ...\n\n        /** The event for each key frame.  */\n        val events: Array<Event> = arrayOfNulls<Event>(frameCount) as Array<Event>\n\n        override val propertyId: Int\n            get() = TimelineType.event.ordinal shl 24\n\n        /** The number of key frames for this timeline.  */\n        val frameCount: Int\n            get() = frames.size\n\n        /** Sets the time in seconds and the event for the specified key frame.  */\n        fun setFrame(frameIndex: Int, event: Event) {\n            frames[frameIndex] = event.time\n            events[frameIndex] = event\n        }\n\n        /** Fires events for frames > `lastTime` and <= `time`.  */\n        override fun apply(skeleton: Skeleton, lastTime: Float, time: Float, firedEvents: FastArrayList<Event>?, alpha: Float, blend: MixBlend,\n                           direction: MixDirection) {\n            var lastTime = lastTime\n\n            if (firedEvents == null) return\n            val frames = this.frames\n            val frameCount = frames.size\n\n            if (lastTime > time) { // Fire events after last time for looped animations.\n                apply(skeleton, lastTime, Int.MAX_VALUE.toFloat(), firedEvents, alpha, blend, direction)\n                lastTime = -1f\n            } else if (lastTime >= frames[frameCount - 1])\n            // Last time is after last frame.\n                return\n            if (time < frames[0]) return  // Time is before first frame.\n\n            var frame: Int\n            if (lastTime < frames[0])\n                frame = 0\n            else {\n                frame = binarySearch(frames, lastTime)\n                val frameTime = frames[frame]\n                while (frame > 0) { // Fire multiple events with the same frame.\n                    if (frames[frame - 1] != frameTime) break\n                    frame--\n                }\n            }\n            while (frame < frameCount && time >= frames[frame]) {\n                firedEvents.add(events[frame])\n                frame++\n            }\n        }\n    }\n\n    /** Changes a skeleton's [Skeleton.getDrawOrder].  */\n    class DrawOrderTimeline(frameCount: Int) : Timeline {\n        init {\n            require(frameCount > 0) { \"frameCount must be > 0: $frameCount\" }\n        }\n        /** The time in seconds for each key frame.  */\n        val frames: FloatArray = FloatArray(frameCount) // time, ...\n\n        /** The draw order for each key frame. See [.setFrame].  */\n        val drawOrders: Array<IntArray?> = arrayOfNulls<IntArray>(frameCount)\n\n        override val propertyId: Int\n            get() = TimelineType.drawOrder.ordinal shl 24\n\n        /** The number of key frames for this timeline.  */\n        val frameCount: Int\n            get() = frames.size\n\n        /** Sets the time in seconds and the draw order for the specified key frame.\n         * @param drawOrder For each slot in [Skeleton.slots], the index of the new draw order. May be null to use setup pose\n         * draw order.\n         */\n        fun setFrame(frameIndex: Int, time: Float, drawOrder: IntArray?) {\n            frames[frameIndex] = time\n            drawOrders[frameIndex] = drawOrder\n        }\n\n        override fun apply(skeleton: Skeleton, lastTime: Float, time: Float, events: FastArrayList<Event>?, alpha: Float, blend: MixBlend,\n                           direction: MixDirection) {\n\n            val drawOrder = skeleton.drawOrder\n            val slots = skeleton.slots\n            if (direction == out) {\n                if (blend == setup) arraycopy(slots, 0, drawOrder, 0, slots.size)\n                return\n            }\n\n            val frames = this.frames\n            if (time < frames[0]) { // Time is before first frame.\n                if (blend == setup || blend == first) arraycopy(slots, 0, drawOrder, 0, slots.size)\n                return\n            }\n\n            val frame: Int\n            if (time >= frames[frames.size - 1])\n            // Time is after last frame.\n                frame = frames.size - 1\n            else\n                frame = binarySearch(frames, time) - 1\n\n            val drawOrderToSetupIndex = drawOrders[frame]\n            if (drawOrderToSetupIndex == null)\n                arraycopy(slots, 0, drawOrder, 0, slots.size)\n            else {\n                var i = 0\n                val n = drawOrderToSetupIndex.size\n                while (i < n) {\n                    drawOrder.setAndGrow(i, slots[drawOrderToSetupIndex[i]])\n                    i++\n                }\n            }\n        }\n    }\n\n    /** Changes an IK constraint's [IkConstraint.getMix], [IkConstraint.getSoftness],\n     * [IkConstraint.getBendDirection], [IkConstraint.getStretch], and [IkConstraint.getCompress].  */\n    class IkConstraintTimeline(frameCount: Int) : CurveTimeline(frameCount) {\n\n        internal var ikConstraintIndex: Int = 0\n\n        /** The time in seconds, mix, softness, bend direction, compress, and stretch for each key frame.  */\n        val frames: FloatArray = FloatArray(frameCount * ENTRIES) // time, mix, softness, bendDirection, compress, stretch, ...\n\n        override val propertyId: Int\n            get() = (TimelineType.ikConstraint.ordinal shl 24) + ikConstraintIndex\n\n        fun setIkConstraintIndex(index: Int) {\n            require(index >= 0) { \"index must be >= 0.\" }\n            this.ikConstraintIndex = index\n        }\n\n        /** The index of the IK constraint slot in [Skeleton.getIkConstraints] that will be changed.  */\n        fun getIkConstraintIndex(): Int {\n            return ikConstraintIndex\n        }\n\n        /** Sets the time in seconds, mix, softness, bend direction, compress, and stretch for the specified key frame.  */\n        fun setFrame(frameIndex: Int, time: Float, mix: Float, softness: Float, bendDirection: Int, compress: Boolean,\n                     stretch: Boolean) {\n            var frameIndex = frameIndex\n            frameIndex *= ENTRIES\n            frames[frameIndex] = time\n            frames[frameIndex + MIX] = mix\n            frames[frameIndex + SOFTNESS] = softness\n            frames[frameIndex + BEND_DIRECTION] = bendDirection.toFloat()\n            frames[frameIndex + COMPRESS] = (if (compress) 1 else 0).toFloat()\n            frames[frameIndex + STRETCH] = (if (stretch) 1 else 0).toFloat()\n        }\n\n        override fun apply(skeleton: Skeleton, lastTime: Float, time: Float, events: FastArrayList<Event>?, alpha: Float, blend: MixBlend,\n                           direction: MixDirection) {\n\n            val constraint = skeleton.ikConstraints[ikConstraintIndex]\n            if (!constraint.active) return\n            val frames = this.frames\n            if (time < frames[0]) { // Time is before first frame.\n                when (blend) {\n                    setup -> {\n                        constraint.mix = constraint.data.mix\n                        constraint.softness = constraint.data.softness\n                        constraint.bendDirection = constraint.data.bendDirection\n                        constraint.compress = constraint.data.compress\n                        constraint.stretch = constraint.data.stretch\n                        return\n                    }\n                    first -> {\n                        constraint.mix += (constraint.data.mix - constraint.mix) * alpha\n                        constraint.softness += (constraint.data.softness - constraint.softness) * alpha\n                        constraint.bendDirection = constraint.data.bendDirection\n                        constraint.compress = constraint.data.compress\n                        constraint.stretch = constraint.data.stretch\n                    }\n                    else -> Unit\n                }\n                return\n            }\n\n            if (time >= frames[frames.size - ENTRIES]) { // Time is after last frame.\n                if (blend == setup) {\n                    constraint.mix = constraint.data.mix + (frames[frames.size + PREV_MIX] - constraint.data.mix) * alpha\n                    constraint.softness = constraint.data.softness + (frames[frames.size + PREV_SOFTNESS] - constraint.data.softness) * alpha\n                    if (direction == out) {\n                        constraint.bendDirection = constraint.data.bendDirection\n                        constraint.compress = constraint.data.compress\n                        constraint.stretch = constraint.data.stretch\n                    } else {\n                        constraint.bendDirection = frames[frames.size + PREV_BEND_DIRECTION].toInt()\n                        constraint.compress = frames[frames.size + PREV_COMPRESS] != 0f\n                        constraint.stretch = frames[frames.size + PREV_STRETCH] != 0f\n                    }\n                } else {\n                    constraint.mix += (frames[frames.size + PREV_MIX] - constraint.mix) * alpha\n                    constraint.softness += (frames[frames.size + PREV_SOFTNESS] - constraint.softness) * alpha\n                    if (direction == `in`) {\n                        constraint.bendDirection = frames[frames.size + PREV_BEND_DIRECTION].toInt()\n                        constraint.compress = frames[frames.size + PREV_COMPRESS] != 0f\n                        constraint.stretch = frames[frames.size + PREV_STRETCH] != 0f\n                    }\n                }\n                return\n            }\n\n            // Interpolate between the previous frame and the current frame.\n            val frame = binarySearch(frames, time, ENTRIES)\n            val mix = frames[frame + PREV_MIX]\n            val softness = frames[frame + PREV_SOFTNESS]\n            val frameTime = frames[frame]\n            val percent = getCurvePercent(frame / ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + PREV_TIME] - frameTime))\n\n            if (blend == setup) {\n                constraint.mix = constraint.data.mix + (mix + (frames[frame + MIX] - mix) * percent - constraint.data.mix) * alpha\n                constraint.softness = constraint.data.softness + (softness + (frames[frame + SOFTNESS] - softness) * percent - constraint.data.softness) * alpha\n                if (direction == out) {\n                    constraint.bendDirection = constraint.data.bendDirection\n                    constraint.compress = constraint.data.compress\n                    constraint.stretch = constraint.data.stretch\n                } else {\n                    constraint.bendDirection = frames[frame + PREV_BEND_DIRECTION].toInt()\n                    constraint.compress = frames[frame + PREV_COMPRESS] != 0f\n                    constraint.stretch = frames[frame + PREV_STRETCH] != 0f\n                }\n            } else {\n                constraint.mix += (mix + (frames[frame + MIX] - mix) * percent - constraint.mix) * alpha\n                constraint.softness += (softness + (frames[frame + SOFTNESS] - softness) * percent - constraint.softness) * alpha\n                if (direction == `in`) {\n                    constraint.bendDirection = frames[frame + PREV_BEND_DIRECTION].toInt()\n                    constraint.compress = frames[frame + PREV_COMPRESS] != 0f\n                    constraint.stretch = frames[frame + PREV_STRETCH] != 0f\n                }\n            }\n        }\n\n        companion object {\n            val ENTRIES = 6\n            private val PREV_TIME = -6\n            private val PREV_MIX = -5\n            private val PREV_SOFTNESS = -4\n            private val PREV_BEND_DIRECTION = -3\n            private val PREV_COMPRESS = -2\n            private val PREV_STRETCH = -1\n            private val MIX = 1\n            private val SOFTNESS = 2\n            private val BEND_DIRECTION = 3\n            private val COMPRESS = 4\n            private val STRETCH = 5\n        }\n    }\n\n    /** Changes a transform constraint's [TransformConstraint.getRotateMix], [TransformConstraint.getTranslateMix],\n     * [TransformConstraint.getScaleMix], and [TransformConstraint.getShearMix].  */\n    class TransformConstraintTimeline(frameCount: Int) : CurveTimeline(frameCount) {\n\n        internal var transformConstraintIndex: Int = 0\n\n        /** The time in seconds, rotate mix, translate mix, scale mix, and shear mix for each key frame.  */\n        val frames: FloatArray = FloatArray(frameCount * ENTRIES) // time, rotate mix, translate mix, scale mix, shear mix, ...\n\n        override val propertyId: Int\n            get() = (TimelineType.transformConstraint.ordinal shl 24) + transformConstraintIndex\n\n        fun setTransformConstraintIndex(index: Int) {\n            require(index >= 0) { \"index must be >= 0.\" }\n            this.transformConstraintIndex = index\n        }\n\n        /** The index of the transform constraint slot in [Skeleton.getTransformConstraints] that will be changed.  */\n        fun getTransformConstraintIndex(): Int {\n            return transformConstraintIndex\n        }\n\n        /** The time in seconds, rotate mix, translate mix, scale mix, and shear mix for the specified key frame.  */\n        fun setFrame(frameIndex: Int, time: Float, rotateMix: Float, translateMix: Float, scaleMix: Float, shearMix: Float) {\n            var frameIndex = frameIndex\n            frameIndex *= ENTRIES\n            frames[frameIndex] = time\n            frames[frameIndex + ROTATE] = rotateMix\n            frames[frameIndex + TRANSLATE] = translateMix\n            frames[frameIndex + SCALE] = scaleMix\n            frames[frameIndex + SHEAR] = shearMix\n        }\n\n        override fun apply(skeleton: Skeleton, lastTime: Float, time: Float, events: FastArrayList<Event>?, alpha: Float, blend: MixBlend,\n                           direction: MixDirection) {\n\n            val constraint = skeleton.transformConstraints[transformConstraintIndex]\n            if (!constraint.isActive) return\n            val frames = this.frames\n            if (time < frames[0]) { // Time is before first frame.\n                val data = constraint.data\n                when (blend) {\n                    setup -> {\n                        constraint.rotateMix = data.rotateMix\n                        constraint.translateMix = data.translateMix\n                        constraint.scaleMix = data.scaleMix\n                        constraint.shearMix = data.shearMix\n                        return\n                    }\n                    first -> {\n                        constraint.rotateMix += (data.rotateMix - constraint.rotateMix) * alpha\n                        constraint.translateMix += (data.translateMix - constraint.translateMix) * alpha\n                        constraint.scaleMix += (data.scaleMix - constraint.scaleMix) * alpha\n                        constraint.shearMix += (data.shearMix - constraint.shearMix) * alpha\n                    }\n                    else -> Unit\n                }\n                return\n            }\n\n            var rotate: Float\n            var translate: Float\n            var scale: Float\n            var shear: Float\n            if (time >= frames[frames.size - ENTRIES]) { // Time is after last frame.\n                val i = frames.size\n                rotate = frames[i + PREV_ROTATE]\n                translate = frames[i + PREV_TRANSLATE]\n                scale = frames[i + PREV_SCALE]\n                shear = frames[i + PREV_SHEAR]\n            } else {\n                // Interpolate between the previous frame and the current frame.\n                val frame = binarySearch(frames, time, ENTRIES)\n                rotate = frames[frame + PREV_ROTATE]\n                translate = frames[frame + PREV_TRANSLATE]\n                scale = frames[frame + PREV_SCALE]\n                shear = frames[frame + PREV_SHEAR]\n                val frameTime = frames[frame]\n                val percent = getCurvePercent(frame / ENTRIES - 1,\n                        1 - (time - frameTime) / (frames[frame + PREV_TIME] - frameTime))\n\n                rotate += (frames[frame + ROTATE] - rotate) * percent\n                translate += (frames[frame + TRANSLATE] - translate) * percent\n                scale += (frames[frame + SCALE] - scale) * percent\n                shear += (frames[frame + SHEAR] - shear) * percent\n            }\n            if (blend == setup) {\n                val data = constraint.data\n                constraint.rotateMix = data.rotateMix + (rotate - data.rotateMix) * alpha\n                constraint.translateMix = data.translateMix + (translate - data.translateMix) * alpha\n                constraint.scaleMix = data.scaleMix + (scale - data.scaleMix) * alpha\n                constraint.shearMix = data.shearMix + (shear - data.shearMix) * alpha\n            } else {\n                constraint.rotateMix += (rotate - constraint.rotateMix) * alpha\n                constraint.translateMix += (translate - constraint.translateMix) * alpha\n                constraint.scaleMix += (scale - constraint.scaleMix) * alpha\n                constraint.shearMix += (shear - constraint.shearMix) * alpha\n            }\n        }\n\n        companion object {\n            val ENTRIES = 5\n            private val PREV_TIME = -5\n            private val PREV_ROTATE = -4\n            private val PREV_TRANSLATE = -3\n            private val PREV_SCALE = -2\n            private val PREV_SHEAR = -1\n            private val ROTATE = 1\n            private val TRANSLATE = 2\n            private val SCALE = 3\n            private val SHEAR = 4\n        }\n    }\n\n    /** Changes a path constraint's [PathConstraint.getPosition].  */\n    open class PathConstraintPositionTimeline(frameCount: Int) : CurveTimeline(frameCount) {\n\n        internal var pathConstraintIndex: Int = 0\n\n        /** The time in seconds and path constraint position for each key frame.  */\n        val frames: FloatArray = FloatArray(frameCount * ENTRIES) // time, position, ...\n\n        override val propertyId: Int\n            get() = (TimelineType.pathConstraintPosition.ordinal shl 24) + pathConstraintIndex\n\n        fun setPathConstraintIndex(index: Int) {\n            require(index >= 0) { \"index must be >= 0.\" }\n            this.pathConstraintIndex = index\n        }\n\n        /** The index of the path constraint slot in [Skeleton.getPathConstraints] that will be changed.  */\n        fun getPathConstraintIndex(): Int {\n            return pathConstraintIndex\n        }\n\n        /** Sets the time in seconds and path constraint position for the specified key frame.  */\n        fun setFrame(frameIndex: Int, time: Float, position: Float) {\n            var frameIndex = frameIndex\n            frameIndex *= ENTRIES\n            frames[frameIndex] = time\n            frames[frameIndex + VALUE] = position\n        }\n\n        override fun apply(skeleton: Skeleton, lastTime: Float, time: Float, events: FastArrayList<Event>?, alpha: Float, blend: MixBlend,\n                           direction: MixDirection) {\n\n            val constraint = skeleton.pathConstraints[pathConstraintIndex]\n            if (!constraint.isActive) return\n            val frames = this.frames\n            if (time < frames[0]) { // Time is before first frame.\n                when (blend) {\n                    setup -> {\n                        constraint.position = constraint.data.position\n                        return\n                    }\n                    first -> constraint.position += (constraint.data.position - constraint.position) * alpha\n                    else -> Unit\n                }\n                return\n            }\n\n            var position: Float\n            if (time >= frames[frames.size - ENTRIES])\n            // Time is after last frame.\n                position = frames[frames.size + PREV_VALUE]\n            else {\n                // Interpolate between the previous frame and the current frame.\n                val frame = binarySearch(frames, time, ENTRIES)\n                position = frames[frame + PREV_VALUE]\n                val frameTime = frames[frame]\n                val percent = getCurvePercent(frame / ENTRIES - 1,\n                        1 - (time - frameTime) / (frames[frame + PREV_TIME] - frameTime))\n\n                position += (frames[frame + VALUE] - position) * percent\n            }\n            if (blend == setup)\n                constraint.position = constraint.data.position + (position - constraint.data.position) * alpha\n            else\n                constraint.position += (position - constraint.position) * alpha\n        }\n\n        companion object {\n            val ENTRIES = 2\n            internal val PREV_TIME = -2\n            internal val PREV_VALUE = -1\n            internal val VALUE = 1\n        }\n    }\n\n    /** Changes a path constraint's [PathConstraint.getSpacing].  */\n    class PathConstraintSpacingTimeline(frameCount: Int) : PathConstraintPositionTimeline(frameCount) {\n\n        override val propertyId: Int\n            get() = (TimelineType.pathConstraintSpacing.ordinal shl 24) + pathConstraintIndex\n\n        override fun apply(skeleton: Skeleton, lastTime: Float, time: Float, events: FastArrayList<Event>?, alpha: Float, blend: MixBlend,\n                           direction: MixDirection) {\n\n            val constraint = skeleton.pathConstraints[pathConstraintIndex]\n            if (!constraint.isActive) return\n            val frames = this.frames\n            if (time < frames[0]) { // Time is before first frame.\n                when (blend) {\n                    setup -> {\n                        constraint.spacing = constraint.data.spacing\n                        return\n                    }\n                    first -> constraint.spacing += (constraint.data.spacing - constraint.spacing) * alpha\n                    else -> Unit\n                }\n                return\n            }\n\n            var spacing: Float\n            if (time >= frames[frames.size - Animation.PathConstraintPositionTimeline.ENTRIES])\n            // Time is after last frame.\n                spacing = frames[frames.size + Animation.PathConstraintPositionTimeline.PREV_VALUE]\n            else {\n                // Interpolate between the previous frame and the current frame.\n                val frame = binarySearch(frames, time, Animation.PathConstraintPositionTimeline.ENTRIES)\n                spacing = frames[frame + Animation.PathConstraintPositionTimeline.PREV_VALUE]\n                val frameTime = frames[frame]\n                val percent = getCurvePercent(frame / Animation.PathConstraintPositionTimeline.ENTRIES - 1,\n                        1 - (time - frameTime) / (frames[frame + Animation.PathConstraintPositionTimeline.PREV_TIME] - frameTime))\n\n                spacing += (frames[frame + Animation.PathConstraintPositionTimeline.VALUE] - spacing) * percent\n            }\n\n            if (blend == setup)\n                constraint.spacing = constraint.data.spacing + (spacing - constraint.data.spacing) * alpha\n            else\n                constraint.spacing += (spacing - constraint.spacing) * alpha\n        }\n    }\n\n    /** Changes a transform constraint's [PathConstraint.getRotateMix] and\n     * [TransformConstraint.getTranslateMix].  */\n    class PathConstraintMixTimeline(frameCount: Int) : CurveTimeline(frameCount) {\n\n        internal var pathConstraintIndex: Int = 0\n\n        /** The time in seconds, rotate mix, and translate mix for each key frame.  */\n        val frames: FloatArray = FloatArray(frameCount * ENTRIES) // time, rotate mix, translate mix, ...\n\n        override val propertyId: Int\n            get() = (TimelineType.pathConstraintMix.ordinal shl 24) + pathConstraintIndex\n\n        fun setPathConstraintIndex(index: Int) {\n            require(index >= 0) { \"index must be >= 0.\" }\n            this.pathConstraintIndex = index\n        }\n\n        /** The index of the path constraint slot in [Skeleton.getPathConstraints] that will be changed.  */\n        fun getPathConstraintIndex(): Int {\n            return pathConstraintIndex\n        }\n\n        /** The time in seconds, rotate mix, and translate mix for the specified key frame.  */\n        fun setFrame(frameIndex: Int, time: Float, rotateMix: Float, translateMix: Float) {\n            var frameIndex = frameIndex\n            frameIndex *= ENTRIES\n            frames[frameIndex] = time\n            frames[frameIndex + ROTATE] = rotateMix\n            frames[frameIndex + TRANSLATE] = translateMix\n        }\n\n        override fun apply(skeleton: Skeleton, lastTime: Float, time: Float, events: FastArrayList<Event>?, alpha: Float, blend: MixBlend,\n                           direction: MixDirection) {\n\n            val constraint = skeleton.pathConstraints[pathConstraintIndex]\n            if (!constraint.isActive) return\n            val frames = this.frames\n            if (time < frames[0]) { // Time is before first frame.\n                when (blend) {\n                    setup -> {\n                        constraint.rotateMix = constraint.data.rotateMix\n                        constraint.translateMix = constraint.data.translateMix\n                        return\n                    }\n                    first -> {\n                        constraint.rotateMix += (constraint.data.rotateMix - constraint.rotateMix) * alpha\n                        constraint.translateMix += (constraint.data.translateMix - constraint.translateMix) * alpha\n                    }\n                    else -> Unit\n                }\n                return\n            }\n\n            var rotate: Float\n            var translate: Float\n            if (time >= frames[frames.size - ENTRIES]) { // Time is after last frame.\n                rotate = frames[frames.size + PREV_ROTATE]\n                translate = frames[frames.size + PREV_TRANSLATE]\n            } else {\n                // Interpolate between the previous frame and the current frame.\n                val frame = binarySearch(frames, time, ENTRIES)\n                rotate = frames[frame + PREV_ROTATE]\n                translate = frames[frame + PREV_TRANSLATE]\n                val frameTime = frames[frame]\n                val percent = getCurvePercent(frame / ENTRIES - 1,\n                        1 - (time - frameTime) / (frames[frame + PREV_TIME] - frameTime))\n\n                rotate += (frames[frame + ROTATE] - rotate) * percent\n                translate += (frames[frame + TRANSLATE] - translate) * percent\n            }\n\n            if (blend == setup) {\n                constraint.rotateMix = constraint.data.rotateMix + (rotate - constraint.data.rotateMix) * alpha\n                constraint.translateMix = constraint.data.translateMix + (translate - constraint.data.translateMix) * alpha\n            } else {\n                constraint.rotateMix += (rotate - constraint.rotateMix) * alpha\n                constraint.translateMix += (translate - constraint.translateMix) * alpha\n            }\n        }\n\n        companion object {\n            val ENTRIES = 3\n            private val PREV_TIME = -3\n            private val PREV_ROTATE = -2\n            private val PREV_TRANSLATE = -1\n            private val ROTATE = 1\n            private val TRANSLATE = 2\n        }\n    }\n\n    companion object {\n\n        /** @param target After the first and before the last value.\n         * @return index of first value greater than the target.\n         */\n        internal fun binarySearch(values: FloatArray, target: Float, step: Int): Int {\n            var low = 0\n            var high = values.size / step - 2\n            if (high == 0) return step\n            var current = high.ushr(1)\n            while (true) {\n                if (values[(current + 1) * step] <= target)\n                    low = current + 1\n                else\n                    high = current\n                if (low == high) return (low + 1) * step\n                current = (low + high).ushr(1)\n            }\n        }\n\n        /** @param target After the first and before the last value.\n         * @return index of first value greater than the target.\n         */\n        internal fun binarySearch(values: FloatArray, target: Float): Int {\n            var low = 0\n            var high = values.size - 2\n            if (high == 0) return 1\n            var current = high.ushr(1)\n            while (true) {\n                if (values[current + 1] <= target)\n                    low = current + 1\n                else\n                    high = current\n                if (low == high) return low + 1\n                current = (low + high).ushr(1)\n            }\n        }\n\n        internal fun linearSearch(values: FloatArray, target: Float, step: Int): Int {\n            var i = 0\n            val last = values.size - step\n            while (i <= last) {\n                if (values[i] > target) return i\n                i += step\n            }\n            return -1\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine\n\nimport com.esotericsoftware.spine.Animation.*\nimport com.esotericsoftware.spine.utils.*\nimport com.soywiz.kds.*\nimport com.soywiz.kmem.*\nimport kotlin.js.*\nimport kotlin.math.*\n\n/** Applies animations over time, queues animations for later playback, mixes (crossfading) between animations, and applies\n * multiple animations on top of each other (layering).\n *\n *\n * See [Applying Animations](http://esotericsoftware.com/spine-applying-animations/) in the Spine Runtimes Guide.  */\nclass AnimationState {\n\n    private var data: AnimationStateData? = null\n\n    /** The list of tracks that currently have animations, which may contain null entries.  */\n    val tracks: FastArrayList<TrackEntry?> = FastArrayList()\n    private val events = FastArrayList<Event>()\n    internal val listeners: FastArrayList<AnimationStateListener> = FastArrayList()\n    private val queue = EventQueue()\n    private val propertyIDs = IntSet()\n    @JsName(\"animationsChangedProp\")\n    internal var animationsChanged: Boolean = false\n\n    /** Multiplier for the delta time when the animation state is updated, causing time for all animations and mixes to play slower\n     * or faster. Defaults to 1.\n     *\n     *\n     * See TrackEntry [TrackEntry.getTimeScale] for affecting a single animation.  */\n    var timeScale = 1f\n    private var unkeyedState: Int = 0\n\n    internal val trackEntryPool: Pool<TrackEntry> = Pool.fromPoolable { TrackEntry() }\n\n    /** Creates an uninitialized AnimationState. The animation state data must be set before use.  */\n    constructor() {}\n\n    constructor(data: AnimationStateData) {\n        this.data = data\n    }\n\n    /** Increments each track entry [TrackEntry.getTrackTime], setting queued animations as current if needed.  */\n    fun update(delta: Float) {\n        var delta = delta\n        delta *= timeScale\n        var i = 0\n        val n = tracks.size\n        while (i < n) {\n            val current = tracks[i]\n            if (current == null) {\n                i++\n                continue\n            }\n\n            current.animationLast = current.nextAnimationLast\n            current.trackLast = current.nextTrackLast\n\n            var currentDelta = delta * current.timeScale\n\n            if (current.delay > 0) {\n                current.delay -= currentDelta\n                if (current.delay > 0) {\n                    i++\n                    continue\n                }\n                currentDelta = -current.delay\n                current.delay = 0f\n            }\n\n            var next = current.next\n            if (next != null) {\n                // When the next entry's delay is passed, change to the next entry, preserving leftover time.\n                val nextTime = current.trackLast - next.delay\n                if (nextTime >= 0) {\n                    next.delay = 0f\n                    next.trackTime += if (current.timeScale == 0f) 0f else (nextTime / current.timeScale + delta) * next.timeScale\n                    current.trackTime += currentDelta\n                    setCurrent(i, next, true)\n                    while (next!!.mixingFrom != null) {\n                        next.mixTime += delta\n                        next = next.mixingFrom\n                    }\n                    i++\n                    continue\n                }\n            } else if (current.trackLast >= current.trackEnd && current.mixingFrom == null) {\n                // Clear the track when there is no next entry, the track end time is reached, and there is no mixingFrom.\n                tracks.setAndGrow(i, null)\n                queue.end(current)\n                disposeNext(current)\n                continue\n            }\n            if (current.mixingFrom != null && updateMixingFrom(current, delta)) {\n                // End mixing from entries once all have completed.\n                var from = current.mixingFrom\n                current.mixingFrom = null\n                if (from != null) from.mixingTo = null\n                while (from != null) {\n                    queue.end(from)\n                    from = from.mixingFrom\n                }\n            }\n\n            current.trackTime += currentDelta\n            i++\n        }\n\n        queue.drain()\n    }\n\n    /** Returns true when all mixing from entries are complete.  */\n    private fun updateMixingFrom(to: TrackEntry, delta: Float): Boolean {\n        val from = to.mixingFrom ?: return true\n\n        val finished = updateMixingFrom(from, delta)\n\n        from.animationLast = from.nextAnimationLast\n        from.trackLast = from.nextTrackLast\n\n        // Require mixTime > 0 to ensure the mixing from entry was applied at least once.\n        if (to.mixTime > 0 && to.mixTime >= to.mixDuration) {\n            // Require totalAlpha == 0 to ensure mixing is complete, unless mixDuration == 0 (the transition is a single frame).\n            if (from.totalAlpha == 0f || to.mixDuration == 0f) {\n                to.mixingFrom = from.mixingFrom\n                if (from.mixingFrom != null) from.mixingFrom!!.mixingTo = to\n                to.interruptAlpha = from.interruptAlpha\n                queue.end(from)\n            }\n            return finished\n        }\n\n        from.trackTime += delta * from.timeScale\n        to.mixTime += delta\n        return false\n    }\n\n    /** Poses the skeleton using the track entry animations. The animation state is not changed, so can be applied to multiple\n     * skeletons to pose them identically.\n     * @return True if any animations were applied.\n     */\n    fun apply(skeleton: Skeleton): Boolean {\n        if (animationsChanged) animationsChanged()\n\n        val events = this.events\n        var applied = false\n        run {\n            var i = 0\n            val n = tracks.size\n            while (i < n) {\n                val current = tracks[i]\n                if (current == null || current.delay > 0) {\n                    i++\n                    continue\n                }\n                applied = true\n\n                // Track 0 animations aren't for layering, so do not show the previously applied animations before the first key.\n                val blend = if (i == 0) MixBlend.first else current.mixBlend\n\n                // Apply mixing from entries first.\n                var mix = current.alpha\n                if (current.mixingFrom != null)\n                    mix *= applyMixingFrom(current, skeleton, blend)\n                else if (current.trackTime >= current.trackEnd && current.next == null)\n                //\n                    mix = 0f // Set to setup pose the last time the entry will be applied.\n\n                // Apply current entry.\n                val animationLast = current.animationLast\n                val animationTime = current.animationTime\n                val timelineCount = current.animation!!.timelines.size\n                val timelines = current.animation!!.timelines\n                if (i == 0 && mix == 1f || blend == MixBlend.add) {\n                    for (ii in 0 until timelineCount) {\n                        val timeline = timelines[ii]\n                        if (timeline is AttachmentTimeline)\n                            applyAttachmentTimeline(timeline, skeleton, animationTime, blend, true)\n                        else\n                            (timeline as Timeline).apply(skeleton, animationLast, animationTime, events, mix, blend, MixDirection.`in`)\n                    }\n                } else {\n                    val timelineMode = current.timelineMode.data\n\n                    val firstFrame = current.timelinesRotation.size != timelineCount shl 1\n                    if (firstFrame) current.timelinesRotation.setSize(timelineCount shl 1)\n                    val timelinesRotation = current.timelinesRotation.data\n\n                    for (ii in 0 until timelineCount) {\n                        val timeline = timelines[ii] as Timeline\n                        val timelineBlend = if (timelineMode[ii] == SUBSEQUENT) blend else MixBlend.setup\n                        if (timeline is RotateTimeline) {\n                            applyRotateTimeline(timeline, skeleton, animationTime, mix, timelineBlend, timelinesRotation,\n                                    ii shl 1, firstFrame)\n                        } else if (timeline is AttachmentTimeline)\n                            applyAttachmentTimeline(timeline, skeleton, animationTime, blend, true)\n                        else\n                            timeline.apply(skeleton, animationLast, animationTime, events, mix, timelineBlend, MixDirection.`in`)\n                    }\n                }\n                queueEvents(current, animationTime)\n                events.clear()\n                current.nextAnimationLast = animationTime\n                current.nextTrackLast = current.trackTime\n                i++\n            }\n        }\n\n        // Set slots attachments to the setup pose, if needed. This occurs if an animation that is mixing out sets attachments so\n        // subsequent timelines see any deform, but the subsequent timelines don't set an attachment (eg they are also mixing out or\n        // the time is before the first key).\n        val setupState = unkeyedState + SETUP\n        val slots = skeleton.slots\n        var i = 0\n        val n = skeleton.slots.size\n        while (i < n) {\n            val slot = slots[i] as Slot\n            if (slot.attachmentState == setupState) {\n                val attachmentName = slot.data.attachmentName\n                slot.setAttachment(if (attachmentName == null) null else skeleton.getAttachment(slot.data.index, attachmentName))\n            }\n            i++\n        }\n        unkeyedState += 2 // Increasing after each use avoids the need to reset attachmentState for every slot.\n\n        queue.drain()\n        return applied\n    }\n\n    private fun applyMixingFrom(to: TrackEntry, skeleton: Skeleton, blend: MixBlend): Float {\n        var blend = blend\n        val from = to.mixingFrom\n        if (from!!.mixingFrom != null) applyMixingFrom(from, skeleton, blend)\n\n        var mix: Float\n        if (to.mixDuration == 0f) { // Single frame mix to undo mixingFrom changes.\n            mix = 1f\n            if (blend == MixBlend.first) blend = MixBlend.setup // Tracks >0 are transparent and can't reset to setup pose.\n        } else {\n            mix = to.mixTime / to.mixDuration\n            if (mix > 1) mix = 1f\n            if (blend != MixBlend.first) blend = from.mixBlend // Track 0 ignores track mix blend.\n        }\n\n        val events = if (mix < from.eventThreshold) this.events else null\n        val attachments = mix < from.attachmentThreshold\n        val drawOrder = mix < from.drawOrderThreshold\n        val animationLast = from.animationLast\n        val animationTime = from.animationTime\n        val timelineCount = from.animation!!.timelines.size\n        val timelines = from.animation!!.timelines\n        val alphaHold = from.alpha * to.interruptAlpha\n        val alphaMix = alphaHold * (1 - mix)\n\n        if (blend == MixBlend.add) {\n            for (i in 0 until timelineCount)\n                timelines[i].apply(skeleton, animationLast, animationTime, events, alphaMix, blend, MixDirection.out)\n        } else {\n            val timelineMode = from.timelineMode\n            val timelineHoldMix = from.timelineHoldMix\n\n            val firstFrame = from.timelinesRotation.size != timelineCount shl 1\n            if (firstFrame) from.timelinesRotation.setSize(timelineCount shl 1)\n            val timelinesRotation = from.timelinesRotation.data\n\n            from.totalAlpha = 0f\n            for (i in 0 until timelineCount) {\n                val timeline = timelines[i] as Timeline\n                var direction = MixDirection.out\n                val timelineBlend: MixBlend\n                val alpha: Float\n                when (timelineMode[i]) {\n                    SUBSEQUENT -> {\n                        if (!drawOrder && timeline is DrawOrderTimeline) continue\n                        timelineBlend = blend\n                        alpha = alphaMix\n                    }\n                    FIRST -> {\n                        timelineBlend = MixBlend.setup\n                        alpha = alphaMix\n                    }\n                    HOLD -> {\n                        timelineBlend = MixBlend.setup\n                        alpha = alphaHold\n                    }\n                    else // HOLD_MIX\n                    -> {\n                        timelineBlend = MixBlend.setup\n                        val holdMix = timelineHoldMix[i]\n                        alpha = alphaHold * max(0f, 1 - holdMix.mixTime / holdMix.mixDuration)\n                    }\n                }\n                from.totalAlpha += alpha\n                if (timeline is RotateTimeline) {\n                    applyRotateTimeline(timeline, skeleton, animationTime, alpha, timelineBlend, timelinesRotation,\n                            i shl 1, firstFrame)\n                } else if (timeline is AttachmentTimeline)\n                    applyAttachmentTimeline(timeline, skeleton, animationTime, timelineBlend, attachments)\n                else {\n                    if (drawOrder && timeline is DrawOrderTimeline && timelineBlend == MixBlend.setup)\n                        direction = MixDirection.`in`\n                    timeline.apply(skeleton, animationLast, animationTime, events, alpha, timelineBlend, direction)\n                }\n            }\n        }\n\n        if (to.mixDuration > 0) queueEvents(from, animationTime)\n        this.events.clear()\n        from.nextAnimationLast = animationTime\n        from.nextTrackLast = from.trackTime\n\n        return mix\n    }\n\n    /** Applies the attachment timeline and sets [Slot.attachmentState].\n     * @param attachments False when: 1) the attachment timeline is mixing out, 2) mix < attachmentThreshold, and 3) the timeline\n     * is not the last timeline to set the slot's attachment. In that case the timeline is applied only so subsequent\n     * timelines see any deform.\n     */\n    private fun applyAttachmentTimeline(timeline: AttachmentTimeline, skeleton: Skeleton, time: Float, blend: MixBlend,\n                                        attachments: Boolean) {\n\n        val slot = skeleton.slots[timeline.slotIndex]\n        if (!slot.bone.isActive) return\n\n        val frames = timeline.frames\n        if (time < frames[0]) { // Time is before first frame.\n            if (blend == MixBlend.setup || blend == MixBlend.first)\n                setAttachment(skeleton, slot, slot.data.attachmentName, attachments)\n        } else {\n            val frameIndex: Int\n            if (time >= frames[frames.size - 1])\n            // Time is after last frame.\n                frameIndex = frames.size - 1\n            else\n                frameIndex = Animation.binarySearch(frames, time) - 1\n            setAttachment(skeleton, slot, timeline.attachmentNames[frameIndex], attachments)\n        }\n\n        // If an attachment wasn't set (ie before the first frame or attachments is false), set the setup attachment later.\n        if (slot.attachmentState <= unkeyedState) slot.attachmentState = unkeyedState + SETUP\n    }\n\n    private fun setAttachment(skeleton: Skeleton, slot: Slot, attachmentName: String?, attachments: Boolean) {\n        slot.setAttachment(if (attachmentName == null) null else skeleton.getAttachment(slot.data.index, attachmentName))\n        if (attachments) slot.attachmentState = unkeyedState + CURRENT\n    }\n\n    /** Applies the rotate timeline, mixing with the current pose while keeping the same rotation direction chosen as the shortest\n     * the first time the mixing was applied.  */\n    private fun applyRotateTimeline(timeline: RotateTimeline, skeleton: Skeleton, time: Float, alpha: Float, blend: MixBlend,\n                                    timelinesRotation: FloatArray, i: Int, firstFrame: Boolean) {\n\n        if (firstFrame) timelinesRotation[i] = 0f\n\n        if (alpha == 1f) {\n            timeline.apply(skeleton, 0f, time, null, 1f, blend, MixDirection.`in`)\n            return\n        }\n\n        val bone = skeleton.bones[timeline.boneIndex]\n        if (!bone.isActive) return\n        val frames = timeline.frames\n        var r1: Float\n        var r2: Float\n        if (time < frames[0]) { // Time is before first frame.\n            when (blend) {\n                Animation.MixBlend.setup -> {\n                    bone.rotation = bone.data.rotation\n                    return\n                }\n                Animation.MixBlend.first -> {\n                    r1 = bone.rotation\n                    r2 = bone.data.rotation\n                }\n                // Fall through.\n                else -> return\n            }\n        } else {\n            r1 = if (blend == MixBlend.setup) bone.data.rotation else bone.rotation\n            if (time >= frames[frames.size - RotateTimeline.ENTRIES])\n            // Time is after last frame.\n                r2 = bone.data.rotation + frames[frames.size + RotateTimeline.PREV_ROTATION]\n            else {\n                // Interpolate between the previous frame and the current frame.\n                val frame = Animation.binarySearch(frames, time, RotateTimeline.ENTRIES)\n                val prevRotation = frames[frame + RotateTimeline.PREV_ROTATION]\n                val frameTime = frames[frame]\n                val percent = timeline.getCurvePercent((frame shr 1) - 1,\n                        1 - (time - frameTime) / (frames[frame + RotateTimeline.PREV_TIME] - frameTime))\n\n                r2 = frames[frame + RotateTimeline.ROTATION] - prevRotation\n                r2 -= ((16384 - (16384.499999999996 - r2 / 360).toInt()) * 360).toFloat()\n                r2 = prevRotation + r2 * percent + bone.data.rotation\n                r2 -= ((16384 - (16384.499999999996 - r2 / 360).toInt()) * 360).toFloat()\n            }\n        }\n\n        // Mix between rotations using the direction of the shortest route on the first frame.\n        var total: Float\n        var diff = r2 - r1\n        diff -= ((16384 - (16384.499999999996 - diff / 360).toInt()) * 360).toFloat()\n        if (diff == 0f)\n            total = timelinesRotation[i]\n        else {\n            var lastTotal: Float\n            val lastDiff: Float\n            if (firstFrame) {\n                lastTotal = 0f\n                lastDiff = diff\n            } else {\n                lastTotal = timelinesRotation[i] // Angle and direction of mix, including loops.\n                lastDiff = timelinesRotation[i + 1] // Difference between bones.\n            }\n            val current = diff > 0\n            var dir = lastTotal >= 0\n            // Detect cross at 0 (not 180).\n            if ((lastDiff.sign) != (diff.sign) && kotlin.math.abs(lastDiff) <= 90) {\n                // A cross after a 360 rotation is a loop.\n                if (kotlin.math.abs(lastTotal) > 180) lastTotal += 360 * (lastTotal.sign)\n                dir = current\n            }\n            total = diff + lastTotal - lastTotal % 360 // Store loops as part of lastTotal.\n            if (dir != current) total += 360 * (lastTotal.sign)\n            timelinesRotation[i] = total\n        }\n        timelinesRotation[i + 1] = diff\n        r1 += total * alpha\n        bone.rotation = r1 - (16384 - (16384.499999999996 - r1 / 360).toInt()) * 360\n    }\n\n    private fun queueEvents(entry: TrackEntry, animationTime: Float) {\n        val animationStart = entry.animationStart\n        val animationEnd = entry.animationEnd\n        val duration = animationEnd - animationStart\n        val trackLastWrapped = entry.trackLast % duration\n\n        // Queue events before complete.\n        val events = this.events\n        var i = 0\n        val n = events.size\n        while (i < n) {\n            val event = events.get(i)\n            if (event.time < trackLastWrapped) break\n            if (event.time > animationEnd) {\n                i++\n                continue\n            } // Discard events outside animation start/end.\n            queue.event(entry, event)\n            i++\n        }\n\n        // Queue complete if completed a loop iteration or the animation.\n        val complete: Boolean\n        if (entry.loop)\n            complete = duration == 0f || trackLastWrapped > entry.trackTime % duration\n        else\n            complete = animationTime >= animationEnd && entry.animationLast < animationEnd\n        if (complete) queue.complete(entry)\n\n        // Queue events after complete.\n        while (i < n) {\n            val event = events.get(i)\n            if (event.time < animationStart) {\n                i++\n                continue\n            } // Discard events outside animation start/end.\n            queue.event(entry, events.get(i))\n            i++\n        }\n    }\n\n    /** Removes all animations from all tracks, leaving skeletons in their current pose.\n     *\n     *\n     * It may be desired to use [AnimationState.setEmptyAnimations] to mix the skeletons back to the setup pose,\n     * rather than leaving them in their current pose.  */\n    fun clearTracks() {\n        val oldDrainDisabled = queue.drainDisabled\n        queue.drainDisabled = true\n        var i = 0\n        val n = tracks.size\n        while (i < n) {\n            clearTrack(i)\n            i++\n        }\n        tracks.clear()\n        queue.drainDisabled = oldDrainDisabled\n        queue.drain()\n    }\n\n    /** Removes all animations from the track, leaving skeletons in their current pose.\n     *\n     *\n     * It may be desired to use [AnimationState.setEmptyAnimation] to mix the skeletons back to the setup pose,\n     * rather than leaving them in their current pose.  */\n    fun clearTrack(trackIndex: Int) {\n        require(trackIndex >= 0) { \"trackIndex must be >= 0.\" }\n        if (trackIndex >= tracks.size) return\n        val current = tracks[trackIndex] ?: return\n\n        queue.end(current)\n\n        disposeNext(current)\n\n        var entry: TrackEntry = current\n        while (true) {\n            val from = entry.mixingFrom ?: break\n            queue.end(from)\n            entry.mixingFrom = null\n            entry.mixingTo = null\n            entry = from\n        }\n\n        tracks.setAndGrow(current.trackIndex, null)\n\n        queue.drain()\n    }\n\n    private fun setCurrent(index: Int, current: TrackEntry, interrupt: Boolean) {\n        val from = expandToIndex(index)\n        tracks.setAndGrow(index, current)\n\n        if (from != null) {\n            if (interrupt) queue.interrupt(from)\n            current.mixingFrom = from\n            from.mixingTo = current\n            current.mixTime = 0f\n\n            // Store the interrupted mix percentage.\n            if (from.mixingFrom != null && from.mixDuration > 0)\n                current.interruptAlpha *= kotlin.math.min(1f, from.mixTime / from.mixDuration)\n\n            from.timelinesRotation.clear() // Reset rotation for mixing out, in case entry was mixed in.\n        }\n\n        queue.start(current)\n    }\n\n    /** Sets an animation by name.\n     *\n     *\n     * [.setAnimation].  */\n    fun setAnimation(trackIndex: Int, animationName: String, loop: Boolean): TrackEntry {\n        val animation = data!!.skeletonData.findAnimation(animationName)\n                ?: throw IllegalArgumentException(\"Animation not found: $animationName\")\n        return setAnimation(trackIndex, animation, loop)\n    }\n\n    /** Sets the current animation for a track, discarding any queued animations. If the formerly current track entry was never\n     * applied to a skeleton, it is replaced (not mixed from).\n     * @param loop If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its\n     * duration. In either case [TrackEntry.getTrackEnd] determines when the track is cleared.\n     * @return A track entry to allow further customization of animation playback. References to the track entry must not be kept\n     * after the [AnimationStateListener.dispose] event occurs.\n     */\n    fun setAnimation(trackIndex: Int, animation: Animation, loop: Boolean): TrackEntry {\n        require(trackIndex >= 0) { \"trackIndex must be >= 0.\" }\n        var interrupt = true\n        var current = expandToIndex(trackIndex)\n        if (current != null) {\n            if (current.nextTrackLast == -1f) {\n                // Don't mix from an entry that was never applied.\n                tracks.setAndGrow(trackIndex, current.mixingFrom)\n                queue.interrupt(current)\n                queue.end(current)\n                disposeNext(current)\n                current = current.mixingFrom\n                interrupt = false // mixingFrom is current again, but don't interrupt it twice.\n            } else\n                disposeNext(current)\n        }\n        val entry = trackEntry(trackIndex, animation, loop, current)\n        setCurrent(trackIndex, entry, interrupt)\n        queue.drain()\n        return entry\n    }\n\n    /** Queues an animation by name.\n     *\n     *\n     * See [.addAnimation].  */\n    fun addAnimation(trackIndex: Int, animationName: String, loop: Boolean, delay: Float): TrackEntry {\n        val animation = data!!.skeletonData.findAnimation(animationName)\n                ?: throw IllegalArgumentException(\"Animation not found: $animationName\")\n        return addAnimation(trackIndex, animation, loop, delay)\n    }\n\n    /** Adds an animation to be played after the current or last queued animation for a track. If the track is empty, it is\n     * equivalent to calling [.setAnimation].\n     * @param delay If > 0, sets [TrackEntry.getDelay]. If <= 0, the delay set is the duration of the previous track entry\n     * minus any mix duration (from the [AnimationStateData]) plus the specified `delay` (ie the mix\n     * ends at (`delay` = 0) or before (`delay` < 0) the previous track entry duration). If the\n     * previous entry is looping, its next loop completion is used instead of its duration.\n     * @return A track entry to allow further customization of animation playback. References to the track entry must not be kept\n     * after the [AnimationStateListener.dispose] event occurs.\n     */\n    fun addAnimation(trackIndex: Int, animation: Animation, loop: Boolean, delay: Float): TrackEntry {\n        var delay = delay\n        require(trackIndex >= 0) { \"trackIndex must be >= 0.\" }\n\n        var last = expandToIndex(trackIndex)\n        if (last != null) {\n            while (last!!.next != null)\n                last = last.next\n        }\n\n        val entry = trackEntry(trackIndex, animation, loop, last)\n\n        if (last == null) {\n            setCurrent(trackIndex, entry, true)\n            queue.drain()\n        } else {\n            last.next = entry\n            if (delay <= 0) {\n                val duration = last.animationEnd - last.animationStart\n                if (duration != 0f) {\n                    if (last.loop)\n                        delay += duration * (1 + (last.trackTime / duration).toInt()) // Completion of next loop.\n                    else\n                        delay += max(duration, last.trackTime) // After duration, else next update.\n                    delay -= data!!.getMix(last.animation, animation)\n                } else\n                    delay = last.trackTime // Next update.\n            }\n        }\n\n        entry.delay = delay\n        return entry\n    }\n\n    /** Sets an empty animation for a track, discarding any queued animations, and sets the track entry's\n     * [TrackEntry.getMixDuration]. An empty animation has no timelines and serves as a placeholder for mixing in or out.\n     *\n     *\n     * Mixing out is done by setting an empty animation with a mix duration using either [.setEmptyAnimation],\n     * [.setEmptyAnimations], or [.addEmptyAnimation]. Mixing to an empty animation causes\n     * the previous animation to be applied less and less over the mix duration. Properties keyed in the previous animation\n     * transition to the value from lower tracks or to the setup pose value if no lower tracks key the property. A mix duration of\n     * 0 still mixes out over one frame.\n     *\n     *\n     * Mixing in is done by first setting an empty animation, then adding an animation using\n     * [.addAnimation] and on the returned track entry, set the\n     * [TrackEntry.setMixDuration]. Mixing from an empty animation causes the new animation to be applied more and\n     * more over the mix duration. Properties keyed in the new animation transition from the value from lower tracks or from the\n     * setup pose value if no lower tracks key the property to the value keyed in the new animation.  */\n    fun setEmptyAnimation(trackIndex: Int, mixDuration: Float): TrackEntry {\n        val entry = setAnimation(trackIndex, emptyAnimation, false)\n        entry.mixDuration = mixDuration\n        entry.trackEnd = mixDuration\n        return entry\n    }\n\n    /** Adds an empty animation to be played after the current or last queued animation for a track, and sets the track entry's\n     * [TrackEntry.getMixDuration]. If the track is empty, it is equivalent to calling\n     * [.setEmptyAnimation].\n     *\n     *\n     * See [.setEmptyAnimation].\n     * @param delay If > 0, sets [TrackEntry.getDelay]. If <= 0, the delay set is the duration of the previous track entry\n     * minus any mix duration plus the specified `delay` (ie the mix ends at (`delay` = 0) or\n     * before (`delay` < 0) the previous track entry duration). If the previous entry is looping, its next\n     * loop completion is used instead of its duration.\n     * @return A track entry to allow further customization of animation playback. References to the track entry must not be kept\n     * after the [AnimationStateListener.dispose] event occurs.\n     */\n    fun addEmptyAnimation(trackIndex: Int, mixDuration: Float, delay: Float): TrackEntry {\n        var delay = delay\n        if (delay <= 0) delay -= mixDuration\n        val entry = addAnimation(trackIndex, emptyAnimation, false, delay)\n        entry.mixDuration = mixDuration\n        entry.trackEnd = mixDuration\n        return entry\n    }\n\n    /** Sets an empty animation for every track, discarding any queued animations, and mixes to it over the specified mix\n     * duration.  */\n    fun setEmptyAnimations(mixDuration: Float) {\n        val oldDrainDisabled = queue.drainDisabled\n        queue.drainDisabled = true\n        var i = 0\n        val n = tracks.size\n        while (i < n) {\n            val current = tracks[i]\n            if (current != null) setEmptyAnimation(current.trackIndex, mixDuration)\n            i++\n        }\n        queue.drainDisabled = oldDrainDisabled\n        queue.drain()\n    }\n\n    private fun expandToIndex(index: Int): TrackEntry? {\n        if (index < tracks.size) return tracks[index]\n        tracks.ensureCapacity(index - tracks.size + 1)\n        tracks.setSize(index + 1)\n        return null\n    }\n\n    /** @param last May be null.\n     */\n    private fun trackEntry(trackIndex: Int, animation: Animation, loop: Boolean, last: TrackEntry?): TrackEntry {\n        val entry = trackEntryPool.alloc()\n        entry.trackIndex = trackIndex\n        entry.animation = animation\n        entry.loop = loop\n        entry.holdPrevious = false\n\n        entry.eventThreshold = 0f\n        entry.attachmentThreshold = 0f\n        entry.drawOrderThreshold = 0f\n\n        entry.animationStart = 0f\n        entry.animationEnd = animation.duration\n        entry.animationLast = -1f\n        entry.nextAnimationLast = -1f\n\n        entry.delay = 0f\n        entry.trackTime = 0f\n        entry.trackLast = -1f\n        entry.nextTrackLast = -1f\n        entry.trackEnd = Float.MAX_VALUE\n        entry.timeScale = 1f\n\n        entry.alpha = 1f\n        entry.interruptAlpha = 1f\n        entry.mixTime = 0f\n        entry.mixDuration = if (last == null) 0f else data!!.getMix(last.animation, animation)\n        return entry\n    }\n\n    private fun disposeNext(entry: TrackEntry) {\n        var next = entry.next\n        while (next != null) {\n            queue.dispose(next)\n            next = next.next\n        }\n        entry.next = null\n    }\n\n    internal fun animationsChanged() {\n        animationsChanged = false\n\n        // Process in the order that animations are applied.\n        propertyIDs.clear(2048)\n        var i = 0\n        val n = tracks.size\n        while (i < n) {\n            var entry: TrackEntry? = tracks[i]\n            if (entry == null) {\n                i++\n                continue\n            }\n            while (entry!!.mixingFrom != null)\n            // Move to last entry, then iterate in reverse.\n                entry = entry.mixingFrom\n            do {\n                if (entry!!.mixingTo == null || entry.mixBlend != MixBlend.add) computeHold(entry)\n                entry = entry.mixingTo\n            } while (entry != null)\n            i++\n        }\n    }\n\n    private fun computeHold(entry: TrackEntry) {\n        val to = entry.mixingTo\n        val timelines = entry.animation!!.timelines\n        val timelinesCount = entry.animation!!.timelines.size\n        val timelineMode = entry.timelineMode.setSize(timelinesCount)\n        entry.timelineHoldMix.clear()\n        val timelineHoldMix = entry.timelineHoldMix.setSize(timelinesCount)\n        val propertyIDs = this.propertyIDs\n\n        if (to != null && to.holdPrevious) {\n            for (i in 0 until timelinesCount) {\n                propertyIDs.add((timelines[i] as Timeline).propertyId)\n                timelineMode[i] = HOLD\n            }\n            return\n        }\n\n        outer@ for (i in 0 until timelinesCount) {\n            val timeline = timelines[i] as Timeline\n            val id = timeline.propertyId\n            if (!propertyIDs.add(id))\n                timelineMode[i] = SUBSEQUENT\n            else if (to == null || timeline is AttachmentTimeline || timeline is DrawOrderTimeline\n                    || timeline is EventTimeline || !to.animation!!.hasTimeline(id)) {\n                timelineMode[i] = FIRST\n            } else {\n                var next = to.mixingTo\n                while (next != null) {\n                    if (next.animation!!.hasTimeline(id)) {\n                        next = next.mixingTo\n                        continue\n                    }\n                    if (next.mixDuration > 0) {\n                        timelineMode[i] = HOLD_MIX\n                        timelineHoldMix.setAndGrow(i, next)\n                        continue@outer\n                    }\n                    break\n                }\n                timelineMode[i] = HOLD\n            }\n        }\n    }\n\n    /** Returns the track entry for the animation currently playing on the track, or null if no animation is currently playing.  */\n    fun getCurrent(trackIndex: Int): TrackEntry? {\n        require(trackIndex >= 0) { \"trackIndex must be >= 0.\" }\n        return if (trackIndex >= tracks.size) null else tracks[trackIndex]\n    }\n\n    /** Adds a listener to receive events for all track entries.  */\n    fun addListener(listener: AnimationStateListener) {\n        listeners.add(listener)\n    }\n\n    /** Removes the listener added with [.addListener].  */\n    fun removeListener(listener: AnimationStateListener) {\n        listeners.removeValueIdentity(listener)\n    }\n\n    /** Removes all listeners added with [.addListener].  */\n    fun clearListeners() {\n        listeners.clear()\n    }\n\n    /** Discards all listener notifications that have not yet been delivered. This can be useful to call from an\n     * [AnimationStateListener] when it is known that further notifications that may have been already queued for delivery\n     * are not wanted because new animations are being set.  */\n    fun clearListenerNotifications() {\n        queue.clear()\n    }\n\n    /** The AnimationStateData to look up mix durations.  */\n    fun getData(): AnimationStateData? {\n        return data\n    }\n\n    fun setData(data: AnimationStateData) {\n        this.data = data\n    }\n\n    override fun toString(): String {\n        val buffer = StringBuilder(64)\n        var i = 0\n        val n = tracks.size\n        while (i < n) {\n            val entry = tracks[i]\n            if (entry == null) {\n                i++\n                continue\n            }\n            if (buffer.length > 0) buffer.append(\", \")\n            buffer.append(entry.toString())\n            i++\n        }\n        return if (buffer.length == 0) \"<none>\" else buffer.toString()\n    }\n\n    /** Stores settings and other state for the playback of an animation on an [AnimationState] track.\n     *\n     *\n     * References to a track entry must not be kept after the [AnimationStateListener.dispose] event occurs.  */\n    class TrackEntry : Pool.Poolable {\n        internal var animation: Animation? = null\n\n        /** The animation queued to start after this animation, or null. `next` makes up a linked list.  */\n        var next: TrackEntry? = null\n            internal set\n\n        /** The track entry for the previous animation when mixing from the previous animation to this animation, or null if no\n         * mixing is currently occuring. When mixing from multiple animations, `mixingFrom` makes up a linked list.  */\n        var mixingFrom: TrackEntry? = null\n            internal set\n\n        /** The track entry for the next animation when mixing from this animation to the next animation, or null if no mixing is\n         * currently occuring. When mixing to multiple animations, `mixingTo` makes up a linked list.  */\n        var mixingTo: TrackEntry? = null\n            internal set\n        /** The listener for events generated by this track entry, or null.\n         *\n         *\n         * A track entry returned from [AnimationState.setAnimation] is already the current animation\n         * for the track, so the track entry listener [AnimationStateListener.start] will not be called.  */\n        /** @param listener May be null.\n         */\n        var listener: AnimationStateListener? = null\n\n        /** The index of the track where this track entry is either current or queued.\n         *\n         *\n         * See [AnimationState.getCurrent].  */\n        var trackIndex: Int = 0\n            internal set\n\n        /** If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its\n         * duration.  */\n        var loop: Boolean = false\n\n        /** If true, when mixing from the previous animation to this animation, the previous animation is applied as normal instead\n         * of being mixed out.\n         *\n         *\n         * When mixing between animations that key the same property, if a lower track also keys that property then the value will\n         * briefly dip toward the lower track value during the mix. This happens because the first animation mixes from 100% to 0%\n         * while the second animation mixes from 0% to 100%. Setting `holdPrevious` to true applies the first animation\n         * at 100% during the mix so the lower track value is overwritten. Such dipping does not occur on the lowest track which\n         * keys the property, only when a higher track also keys the property.\n         *\n         *\n         * Snapping will occur if `holdPrevious` is true and this animation does not key all the same properties as the\n         * previous animation.  */\n        var holdPrevious: Boolean = false\n\n        /** When the mix percentage ([.getMixTime] / [.getMixDuration]) is less than the\n         * `eventThreshold`, event timelines are applied while this animation is being mixed out. Defaults to 0, so event\n         * timelines are not applied while this animation is being mixed out.  */\n        var eventThreshold: Float = 0.toFloat()\n\n        /** When the mix percentage ([.getMixTime] / [.getMixDuration]) is less than the\n         * `attachmentThreshold`, attachment timelines are applied while this animation is being mixed out. Defaults to\n         * 0, so attachment timelines are not applied while this animation is being mixed out.  */\n        var attachmentThreshold: Float = 0.toFloat()\n\n        /** When the mix percentage ([.getMixTime] / [.getMixDuration]) is less than the\n         * `drawOrderThreshold`, draw order timelines are applied while this animation is being mixed out. Defaults to 0,\n         * so draw order timelines are not applied while this animation is being mixed out.  */\n        var drawOrderThreshold: Float = 0.toFloat()\n\n        /** Seconds when this animation starts, both initially and after looping. Defaults to 0.\n         *\n         *\n         * When changing the `animationStart` time, it often makes sense to set [.getAnimationLast] to the same\n         * value to prevent timeline keys before the start time from triggering.  */\n        var animationStart: Float = 0.toFloat()\n\n        /** Seconds for the last frame of this animation. Non-looping animations won't play past this time. Looping animations will\n         * loop back to [.getAnimationStart] at this time. Defaults to the animation [Animation.duration].  */\n        var animationEnd: Float = 0.toFloat()\n        internal var animationLast: Float = 0.toFloat()\n        internal var nextAnimationLast: Float = 0.toFloat()\n\n        /** Seconds to postpone playing the animation. When this track entry is the current track entry, `delay`\n         * postpones incrementing the [.getTrackTime]. When this track entry is queued, `delay` is the time from\n         * the start of the previous animation to when this track entry will become the current track entry (ie when the previous\n         * track entry [TrackEntry.getTrackTime] >= this track entry's `delay`).\n         *\n         *\n         * [.getTimeScale] affects the delay.  */\n        var delay: Float = 0.toFloat()\n\n        /** Current time in seconds this track entry has been the current track entry. The track time determines\n         * [.getAnimationTime]. The track time can be set to start the animation at a time other than 0, without affecting\n         * looping.  */\n        var trackTime: Float = 0.toFloat()\n        internal var trackLast: Float = 0.toFloat()\n        internal var nextTrackLast: Float = 0.toFloat()\n\n        /** The track time in seconds when this animation will be removed from the track. Defaults to the highest possible float\n         * value, meaning the animation will be applied until a new animation is set or the track is cleared. If the track end time\n         * is reached, no other animations are queued for playback, and mixing from any previous animations is complete, then the\n         * properties keyed by the animation are set to the setup pose and the track is cleared.\n         *\n         *\n         * It may be desired to use [AnimationState.addEmptyAnimation] rather than have the animation\n         * abruptly cease being applied.  */\n        var trackEnd: Float = 0.toFloat()\n\n        /** Multiplier for the delta time when this track entry is updated, causing time for this animation to pass slower or\n         * faster. Defaults to 1.\n         *\n         *\n         * [.getMixTime] is not affected by track entry time scale, so [.getMixDuration] may need to be adjusted to\n         * match the animation speed.\n         *\n         *\n         * When using [AnimationState.addAnimation] with a `delay` <= 0, note the\n         * [.getDelay] is set using the mix duration from the [AnimationStateData], assuming time scale to be 1. If\n         * the time scale is not 1, the delay may need to be adjusted.\n         *\n         *\n         * See AnimationState [AnimationState.getTimeScale] for affecting all animations.  */\n        var timeScale: Float = 0.toFloat()\n\n        /** Values < 1 mix this animation with the skeleton's current pose (usually the pose resulting from lower tracks). Defaults\n         * to 1, which overwrites the skeleton's current pose with this animation.\n         *\n         *\n         * Typically track 0 is used to completely pose the skeleton, then alpha is used on higher tracks. It doesn't make sense to\n         * use alpha on track 0 if the skeleton pose is from the last frame render.  */\n        var alpha: Float = 0.toFloat()\n\n        /** Seconds from 0 to the [.getMixDuration] when mixing from the previous animation to this animation. May be\n         * slightly more than `mixDuration` when the mix is complete.  */\n        var mixTime: Float = 0.toFloat()\n\n        /** Seconds for mixing from the previous animation to this animation. Defaults to the value provided by AnimationStateData\n         * [AnimationStateData.getMix] based on the animation before this animation (if any).\n         *\n         *\n         * A mix duration of 0 still mixes out over one frame to provide the track entry being mixed out a chance to revert the\n         * properties it was animating.\n         *\n         *\n         * The `mixDuration` can be set manually rather than use the value from\n         * [AnimationStateData.getMix]. In that case, the `mixDuration` can be set for a new\n         * track entry only before [AnimationState.update] is first called.\n         *\n         *\n         * When using [AnimationState.addAnimation] with a `delay` <= 0, note the\n         * [.getDelay] is set using the mix duration from the [AnimationStateData], not a mix duration set\n         * afterward.  */\n        var mixDuration: Float = 0.toFloat()\n        internal var interruptAlpha: Float = 0.toFloat()\n        internal var totalAlpha: Float = 0.toFloat()\n        internal var mixBlend = MixBlend.replace\n\n        internal val timelineMode = IntArrayList()\n        internal val timelineHoldMix: FastArrayList<TrackEntry> = FastArrayList()\n        internal val timelinesRotation = FloatArrayList()\n\n        /** Uses [.getTrackTime] to compute the `animationTime`, which is between [.getAnimationStart]\n         * and [.getAnimationEnd]. When the `trackTime` is 0, the `animationTime` is equal to the\n         * `animationStart` time.  */\n        val animationTime: Float\n            get() {\n                if (loop) {\n                    val duration = animationEnd - animationStart\n                    return if (duration == 0f) animationStart else trackTime % duration + animationStart\n                }\n                return kotlin.math.min(trackTime + animationStart, animationEnd)\n            }\n\n        /** Returns true if at least one loop has been completed.\n         *\n         *\n         * See [AnimationStateListener.complete].  */\n        val isComplete: Boolean\n            get() = trackTime >= animationEnd - animationStart\n\n        override fun reset() {\n            next = null\n            mixingFrom = null\n            mixingTo = null\n            animation = null\n            listener = null\n            timelineMode.clear()\n            timelineHoldMix.clear()\n            timelinesRotation.clear()\n        }\n\n        /** The animation to apply for this track entry.  */\n        fun getAnimation(): Animation? {\n            return animation\n        }\n\n        fun setAnimation(animation: Animation) {\n            this.animation = animation\n        }\n\n        /** The time in seconds this animation was last applied. Some timelines use this for one-time triggers. Eg, when this\n         * animation is applied, event timelines will fire all events between the `animationLast` time (exclusive) and\n         * `animationTime` (inclusive). Defaults to -1 to ensure triggers on frame 0 happen the first time this animation\n         * is applied.  */\n        fun getAnimationLast(): Float {\n            return animationLast\n        }\n\n        fun setAnimationLast(animationLast: Float) {\n            this.animationLast = animationLast\n            nextAnimationLast = animationLast\n        }\n\n        /** Controls how properties keyed in the animation are mixed with lower tracks. Defaults to [MixBlend.replace], which\n         * replaces the values from the lower tracks with the animation values. [MixBlend.add] adds the animation values to\n         * the values from the lower tracks.\n         *\n         *\n         * The `mixBlend` can be set for a new track entry only before [AnimationState.apply] is first\n         * called.  */\n        fun getMixBlend(): MixBlend {\n            return mixBlend\n        }\n\n        fun setMixBlend(mixBlend: MixBlend) {\n            this.mixBlend = mixBlend\n        }\n\n        /** Resets the rotation directions for mixing this entry's rotate timelines. This can be useful to avoid bones rotating the\n         * long way around when using [.alpha] and starting animations on other tracks.\n         *\n         *\n         * Mixing with [MixBlend.replace] involves finding a rotation between two others, which has two possible solutions:\n         * the short way or the long way around. The two rotations likely change over time, so which direction is the short or long\n         * way also changes. If the short way was always chosen, bones would flip to the other side when that direction became the\n         * long way. TrackEntry chooses the short way the first time it is applied and remembers that direction.  */\n        fun resetRotationDirections() {\n            timelinesRotation.clear()\n        }\n\n        override fun toString(): String {\n            return if (animation == null) \"<none>\" else animation!!.name\n        }\n    }\n\n    internal inner class EventQueue {\n        private val objects = FastArrayList<Any>()\n        var drainDisabled: Boolean = false\n\n        fun start(entry: TrackEntry) {\n            objects.add(EventType.start)\n            objects.add(entry)\n            animationsChanged = true\n        }\n\n        fun interrupt(entry: TrackEntry) {\n            objects.add(EventType.interrupt)\n            objects.add(entry)\n        }\n\n        fun end(entry: TrackEntry) {\n            objects.add(EventType.end)\n            objects.add(entry)\n            animationsChanged = true\n        }\n\n        fun dispose(entry: TrackEntry) {\n            objects.add(EventType.dispose)\n            objects.add(entry)\n        }\n\n        fun complete(entry: TrackEntry) {\n            objects.add(EventType.complete)\n            objects.add(entry)\n        }\n\n        fun event(entry: TrackEntry, event: Event) {\n            objects.add(EventType.event)\n            objects.add(entry)\n            objects.add(event)\n        }\n\n        fun drain() {\n            if (drainDisabled) return  // Not reentrant.\n            drainDisabled = true\n\n            val objects = this.objects\n            val listeners = this@AnimationState.listeners\n            var i = 0\n            while (i < objects.size) {\n                val type = objects.get(i) as EventType\n                val entry = objects.get(i + 1) as TrackEntry\n                when (type) {\n                    AnimationState.EventType.start -> {\n                        if (entry.listener != null) entry.listener!!.start(entry)\n                        for (ii in 0 until listeners.size)\n                            listeners[ii].start(entry)\n                    }\n                    AnimationState.EventType.interrupt -> {\n                        if (entry.listener != null) entry.listener!!.interrupt(entry)\n                        for (ii in 0 until listeners.size)\n                            listeners[ii].interrupt(entry)\n                    }\n                    AnimationState.EventType.end -> {\n                        if (entry.listener != null) entry.listener!!.end(entry)\n                        for (ii in 0 until listeners.size)\n                            listeners[ii].end(entry)\n                        if (entry.listener != null) entry.listener!!.dispose(entry)\n                        for (ii in 0 until listeners.size)\n                            listeners[ii].dispose(entry)\n                        trackEntryPool.free(entry)\n                    }\n                    // Fall through.\n                    AnimationState.EventType.dispose -> {\n                        if (entry.listener != null) entry.listener!!.dispose(entry)\n                        for (ii in 0 until listeners.size)\n                            listeners[ii].dispose(entry)\n                        trackEntryPool.free(entry)\n                    }\n                    AnimationState.EventType.complete -> {\n                        if (entry.listener != null) entry.listener!!.complete(entry)\n                        for (ii in 0 until listeners.size)\n                            listeners[ii].complete(entry)\n                    }\n                    AnimationState.EventType.event -> {\n                        val event = objects.get(i++ + 2) as Event\n                        if (entry.listener != null) entry.listener!!.event(entry, event)\n                        for (ii in 0 until listeners.size)\n                            listeners[ii].event(entry, event)\n                    }\n                }\n                i += 2\n            }\n            clear()\n\n            drainDisabled = false\n        }\n\n        fun clear() {\n            objects.clear()\n        }\n    }\n\n    private enum class EventType {\n        start, interrupt, end, dispose, complete, event\n    }\n\n    /** The interface to implement for receiving TrackEntry events. It is always safe to call AnimationState methods when receiving\n     * events.\n     *\n     *\n     * See TrackEntry [TrackEntry.setListener] and AnimationState\n     * [AnimationState.addListener].  */\n    interface AnimationStateListener {\n        /** Invoked when this entry has been set as the current entry.  */\n        fun start(entry: TrackEntry)\n\n        /** Invoked when another entry has replaced this entry as the current entry. This entry may continue being applied for\n         * mixing.  */\n        fun interrupt(entry: TrackEntry)\n\n        /** Invoked when this entry is no longer the current entry and will never be applied again.  */\n        fun end(entry: TrackEntry)\n\n        /** Invoked when this entry will be disposed. This may occur without the entry ever being set as the current entry.\n         * References to the entry should not be kept after `dispose` is called, as it may be destroyed or reused.  */\n        fun dispose(entry: TrackEntry)\n\n        /** Invoked every time this entry's animation completes a loop. Because this event is trigged in\n         * [AnimationState.apply], any animations set in response to the event won't be applied until the next time\n         * the AnimationState is applied.  */\n        fun complete(entry: TrackEntry)\n\n        /** Invoked when this entry's animation triggers an event. Because this event is trigged in\n         * [AnimationState.apply], any animations set in response to the event won't be applied until the next time\n         * the AnimationState is applied.  */\n        fun event(entry: TrackEntry, event: Event)\n    }\n\n    abstract class AnimationStateAdapter : AnimationStateListener {\n        override fun start(entry: TrackEntry) {}\n\n        override fun interrupt(entry: TrackEntry) {}\n\n        override fun end(entry: TrackEntry) {}\n\n        override fun dispose(entry: TrackEntry) {}\n\n        override fun complete(entry: TrackEntry) {}\n\n        override fun event(entry: TrackEntry, event: Event) {}\n    }\n\n    companion object {\n        private val emptyAnimation = Animation(\"<empty>\", FastArrayList(0), 0f)\n\n        /** 1) A previously applied timeline has set this property.<br></br>\n         * Result: Mix from the current pose to the timeline pose.  */\n        private val SUBSEQUENT = 0\n\n        /** 1) This is the first timeline to set this property.<br></br>\n         * 2) The next track entry applied after this one does not have a timeline to set this property.<br></br>\n         * Result: Mix from the setup pose to the timeline pose.  */\n        private val FIRST = 1\n\n        /** 1) This is the first timeline to set this property.<br></br>\n         * 2) The next track entry to be applied does have a timeline to set this property.<br></br>\n         * 3) The next track entry after that one does not have a timeline to set this property.<br></br>\n         * Result: Mix from the setup pose to the timeline pose, but do not mix out. This avoids \"dipping\" when crossfading animations\n         * that key the same property. A subsequent timeline will set this property using a mix.  */\n        private val HOLD = 2\n\n        /** 1) This is the first timeline to set this property.<br></br>\n         * 2) The next track entry to be applied does have a timeline to set this property.<br></br>\n         * 3) The next track entry after that one does have a timeline to set this property.<br></br>\n         * 4) timelineHoldMix stores the first subsequent track entry that does not have a timeline to set this property.<br></br>\n         * Result: The same as HOLD except the mix percentage from the timelineHoldMix track entry is used. This handles when more than\n         * 2 track entries in a row have a timeline that sets the same property.<br></br>\n         * Eg, A -> B -> C -> D where A, B, and C have a timeline setting same property, but D does not. When A is applied, to avoid\n         * \"dipping\" A is not mixed out, however D (the first entry that doesn't set the property) mixing in is used to mix out A\n         * (which affects B and C). Without using D to mix out, A would be applied fully until mixing completes, then snap into\n         * place.  */\n        private val HOLD_MIX = 3\n\n        private val SETUP = 1\n        private val CURRENT = 2\n    }\n}\n","package com.esotericsoftware.spine.utils\n\nimport com.soywiz.kds.*\nimport kotlin.math.*\n\ninternal fun FloatArrayList.setSize(size: Int): FloatArray { this.size = size; return this.data }\ninternal fun IntArrayList.setSize(size: Int): IntArray { this.size = size; return this.data }\ninternal fun ShortArrayList.setSize(size: Int): ShortArrayList { this.size = size; return this}\n\ninternal fun FloatArrayList.toArray() = this.toFloatArray()\n\ninternal fun BooleanArrayList.setSize(size: Int) {\n    this.size = size\n}\n\ninternal fun IntArrayList.toArray() = this.toIntArray()\ninternal fun ShortArrayList.toArray(): ShortArray = ShortArray(size) { this[it] }\n\ninternal fun <T> FastArrayList<T>.setAndGrow(index: Int, value: T) {\n    if (index >= size) {\n        val items = this as MutableList<Any?>\n        while (items.size <= index) items.add(null)\n    }\n    this[index] = value\n}\n\ninternal fun <T> FastArrayList<T>.indexOfIdentity(value: T?): Int {\n    fastForEachWithIndex { index, current -> if (current === value) return index }\n    return -1\n}\ninternal fun <T> FastArrayList<T>.removeValueIdentity(value: T?): Boolean {\n    val index = indexOfIdentity(value)\n    val found = index >= 0\n    if (found) removeAt(index)\n    return found\n}\ninternal fun <T> FastArrayList<T>.containsIdentity(value: T?): Boolean = indexOfIdentity(value) >= 0\n\ninternal fun <T> FastArrayList<T>.shrink() { if (size != size) resize(size) }\ninternal fun <T> FastArrayList<T>.setSize(newSize: Int): FastArrayList<T> {\n    truncate(max(8, newSize))\n    return this\n}\ninternal fun <T> FastArrayList<T>.resize(newSize: Int) { truncate(newSize) }\n\ninternal fun <T> FastArrayList<T>.truncate(newSize: Int) {\n    require(newSize >= 0) { \"newSize must be >= 0: $newSize\" }\n    while (size > newSize) removeAt(size - 1)\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine\n\nimport com.esotericsoftware.spine.AnimationState.*\n\n/** Stores mix (crossfade) durations to be applied when [AnimationState] animations are changed.  */\nclass AnimationStateData(\n        /** The SkeletonData to look up animations when they are specified by name.  */\n        val skeletonData: SkeletonData\n) {\n    data class FloatHolder(var value: Float)\n    internal val animationToMixTime: HashMap<Key, FloatHolder> = HashMap(51, 0.8f)\n    internal val tempKey = Key()\n\n    /** The mix duration to use when no mix duration has been defined between two animations.  */\n    var defaultMix: Float = 0.toFloat()\n\n    /** Sets a mix duration by animation name.\n     *\n     *\n     * See [.setMix].  */\n    fun setMix(fromName: String, toName: String, duration: Float) {\n        val from = skeletonData.findAnimation(fromName)\n                ?: throw IllegalArgumentException(\"Animation not found: $fromName\")\n        val to = skeletonData.findAnimation(toName) ?: throw IllegalArgumentException(\"Animation not found: $toName\")\n        setMix(from, to, duration)\n    }\n\n    /** Sets the mix duration when changing from the specified animation to the other.\n     *\n     *\n     * See [TrackEntry.mixDuration].  */\n    fun setMix(from: Animation, to: Animation, duration: Float) {\n        val key = Key()\n        key.a1 = from\n        key.a2 = to\n        val holder = animationToMixTime.getOrPut(key) { FloatHolder(0f) }\n        holder.value = duration\n    }\n\n    /** Returns the mix duration to use when changing from the specified animation to the other, or the [.getDefaultMix] if\n     * no mix duration has been set.  */\n    fun getMix(from: Animation?, to: Animation?): Float {\n        tempKey.a1 = from\n        tempKey.a2 = to\n        val holder = animationToMixTime[tempKey]\n        @Suppress(\"IfThenToElvis\")\n        return if (holder != null) holder.value else defaultMix\n    }\n\n    internal class Key {\n        var a1: Animation? = null\n        var a2: Animation? = null\n\n        override fun hashCode(): Int {\n            return 31 * (31 + a1!!.hashCode()) + a2!!.hashCode()\n        }\n\n        override fun equals(obj: Any?): Boolean {\n            if (this === obj) return true\n            if (obj == null) return false\n            val other = obj as Key?\n            if (a1 == null) {\n                if (other!!.a1 != null) return false\n            } else if (a1 != other!!.a1) return false\n            if (a2 == null) {\n                if (other.a2 != null) return false\n            } else if (a2 != other.a2) return false\n            return true\n        }\n\n        override fun toString(): String {\n            return a1!!.name + \"->\" + a2!!.name\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine\n\n/** Determines how images are blended with existing pixels when drawn.  */\nenum class BlendMode {\n    normal, additive, multiply, screen;\n\n    companion object {\n        val values = values()\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine\n\nimport com.esotericsoftware.spine.BoneData.*\nimport com.esotericsoftware.spine.utils.*\nimport com.esotericsoftware.spine.utils.SpineUtils.PI\nimport com.esotericsoftware.spine.utils.SpineUtils.atan2\nimport com.esotericsoftware.spine.utils.SpineUtils.cos\nimport com.esotericsoftware.spine.utils.SpineUtils.cosDeg\nimport com.esotericsoftware.spine.utils.SpineUtils.radDeg\nimport com.esotericsoftware.spine.utils.SpineUtils.sin\nimport com.esotericsoftware.spine.utils.SpineUtils.sinDeg\nimport com.soywiz.kds.*\nimport com.soywiz.korma.geom.*\n\n/** Stores a bone's current pose.\n *\n *\n * A bone has a local transform which is used to compute its world transform. A bone also has an applied transform, which is a\n * local transform that can be applied to compute the world transform. The local transform and applied transform may differ if a\n * constraint or application code modifies the world transform after it was computed from the local transform.  */\nclass Bone : Updatable {\n    /** The bone's setup pose data.  */\n    val data: BoneData\n\n    /** The skeleton this bone belongs to.  */\n    val skeleton: Skeleton\n\n    /** The parent bone, or null if this is the root bone.  */\n    val parent: Bone?\n\n    /** The immediate children of this bone.  */\n    val children: FastArrayList<Bone> = FastArrayList()\n    // -- Local transform\n\n    /** The local x translation.  */\n    var x: Float = 0.toFloat()\n\n    /** The local y translation.  */\n    var y: Float = 0.toFloat()\n\n    /** The local rotation in degrees, counter clockwise.  */\n    var rotation: Float = 0.toFloat()\n\n    /** The local scaleX.  */\n    var scaleX: Float = 0.toFloat()\n\n    /** The local scaleY.  */\n    var scaleY: Float = 0.toFloat()\n\n    /** The local shearX.  */\n    var shearX: Float = 0.toFloat()\n\n    /** The local shearY.  */\n    var shearY: Float = 0.toFloat()\n    // -- Applied transform\n\n    /** The applied local x translation.  */\n    var ax: Float = 0.toFloat()\n\n    /** The applied local y translation.  */\n    var ay: Float = 0.toFloat()\n\n    /** The applied local rotation in degrees, counter clockwise.  */\n    var arotation: Float = 0.toFloat()\n\n    /** The applied local scaleX.  */\n    var ascaleX: Float = 0.toFloat()\n\n    /** The applied local scaleY.  */\n    var ascaleY: Float = 0.toFloat()\n\n    /** The applied local shearX.  */\n    var ashearX: Float = 0.toFloat()\n\n    /** The applied local shearY.  */\n    var ashearY: Float = 0.toFloat()\n\n    /** If true, the applied transform matches the world transform. If false, the world transform has been modified since it was\n     * computed and [.updateAppliedTransform] must be called before accessing the applied transform.  */\n    var appliedValid: Boolean = false\n    // -- World transform\n\n    /** Part of the world transform matrix for the X axis. If changed, [.setAppliedValid] should be set to false.  */\n    var a: Float = 0.toFloat()\n\n    /** Part of the world transform matrix for the Y axis. If changed, [.setAppliedValid] should be set to false.  */\n    var b: Float = 0.toFloat()\n\n    /** The world X position. If changed, [.setAppliedValid] should be set to false.  */\n    var worldX: Float = 0.toFloat()\n\n    /** Part of the world transform matrix for the X axis. If changed, [.setAppliedValid] should be set to false.  */\n    var c: Float = 0.toFloat()\n\n    /** Part of the world transform matrix for the Y axis. If changed, [.setAppliedValid] should be set to false.  */\n    var d: Float = 0.toFloat()\n\n    /** The world Y position. If changed, [.setAppliedValid] should be set to false.  */\n    var worldY: Float = 0.toFloat()\n\n    internal var sorted: Boolean = false\n\n    /** Returns false when the bone has not been computed because [BoneData.getSkinRequired] is true and the\n     * [active skin][Skeleton.getSkin] does not [contain][Skin.getBones] this bone.  */\n    override var isActive: Boolean = false\n        internal set\n\n    /** The world rotation for the X axis, calculated using [.a] and [.c].  */\n    val worldRotationX: Float\n        get() = atan2(c, a) * radDeg\n\n    /** The world rotation for the Y axis, calculated using [.b] and [.d].  */\n    val worldRotationY: Float\n        get() = atan2(d, b) * radDeg\n\n    /** The magnitude (always positive) of the world scale X, calculated using [.a] and [.c].  */\n    val worldScaleX: Float\n        get() = kotlin.math.sqrt((a * a + c * c).toDouble()).toFloat()\n\n    /** The magnitude (always positive) of the world scale Y, calculated using [.b] and [.d].  */\n    val worldScaleY: Float\n        get() = kotlin.math.sqrt((b * b + d * d).toDouble()).toFloat()\n\n    /** @param parent May be null.\n     */\n    constructor(data: BoneData, skeleton: Skeleton, parent: Bone?) {\n        this.data = data\n        this.skeleton = skeleton\n        this.parent = parent\n        setToSetupPose()\n    }\n\n    /** Copy constructor. Does not copy the children bones.\n     * @param parent May be null.\n     */\n    constructor(bone: Bone, skeleton: Skeleton, parent: Bone?) {\n        this.skeleton = skeleton\n        this.parent = parent\n        data = bone.data\n        x = bone.x\n        y = bone.y\n        rotation = bone.rotation\n        scaleX = bone.scaleX\n        scaleY = bone.scaleY\n        shearX = bone.shearX\n        shearY = bone.shearY\n    }\n\n    /** Same as [.updateWorldTransform]. This method exists for Bone to implement [Updatable].  */\n    override fun update() {\n        updateWorldTransform(x, y, rotation, scaleX, scaleY, shearX, shearY)\n    }\n\n    /** Computes the world transform using the parent bone and the specified local transform. Child bones are not updated.\n     *\n     *\n     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\n     * Runtimes Guide.  */\n\n    fun updateWorldTransform(x: Float = this.x, y: Float = this.y, rotation: Float = this.rotation, scaleX: Float = this.scaleX, scaleY: Float = this.scaleY, shearX: Float = this.shearX, shearY: Float = this.shearY) {\n        ax = x\n        ay = y\n        arotation = rotation\n        ascaleX = scaleX\n        ascaleY = scaleY\n        ashearX = shearX\n        ashearY = shearY\n        appliedValid = true\n\n        val parent = this.parent\n        if (parent == null) { // Root bone.\n            val skeleton = this.skeleton\n            val rotationY = rotation + 90f + shearY\n            val sx = skeleton.scaleX\n            val sy = skeleton.scaleY\n            a = cosDeg(rotation + shearX) * scaleX * sx\n            b = cosDeg(rotationY) * scaleY * sx\n            c = sinDeg(rotation + shearX) * scaleX * sy\n            d = sinDeg(rotationY) * scaleY * sy\n            worldX = x * sx + skeleton.x\n            worldY = y * sy + skeleton.y\n            return\n        }\n\n        var pa = parent.a\n        var pb = parent.b\n        var pc = parent.c\n        var pd = parent.d\n        worldX = pa * x + pb * y + parent.worldX\n        worldY = pc * x + pd * y + parent.worldY\n\n        when (data.transformMode) {\n            TransformMode.normal -> {\n                val rotationY = rotation + 90f + shearY\n                val la = cosDeg(rotation + shearX) * scaleX\n                val lb = cosDeg(rotationY) * scaleY\n                val lc = sinDeg(rotation + shearX) * scaleX\n                val ld = sinDeg(rotationY) * scaleY\n                a = pa * la + pb * lc\n                b = pa * lb + pb * ld\n                c = pc * la + pd * lc\n                d = pc * lb + pd * ld\n                return\n            }\n            TransformMode.onlyTranslation -> {\n                val rotationY = rotation + 90f + shearY\n                a = cosDeg(rotation + shearX) * scaleX\n                b = cosDeg(rotationY) * scaleY\n                c = sinDeg(rotation + shearX) * scaleX\n                d = sinDeg(rotationY) * scaleY\n            }\n            TransformMode.noRotationOrReflection -> {\n                var s = pa * pa + pc * pc\n                val prx: Float\n                if (s > 0.0001f) {\n                    s = kotlin.math.abs(pa * pd - pb * pc) / s\n                    pa /= skeleton.scaleX\n                    pc /= skeleton.scaleY\n                    pb = pc * s\n                    pd = pa * s\n                    prx = atan2(pc, pa) * radDeg\n                } else {\n                    pa = 0f\n                    pc = 0f\n                    prx = 90 - atan2(pd, pb) * radDeg\n                }\n                val rx = rotation + shearX - prx\n                val ry = rotation + shearY - prx + 90\n                val la = cosDeg(rx) * scaleX\n                val lb = cosDeg(ry) * scaleY\n                val lc = sinDeg(rx) * scaleX\n                val ld = sinDeg(ry) * scaleY\n                a = pa * la - pb * lc\n                b = pa * lb - pb * ld\n                c = pc * la + pd * lc\n                d = pc * lb + pd * ld\n            }\n            TransformMode.noScale, TransformMode.noScaleOrReflection -> {\n                val cos = cosDeg(rotation)\n                val sin = sinDeg(rotation)\n                var za = (pa * cos + pb * sin) / skeleton.scaleX\n                var zc = (pc * cos + pd * sin) / skeleton.scaleY\n                var s = kotlin.math.sqrt((za * za + zc * zc).toDouble()).toFloat()\n                if (s > 0.00001f) s = 1 / s\n                za *= s\n                zc *= s\n                s = kotlin.math.sqrt((za * za + zc * zc).toDouble()).toFloat()\n                if (data.transformMode == TransformMode.noScale && pa * pd - pb * pc < 0 != (skeleton.scaleX < 0 != skeleton.scaleY < 0))\n                    s = -s\n                val r = PI / 2 + atan2(zc, za)\n                val zb = cos(r) * s\n                val zd = sin(r) * s\n                val la = cosDeg(shearX) * scaleX\n                val lb = cosDeg(90 + shearY) * scaleY\n                val lc = sinDeg(shearX) * scaleX\n                val ld = sinDeg(90 + shearY) * scaleY\n                a = za * la + zb * lc\n                b = za * lb + zb * ld\n                c = zc * la + zd * lc\n                d = zc * lb + zd * ld\n            }\n        }\n        a *= skeleton.scaleX\n        b *= skeleton.scaleX\n        c *= skeleton.scaleY\n        d *= skeleton.scaleY\n    }\n\n    /** Sets this bone's local transform to the setup pose.  */\n    fun setToSetupPose() {\n        val data = this.data\n        x = data.x\n        y = data.y\n        rotation = data.rotation\n        scaleX = data.scaleX\n        scaleY = data.scaleY\n        shearX = data.shearX\n        shearY = data.shearY\n    }\n\n    fun setPosition(x: Float, y: Float) {\n        this.x = x\n        this.y = y\n    }\n\n    fun setScale(scaleX: Float, scaleY: Float) {\n        this.scaleX = scaleX\n        this.scaleY = scaleY\n    }\n\n    fun setScale(scale: Float) {\n        scaleX = scale\n        scaleY = scale\n    }\n\n    /** Computes the applied transform values from the world transform. This allows the applied transform to be accessed after the\n     * world transform has been modified (by a constraint, [.rotateWorld], etc).\n     *\n     *\n     * If [.updateWorldTransform] has been called for a bone and [.isAppliedValid] is false, then\n     * [.updateAppliedTransform] must be called before accessing the applied transform.\n     *\n     *\n     * Some information is ambiguous in the world transform, such as -1,-1 scale versus 180 rotation. The applied transform after\n     * calling this method is equivalent to the local tranform used to compute the world transform, but may not be identical.  */\n    fun updateAppliedTransform() {\n        appliedValid = true\n        val parent = this.parent\n        if (parent == null) {\n            ax = worldX\n            ay = worldY\n            arotation = atan2(c, a) * radDeg\n            ascaleX = kotlin.math.sqrt((a * a + c * c).toDouble()).toFloat()\n            ascaleY = kotlin.math.sqrt((b * b + d * d).toDouble()).toFloat()\n            ashearX = 0f\n            ashearY = atan2(a * b + c * d, a * d - b * c) * radDeg\n            return\n        }\n        val pa = parent.a\n        val pb = parent.b\n        val pc = parent.c\n        val pd = parent.d\n        val pid = 1 / (pa * pd - pb * pc)\n        val dx = worldX - parent.worldX\n        val dy = worldY - parent.worldY\n        ax = dx * pd * pid - dy * pb * pid\n        ay = dy * pa * pid - dx * pc * pid\n        val ia = pid * pd\n        val id = pid * pa\n        val ib = pid * pb\n        val ic = pid * pc\n        val ra = ia * a - ib * c\n        val rb = ia * b - ib * d\n        val rc = id * c - ic * a\n        val rd = id * d - ic * b\n        ashearX = 0f\n        ascaleX = kotlin.math.sqrt((ra * ra + rc * rc).toDouble()).toFloat()\n        if (ascaleX > 0.0001f) {\n            val det = ra * rd - rb * rc\n            ascaleY = det / ascaleX\n            ashearY = atan2(ra * rb + rc * rd, det) * radDeg\n            arotation = atan2(rc, ra) * radDeg\n        } else {\n            ascaleX = 0f\n            ascaleY = kotlin.math.sqrt((rb * rb + rd * rd).toDouble()).toFloat()\n            ashearY = 0f\n            arotation = 90 - atan2(rd, rb) * radDeg\n        }\n    }\n\n    fun getWorldTransform(worldTransform: Matrix3D): Matrix3D {\n        // @TODO: Ensure this is right\n        worldTransform.setRows3x3(\n            a, b, worldX,\n            c, d, worldY,\n            0f, 0f, 1f\n        )\n        return worldTransform\n    }\n\n    /** Transforms a point from world coordinates to the bone's local coordinates.  */\n    fun worldToLocal(world: SpineVector2): SpineVector2 {\n        val invDet = 1 / (a * d - b * c)\n        val x = world.x - worldX\n        val y = world.y - worldY\n        world.x = x * d * invDet - y * b * invDet\n        world.y = y * a * invDet - x * c * invDet\n        return world\n    }\n\n    /** Transforms a point from the bone's local coordinates to world coordinates.  */\n    fun localToWorld(local: SpineVector2): SpineVector2 {\n        val x = local.x\n        val y = local.y\n        local.x = x * a + y * b + worldX\n        local.y = x * c + y * d + worldY\n        return local\n    }\n\n    /** Transforms a world rotation to a local rotation.  */\n    fun worldToLocalRotation(worldRotation: Float): Float {\n        val sin = sinDeg(worldRotation)\n        val cos = cosDeg(worldRotation)\n        return atan2(a * sin - c * cos, d * cos - b * sin) * radDeg + rotation - shearX\n    }\n\n    /** Transforms a local rotation to a world rotation.  */\n    fun localToWorldRotation(localRotation: Float): Float {\n        var localRotation = localRotation\n        localRotation -= rotation - shearX\n        val sin = sinDeg(localRotation)\n        val cos = cosDeg(localRotation)\n        return atan2(cos * c + sin * d, cos * a + sin * b) * radDeg\n    }\n\n    /** Rotates the world transform the specified amount and sets [.isAppliedValid] to false.\n     * [.updateWorldTransform] will need to be called on any child bones, recursively, and any constraints reapplied.  */\n    fun rotateWorld(degrees: Float) {\n        val cos = cosDeg(degrees)\n        val sin = sinDeg(degrees)\n        a = cos * a - sin * c\n        b = cos * b - sin * d\n        c = sin * a + cos * c\n        d = sin * b + cos * d\n        appliedValid = false\n    }\n\n    // ---\n\n    override fun toString(): String {\n        return data.name\n    }\n}\n/** Computes the world transform using the parent bone and this bone's local transform.\n *\n *\n * See [.updateWorldTransform].  */\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine\n\nimport com.soywiz.korim.color.RGBAf\n\n/** Stores the setup pose for a [Bone].  */\nclass BoneData {\n    /** The index of the bone in [Skeleton.getBones].  */\n    val index: Int\n\n    /** The name of the bone, which is unique across all bones in the skeleton.  */\n    val name: String\n\n    /** @return May be null.\n     */\n    val parent: BoneData?\n\n    /** The bone's length.  */\n    var length: Float = 0.toFloat()\n\n    /** The local x translation.  */\n    var x: Float = 0.toFloat()\n\n    /** The local y translation.  */\n    var y: Float = 0.toFloat()\n\n    /** The local rotation.  */\n    var rotation: Float = 0.toFloat()\n\n    /** The local scaleX.  */\n    var scaleX = 1f\n\n    /** The local scaleY.  */\n    var scaleY = 1f\n\n    /** The local shearX.  */\n    var shearX: Float = 0.toFloat()\n\n    /** The local shearX.  */\n    var shearY: Float = 0.toFloat()\n    internal var transformMode = TransformMode.normal\n\n    /** When true, [Skeleton.updateWorldTransform] only updates this bone if the [Skeleton.getSkin] contains this\n     * bone.\n     * @see Skin.getBones\n     */\n    var skinRequired: Boolean = false\n\n    // Nonessential.\n    /** The color of the bone as it was in Spine. Available only when nonessential data was exported. Bones are not usually\n     * rendered at runtime.  */\n    val color = RGBAf(0.61f, 0.61f, 0.61f, 1f) // 9b9b9bff\n\n    /** @param parent May be null.\n     */\n    constructor(index: Int, name: String, parent: BoneData?) {\n        require(index >= 0) { \"index must be >= 0.\" }\n        this.index = index\n        this.name = name\n        this.parent = parent\n    }\n\n    /** Copy constructor.\n     * @param parent May be null.\n     */\n    constructor(bone: BoneData, parent: BoneData) {\n        index = bone.index\n        name = bone.name\n        this.parent = parent\n        length = bone.length\n        x = bone.x\n        y = bone.y\n        rotation = bone.rotation\n        scaleX = bone.scaleX\n        scaleY = bone.scaleY\n        shearX = bone.shearX\n        shearY = bone.shearY\n    }\n\n    fun setPosition(x: Float, y: Float) {\n        this.x = x\n        this.y = y\n    }\n\n    fun setScale(scaleX: Float, scaleY: Float) {\n        this.scaleX = scaleX\n        this.scaleY = scaleY\n    }\n\n    /** The transform mode for how parent world transforms affect this bone.  */\n    fun getTransformMode(): TransformMode {\n        return transformMode\n    }\n\n    fun setTransformMode(transformMode: TransformMode) {\n        this.transformMode = transformMode\n    }\n\n    override fun toString(): String {\n        return name\n    }\n\n    /** Determines how a bone inherits world transforms from parent bones.  */\n    enum class TransformMode {\n        normal, onlyTranslation, noRotationOrReflection, noScale, noScaleOrReflection;\n\n\n        companion object {\n\n            val values = TransformMode.values()\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine\n\n/** The base class for all constraint datas.  */\nabstract class ConstraintData(\n        /** The constraint's name, which is unique across all constraints in the skeleton of the same type.  */\n        val name: String\n) {\n    /** The ordinal of this constraint for the order a skeleton's constraints will be applied by\n     * [Skeleton.updateWorldTransform].  */\n    var order: Int = 0\n\n    /** When true, [Skeleton.updateWorldTransform] only updates this constraint if the [Skeleton.getSkin] contains\n     * this constraint.\n     * @see Skin.getConstraints\n     */\n    var skinRequired: Boolean = false\n\n    override fun toString(): String {\n        return name ?: \"\"\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine\n\nimport com.esotericsoftware.spine.Animation.Timeline\nimport com.esotericsoftware.spine.AnimationState.AnimationStateListener\n\n/** Stores the current pose values for an [Event].\n *\n *\n * See Timeline\n * [Timeline.apply],\n * AnimationStateListener [AnimationStateListener.event], and\n * [Events](http://esotericsoftware.com/spine-events) in the Spine User Guide.  */\nclass Event(\n    /** The animation time this event was keyed.  */\n    val time: Float,\n    /** The events's setup pose data.  */\n    val data: EventData\n) {\n    var int: Int = 0\n    var float: Float = 0.toFloat()\n    internal lateinit var stringValue: String\n    var volume: Float = 0.toFloat()\n    var balance: Float = 0.toFloat()\n\n    var string: String\n        get() = stringValue\n        set(stringValue) {\n            this.stringValue = stringValue\n        }\n\n    override fun toString(): String {\n        return data.name\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine\n\n/** Stores the setup pose values for an [Event].\n *\n *\n * See [Events](http://esotericsoftware.com/spine-events) in the Spine User Guide.  */\nclass EventData(\n    /** The name of the event, which is unique across all events in the skeleton.  */\n    val name: String\n) {\n    var int: Int = 0\n    var float: Float = 0.toFloat()\n    internal lateinit var stringValue: String\n    internal var audioPath: String? = null\n    var volume: Float = 0.toFloat()\n    var balance: Float = 0.toFloat()\n\n    var string: String\n        get() = stringValue\n        set(stringValue) {\n            this.stringValue = stringValue\n        }\n\n    fun getAudioPath(): String? {\n        return audioPath\n    }\n\n    fun setAudioPath(audioPath: String?) {\n        this.audioPath = audioPath\n    }\n\n    override fun toString(): String {\n        return name\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine\n\nimport com.esotericsoftware.spine.utils.SpineUtils.PI\nimport com.esotericsoftware.spine.utils.SpineUtils.atan2\nimport com.esotericsoftware.spine.utils.SpineUtils.cos\nimport com.esotericsoftware.spine.utils.SpineUtils.radDeg\nimport com.esotericsoftware.spine.utils.SpineUtils.sin\nimport com.soywiz.kds.*\nimport com.soywiz.kds.iterators.*\n\n/** Stores the current pose for an IK constraint. An IK constraint adjusts the rotation of 1 or 2 constrained bones so the tip of\n * the last bone is as close to the target bone as possible.\n *\n *\n * See [IK constraints](http://esotericsoftware.com/spine-ik-constraints) in the Spine User Guide.  */\nclass IkConstraint : Updatable {\n    /** The IK constraint's setup pose data.  */\n\n    val data: IkConstraintData\n\n    /** The bones that will be modified by this IK constraint.  */\n\n    val bones: FastArrayList<Bone>\n\n\n    internal var target: Bone? = null\n\n    /** Controls the bend direction of the IK bones, either 1 or -1.  */\n\n    var bendDirection: Int = 0\n\n    /** When true and only a single bone is being constrained, if the target is too close, the bone is scaled to reach it.  */\n\n    var compress: Boolean = false\n\n    /** When true, if the target is out of range, the parent bone is scaled to reach it. If more than one bone is being constrained\n     * and the parent bone has local nonuniform scale, stretch is not applied.  */\n\n    var stretch: Boolean = false\n\n    /** A percentage (0-1) that controls the mix between the constrained and unconstrained rotations.  */\n\n    var mix = 1f\n\n    /** For two bone IK, the distance from the maximum reach of the bones that rotation will slow.  */\n\n    var softness: Float = 0.toFloat()\n\n\n    internal var active: Boolean = false\n\n    constructor(data: IkConstraintData, skeleton: Skeleton) {\n        this.data = data\n        mix = data.mix\n        softness = data.softness\n        bendDirection = data.bendDirection\n        compress = data.compress\n        stretch = data.stretch\n\n        bones = FastArrayList(data.bones.size)\n        data.bones.fastForEach { boneData ->\n            val bone = skeleton.findBone(boneData.name)\n            bones.add(bone!!)\n        }\n        target = skeleton.findBone(data.target.name)\n    }\n\n    /** Copy constructor.  */\n    constructor(constraint: IkConstraint, skeleton: Skeleton) {\n        data = constraint.data\n        bones = FastArrayList(constraint.bones.size)\n        constraint.bones.fastForEach { bone ->\n            bones.add(skeleton.bones[bone!!.data.index])\n        }\n        target = skeleton.bones[constraint.target!!.data.index]\n        mix = constraint.mix\n        softness = constraint.softness\n        bendDirection = constraint.bendDirection\n        compress = constraint.compress\n        stretch = constraint.stretch\n    }\n\n    /** Applies the constraint to the constrained bones.  */\n    fun apply() {\n        update()\n    }\n\n    override fun update() {\n        val target = this.target\n        val bones = this.bones\n        when (bones.size) {\n            1 -> apply(bones.first(), target!!.worldX, target.worldY, compress, stretch, data.uniform, mix)\n            2 -> apply(bones.first(), bones[1], target!!.worldX, target.worldY, bendDirection, stretch, softness, mix)\n        }\n    }\n\n    /** The bone that is the IK target.  */\n    fun getTarget(): Bone? {\n        return target\n    }\n\n    fun setTarget(target: Bone) {\n        this.target = target\n    }\n\n    override val isActive: Boolean\n        get() = active\n\n    override fun toString(): String {\n        return data.name ?: \"\"\n    }\n\n    companion object {\n\n        /** Applies 1 bone IK. The target is specified in the world coordinate system.  */\n\n        fun apply(bone: Bone, targetX: Float, targetY: Float, compress: Boolean, stretch: Boolean, uniform: Boolean, alpha: Float) {\n            if (!bone.appliedValid) bone.updateAppliedTransform()\n            val p = bone.parent!!\n            val pa = p.a\n            var pb = p.b\n            val pc = p.c\n            var pd = p.d\n            var rotationIK = -bone.ashearX - bone.arotation\n            var tx: Float\n            var ty: Float\n            when (bone.data.transformMode) {\n                BoneData.TransformMode.onlyTranslation -> {\n                    tx = targetX - bone.worldX\n                    ty = targetY - bone.worldY\n                }\n                BoneData.TransformMode.noRotationOrReflection -> {\n                    val s = kotlin.math.abs(pa * pd - pb * pc) / (pa * pa + pc * pc)\n                    val sa = pa / bone.skeleton.scaleX\n                    val sc = pc / bone.skeleton.scaleY\n                    pb = -sc * s * bone.skeleton.scaleX\n                    pd = sa * s * bone.skeleton.scaleY\n                    rotationIK += atan2(sc, sa) * radDeg\n                    val x = targetX - p.worldX\n                    val y = targetY - p.worldY\n                    val d = pa * pd - pb * pc\n                    tx = (x * pd - y * pb) / d - bone.ax\n                    ty = (y * pa - x * pc) / d - bone.ay\n                }\n                // Fall through.\n                else -> {\n                    val x = targetX - p.worldX\n                    val y = targetY - p.worldY\n                    val d = pa * pd - pb * pc\n                    tx = (x * pd - y * pb) / d - bone.ax\n                    ty = (y * pa - x * pc) / d - bone.ay\n                }\n            }\n            rotationIK += atan2(ty, tx) * radDeg\n            if (bone.ascaleX < 0) rotationIK += 180f\n            if (rotationIK > 180)\n                rotationIK -= 360f\n            else if (rotationIK < -180)\n            //\n                rotationIK += 360f\n            var sx = bone.ascaleX\n            var sy = bone.ascaleY\n            if (compress || stretch) {\n                when (bone.data.transformMode) {\n                    BoneData.TransformMode.noScale, BoneData.TransformMode.noScaleOrReflection -> {\n                        tx = targetX - bone.worldX\n                        ty = targetY - bone.worldY\n                    }\n                    else -> Unit\n                }\n                val b = bone.data.length * sx\n                val dd = kotlin.math.sqrt((tx * tx + ty * ty).toDouble()).toFloat()\n                if (compress && dd < b || stretch && dd > b && b > 0.0001f) {\n                    val s = (dd / b - 1) * alpha + 1\n                    sx *= s\n                    if (uniform) sy *= s\n                }\n            }\n            bone.updateWorldTransform(bone.ax, bone.ay, bone.arotation + rotationIK * alpha, sx, sy, bone.ashearX, bone.ashearY)\n        }\n\n        /** Applies 2 bone IK. The target is specified in the world coordinate system.\n         * @param child A direct descendant of the parent bone.\n         */\n\n        fun apply(parent: Bone, child: Bone, targetX: Float, targetY: Float, bendDir: Int, stretch: Boolean, softness: Float, alpha: Float) {\n            var softness = softness\n            if (alpha == 0f) {\n                child.updateWorldTransform()\n                return\n            }\n            if (!parent.appliedValid) parent.updateAppliedTransform()\n            if (!child.appliedValid) child.updateAppliedTransform()\n            val px = parent.ax\n            val py = parent.ay\n            var psx = parent.ascaleX\n            var sx = psx\n            var psy = parent.ascaleY\n            var csx = child.ascaleX\n            val os1: Int\n            val os2: Int\n            var s2: Int\n            if (psx < 0) {\n                psx = -psx\n                os1 = 180\n                s2 = -1\n            } else {\n                os1 = 0\n                s2 = 1\n            }\n            if (psy < 0) {\n                psy = -psy\n                s2 = -s2\n            }\n            if (csx < 0) {\n                csx = -csx\n                os2 = 180\n            } else\n                os2 = 0\n\n            var cx = 0f\n            var cy = 0f\n            var cwx = 0f\n            var cwy = 0f\n            var a = 0f\n            var b = 0f\n            var c = 0f\n            var d = 0f\n            var u = false\n            var id = 0f\n            var x = 0f\n            var y = 0f\n            var dx = 0f\n            var dy = 0f\n            var l1 = 0f\n            var l2 = 0f\n            var a1 = 0f\n            var a2 = 0f\n\n            cx = child.ax\n            a = parent.a\n            b = parent.b\n            c = parent.c\n            d = parent.d;\n            u = kotlin.math.abs(psx - psy) <= 0.0001f;\n            if (!u) {\n                cy = 0f;\n                cwx = a * cx + parent.worldX;\n                cwy = c * cx + parent.worldY;\n            } else {\n                cy = child.ay;\n                cwx = a * cx + b * cy + parent.worldX;\n                cwy = c * cx + d * cy + parent.worldY;\n            }\n            var pp = parent.parent!!\n            a = pp.a;\n            b = pp.b;\n            c = pp.c;\n            d = pp.d;\n            id = 1 / (a * d - b * c)\n            x = cwx - pp.worldX\n            y = cwy - pp.worldY;\n            dx = (x * d - y * b) * id - px\n            dy = (y * a - x * c) * id - py\n            l1 = kotlin.math.sqrt((dx * dx + dy * dy).toDouble()).toFloat()\n            l2 = child.data.length * csx\n            if (l1 < 0.0001f) {\n                apply(parent, targetX, targetY, false, stretch, false, alpha);\n                child.updateWorldTransform(cx, cy, 0f, child.ascaleX, child.ascaleY, child.ashearX, child.ashearY);\n                return;\n            }\n            x = targetX - pp.worldX;\n            y = targetY - pp.worldY;\n            var tx = (x * d - y * b) * id - px\n            var ty = (y * a - x * c) * id - py;\n            var dd = tx * tx + ty * ty;\n            if (softness != 0f) {\n                softness *= psx * (csx + 1) / 2;\n                var td = kotlin.math.sqrt(dd.toDouble()).toFloat()\n                var sd = td - l1 - l2 * psx + softness;\n                if (sd > 0) {\n                    var p = kotlin.math.min(1f, sd / (softness * 2)) - 1;\n                    p = (sd - softness * (1 - p * p)) / td;\n                    tx -= p * tx;\n                    ty -= p * ty;\n                    dd = tx * tx + ty * ty;\n                }\n            }\n            outer@ while (true) {\n                if (u) {\n                    l2 *= psx;\n                    var cos =(dd - l1 * l1 - l2 * l2) / (2 * l1 * l2);\n                    if (cos < -1)\n                        cos = -1f;\n                    else if (cos > 1) {\n                        cos = 1f;\n                        if (stretch) sx *= (kotlin.math.sqrt(dd.toDouble()).toFloat() / (l1 + l2) - 1) * alpha + 1;\n                    }\n                    a2 = kotlin.math.acos(cos.toDouble()).toFloat() * bendDir;\n                    a = l1 + l2 * cos;\n                    b = l2 * sin(a2);\n                    a1 = atan2(ty * a - tx * b, tx * a + ty * b);\n                } else {\n                    a = psx * l2;\n                    b = psy * l2;\n                    val aa = a * a\n                    val bb = b * b\n                    val ta = atan2(ty, tx);\n                    c = bb * l1 * l1 + aa * dd - aa * bb;\n                    val c1 = - 2 * bb * l1\n                    val c2 = bb-aa;\n                    d = c1 * c1 - 4 * c2 * c;\n                    if (d >= 0) {\n                        var q =kotlin.math.sqrt(d.toDouble()).toFloat();\n                        if (c1 < 0) q = -q;\n                        q = -(c1 + q) / 2;\n                        val r0 = q / c2\n                        val r1 = c / q;\n                        val r = if (kotlin.math.abs(r0) < kotlin.math.abs(r1)) r0 else r1;\n                        if (r * r <= dd) {\n                            y = kotlin.math.sqrt((dd - r * r).toDouble()).toFloat() * bendDir;\n                            a1 = ta - atan2(y, r);\n                            a2 = atan2(y / psy, (r - l1) / psx);\n                            break@outer;\n                        }\n                    }\n                    var minAngle = PI\n                    var minX = l1-a\n                    var minDist = minX * minX\n                    var minY = 0f;\n                    var maxAngle = 0f\n                    var maxX = l1+a\n                    var maxDist = maxX * maxX\n                    var maxY = 0f;\n                    c = -a * l1 / (aa - bb);\n                    if (c >= -1 && c <= 1) {\n                        c = kotlin.math.acos(c.toDouble()).toFloat();\n                        x = a * cos(c) + l1;\n                        y = b * sin(c);\n                        d = x * x + y * y;\n                        if (d < minDist) {\n                            minAngle = c;\n                            minDist = d;\n                            minX = x;\n                            minY = y;\n                        }\n                        if (d > maxDist) {\n                            maxAngle = c;\n                            maxDist = d;\n                            maxX = x;\n                            maxY = y;\n                        }\n                    }\n                    if (dd <= (minDist + maxDist) / 2) {\n                        a1 = ta - atan2(minY * bendDir, minX);\n                        a2 = minAngle * bendDir;\n                    } else {\n                        a1 = ta - atan2(maxY * bendDir, maxX);\n                        a2 = maxAngle * bendDir;\n                    }\n                }\n                break@outer\n            }\n\n            val os = atan2(cy, cx) * s2\n            var rotation = parent.arotation\n            a1 = (a1 - os) * radDeg + os1 - rotation\n            if (a1 > 180)\n                a1 -= 360f\n            else if (a1 < -180) a1 += 360f\n            parent.updateWorldTransform(px, py, rotation + a1 * alpha, sx, parent.ascaleY, 0f, 0f)\n            rotation = child.arotation\n            a2 = ((a2 + os) * radDeg - child.ashearX) * s2 + os2 - rotation\n            if (a2 > 180)\n                a2 -= 360f\n            else if (a2 < -180) a2 += 360f\n            child.updateWorldTransform(cx, cy, rotation + a2 * alpha, child.ascaleX, child.ascaleY, child.ashearX, child.ashearY)\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine\n\nimport com.soywiz.kds.*\n\n/** Stores the setup pose for an [IkConstraint].\n *\n *\n * See [IK constraints](http://esotericsoftware.com/spine-ik-constraints) in the Spine User Guide.  */\nclass IkConstraintData(name: String) : ConstraintData(name) {\n    /** The bones that are constrained by this IK constraint.  */\n    val bones: FastArrayList<BoneData> = FastArrayList()\n    lateinit internal var target: BoneData\n\n    /** Controls the bend direction of the IK bones, either 1 or -1.  */\n    var bendDirection = 1\n\n    /** When true and only a single bone is being constrained, if the target is too close, the bone is scaled to reach it.  */\n    var compress: Boolean = false\n\n    /** When true, if the target is out of range, the parent bone is scaled to reach it. If more than one bone is being constrained\n     * and the parent bone has local nonuniform scale, stretch is not applied.  */\n    var stretch: Boolean = false\n\n    /** When true, only a single bone is being constrained, and [.getCompress] or [.getStretch] is used, the bone\n     * is scaled on both the X and Y axes.  */\n    var uniform: Boolean = false\n\n    /** A percentage (0-1) that controls the mix between the constrained and unconstrained rotations.  */\n    var mix = 1f\n\n    /** For two bone IK, the distance from the maximum reach of the bones that rotation will slow.  */\n    var softness: Float = 0.toFloat()\n\n    /** The bone that is the IK target.  */\n    fun getTarget(): BoneData {\n        return target\n    }\n\n    fun setTarget(target: BoneData) {\n        this.target = target\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine\n\nimport com.esotericsoftware.spine.PathConstraintData.PositionMode\nimport com.esotericsoftware.spine.PathConstraintData.RotateMode\nimport com.esotericsoftware.spine.PathConstraintData.SpacingMode\nimport com.esotericsoftware.spine.attachments.PathAttachment\nimport com.esotericsoftware.spine.utils.*\nimport com.soywiz.kds.*\nimport com.soywiz.kds.iterators.*\n\n/** Stores the current pose for a path constraint. A path constraint adjusts the rotation, translation, and scale of the\n * constrained bones so they follow a [PathAttachment].\n *\n *\n * See [Path constraints](http://esotericsoftware.com/spine-path-constraints) in the Spine User Guide.  */\nclass PathConstraint : Updatable {\n\n    /** The path constraint's setup pose data.  */\n    val data: PathConstraintData\n\n    /** The bones that will be modified by this path constraint.  */\n    val bones: FastArrayList<Bone>\n\n    lateinit internal var target: Slot\n\n    /** The position along the path.  */\n    var position: Float = 0.toFloat()\n\n    /** The spacing between bones.  */\n    var spacing: Float = 0.toFloat()\n\n    /** A percentage (0-1) that controls the mix between the constrained and unconstrained rotations.  */\n    var rotateMix: Float = 0.toFloat()\n\n    /** A percentage (0-1) that controls the mix between the constrained and unconstrained translations.  */\n    var translateMix: Float = 0.toFloat()\n\n    override var isActive: Boolean = false\n        internal set\n\n    private val spaces = FloatArrayList()\n    private val positions = FloatArrayList()\n    private val world = FloatArrayList()\n    private val curves = FloatArrayList()\n    private val lengths = FloatArrayList()\n    private val segments = FloatArray(10)\n\n    constructor(data: PathConstraintData, skeleton: Skeleton) {\n        this.data = data\n        bones = FastArrayList(data.bones.size)\n        data.bones.fastForEach { boneData ->\n            bones.add(skeleton.findBone(boneData.name)!!)\n        }\n        target = skeleton.findSlot(data.target.name)!!\n        position = data.position\n        spacing = data.spacing\n        rotateMix = data.rotateMix\n        translateMix = data.translateMix\n    }\n\n    /** Copy constructor.  */\n    constructor(constraint: PathConstraint, skeleton: Skeleton) {\n        data = constraint.data\n        bones = FastArrayList(constraint.bones.size)\n        constraint.bones.fastForEach { bone ->\n            bones.add(skeleton.bones[bone.data.index])\n        }\n        target = skeleton.slots[constraint.target!!.data.index]\n        position = constraint.position\n        spacing = constraint.spacing\n        rotateMix = constraint.rotateMix\n        translateMix = constraint.translateMix\n    }\n\n    /** Applies the constraint to the constrained bones.  */\n    fun apply() {\n        update()\n    }\n\n    override fun update() {\n        val attachment = target!!.attachment\n        if (attachment !is PathAttachment) return\n\n        val rotateMix = this.rotateMix\n        val translateMix = this.translateMix\n        val translate = translateMix > 0\n        val rotate = rotateMix > 0\n        if (!translate && !rotate) return\n\n        val data = this.data\n        val percentSpacing = data.spacingMode == SpacingMode.percent\n        val rotateMode = data.rotateMode\n        val tangents = rotateMode == RotateMode.tangent\n        val scale = rotateMode == RotateMode.chainScale\n        val boneCount = this.bones.size\n        val spacesCount = if (tangents) boneCount else boneCount + 1\n        val bones = this.bones\n        val spaces = this.spaces.setSize(spacesCount)\n        var lengths: FloatArray? = null\n        val spacing = this.spacing\n        if (scale || !percentSpacing) {\n            if (scale) lengths = this.lengths.setSize(boneCount)\n            val lengthSpacing = data.spacingMode == SpacingMode.length\n            var i = 0\n            val n = spacesCount - 1\n            while (i < n) {\n                val bone = bones[i]\n                val setupLength = bone.data.length\n                if (setupLength < epsilon) {\n                    if (scale) lengths!![i] = 0f\n                    spaces[++i] = 0f\n                } else if (percentSpacing) {\n                    if (scale) {\n                        val x = setupLength * bone.a\n                        val y = setupLength * bone.c\n                        val length = kotlin.math.sqrt((x * x + y * y).toDouble()).toFloat()\n                        lengths!![i] = length\n                    }\n                    spaces[++i] = spacing\n                } else {\n                    val x = setupLength * bone.a\n                    val y = setupLength * bone.c\n                    val length = kotlin.math.sqrt((x * x + y * y).toDouble()).toFloat()\n                    if (scale) lengths!![i] = length\n                    spaces[++i] = (if (lengthSpacing) setupLength + spacing else spacing) * length / setupLength\n                }\n            }\n        } else {\n            for (i in 1 until spacesCount)\n                spaces[i] = spacing\n        }\n\n        val positions = computeWorldPositions(attachment, spacesCount, tangents,\n                data.positionMode == PositionMode.percent, percentSpacing)\n        var boneX = positions[0]\n        var boneY = positions[1]\n        var offsetRotation = data.offsetRotation\n        val tip: Boolean\n        if (offsetRotation == 0f)\n            tip = rotateMode == RotateMode.chain\n        else {\n            tip = false\n            val p = target!!.bone\n            offsetRotation *= if (p.a * p.d - p.b * p.c > 0) SpineUtils.degRad else -SpineUtils.degRad\n        }\n        var i = 0\n        var p = 3\n        while (i < boneCount) {\n            val bone = bones[i]\n            bone.worldX += (boneX - bone.worldX) * translateMix\n            bone.worldY += (boneY - bone.worldY) * translateMix\n            val x = positions[p]\n            val y = positions[p + 1]\n            val dx = x - boneX\n            val dy = y - boneY\n            if (scale) {\n                val length = lengths!![i]\n                if (length >= epsilon) {\n                    val s = (kotlin.math.sqrt((dx * dx + dy * dy).toDouble()).toFloat() / length - 1) * rotateMix + 1\n                    bone.a *= s\n                    bone.c *= s\n                }\n            }\n            boneX = x\n            boneY = y\n            if (rotate) {\n                val a = bone.a\n                val b = bone.b\n                val c = bone.c\n                val d = bone.d\n                var r: Float\n                var cos: Float\n                var sin: Float\n                if (tangents)\n                    r = positions[p - 1]\n                else if (spaces[i + 1] < epsilon)\n                    r = positions[p + 2]\n                else\n                    r = kotlin.math.atan2(dy.toDouble(), dx.toDouble()).toFloat()\n                r -= kotlin.math.atan2(c.toDouble(), a.toDouble()).toFloat()\n                if (tip) {\n                    cos = kotlin.math.cos(r.toDouble()).toFloat()\n                    sin = kotlin.math.sin(r.toDouble()).toFloat()\n                    val length = bone.data.length\n                    boneX += (length * (cos * a - sin * c) - dx) * rotateMix\n                    boneY += (length * (sin * a + cos * c) - dy) * rotateMix\n                } else\n                    r += offsetRotation\n                if (r > SpineUtils.PI)\n                    r -= SpineUtils.PI2\n                else if (r < -SpineUtils.PI)\n                //\n                    r += SpineUtils.PI2\n                r *= rotateMix\n                cos = kotlin.math.cos(r.toDouble()).toFloat()\n                sin = kotlin.math.sin(r.toDouble()).toFloat()\n                bone.a = cos * a - sin * c\n                bone.b = cos * b - sin * d\n                bone.c = sin * a + cos * c\n                bone.d = sin * b + cos * d\n            }\n            bone.appliedValid = false\n            i++\n            p += 3\n        }\n    }\n\n    internal fun computeWorldPositions(path: PathAttachment, spacesCount: Int, tangents: Boolean, percentPosition: Boolean,\n                                       percentSpacing: Boolean): FloatArray {\n        val target = this.target\n        var position = this.position\n        val spaces = this.spaces.data\n        val out = this.positions.setSize(spacesCount * 3 + 2)\n        val world: FloatArray\n        val closed = path.closed\n        var verticesLength = path.worldVerticesLength\n        var curveCount = verticesLength / 6\n        var prevCurve = NONE\n\n        if (!path.constantSpeed) {\n            val lengths = path.lengths\n            curveCount -= if (closed) 1 else 2\n            val pathLength = lengths[curveCount]\n            if (percentPosition) position *= pathLength\n            if (percentSpacing) {\n                for (i in 1 until spacesCount)\n                    spaces[i] *= pathLength\n            }\n            world = this.world.setSize(8)\n            var i = 0\n            var o = 0\n            var curve = 0\n            while (i < spacesCount) {\n                val space = spaces[i]\n                position += space\n                var p = position\n\n                if (closed) {\n                    p %= pathLength\n                    if (p < 0) p += pathLength\n                    curve = 0\n                } else if (p < 0) {\n                    if (prevCurve != BEFORE) {\n                        prevCurve = BEFORE\n                        path.computeWorldVertices(target!!, 2, 4, world, 0, 2)\n                    }\n                    addBeforePosition(p, world, 0, out, o)\n                    i++\n                    o += 3\n                    continue\n                } else if (p > pathLength) {\n                    if (prevCurve != AFTER) {\n                        prevCurve = AFTER\n                        path.computeWorldVertices(target!!, verticesLength - 6, 4, world, 0, 2)\n                    }\n                    addAfterPosition(p - pathLength, world, 0, out, o)\n                    continue\n                }\n\n                // Determine curve containing position.\n                while (true) {\n                    val length = lengths[curve]\n                    if (p > length) {\n                        curve++\n                        continue\n                    }\n                    if (curve == 0)\n                        p /= length\n                    else {\n                        val prev = lengths[curve - 1]\n                        p = (p - prev) / (length - prev)\n                    }\n                    break\n                    curve++\n                }\n                if (curve != prevCurve) {\n                    prevCurve = curve\n                    if (closed && curve == curveCount) {\n                        path.computeWorldVertices(target!!, verticesLength - 4, 4, world, 0, 2)\n                        path.computeWorldVertices(target, 0, 4, world, 4, 2)\n                    } else\n                        path.computeWorldVertices(target!!, curve * 6 + 2, 8, world, 0, 2)\n                }\n                addCurvePosition(p, world[0], world[1], world[2], world[3], world[4], world[5], world[6], world[7], out, o,\n                        tangents || i > 0 && space < epsilon)\n                i++\n                o += 3\n            }\n            return out\n        }\n\n        // World vertices.\n        if (closed) {\n            verticesLength += 2\n            world = this.world.setSize(verticesLength)\n            path.computeWorldVertices(target!!, 2, verticesLength - 4, world, 0, 2)\n            path.computeWorldVertices(target, 0, 2, world, verticesLength - 4, 2)\n            world[verticesLength - 2] = world[0]\n            world[verticesLength - 1] = world[1]\n        } else {\n            curveCount--\n            verticesLength -= 4\n            world = this.world.setSize(verticesLength)\n            path.computeWorldVertices(target!!, 2, verticesLength, world, 0, 2)\n        }\n\n        // Curve lengths.\n        val curves = this.curves.setSize(curveCount)\n        var pathLength = 0f\n        var x1 = world[0]\n        var y1 = world[1]\n        var cx1 = 0f\n        var cy1 = 0f\n        var cx2 = 0f\n        var cy2 = 0f\n        var x2 = 0f\n        var y2 = 0f\n        var tmpx: Float\n        var tmpy: Float\n        var dddfx: Float\n        var dddfy: Float\n        var ddfx: Float\n        var ddfy: Float\n        var dfx: Float\n        var dfy: Float\n        run {\n            var i = 0\n            var w = 2\n            while (i < curveCount) {\n                cx1 = world[w]\n                cy1 = world[w + 1]\n                cx2 = world[w + 2]\n                cy2 = world[w + 3]\n                x2 = world[w + 4]\n                y2 = world[w + 5]\n                tmpx = (x1 - cx1 * 2 + cx2) * 0.1875f\n                tmpy = (y1 - cy1 * 2 + cy2) * 0.1875f\n                dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.09375f\n                dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.09375f\n                ddfx = tmpx * 2 + dddfx\n                ddfy = tmpy * 2 + dddfy\n                dfx = (cx1 - x1) * 0.75f + tmpx + dddfx * 0.16666667f\n                dfy = (cy1 - y1) * 0.75f + tmpy + dddfy * 0.16666667f\n                pathLength += kotlin.math.sqrt((dfx * dfx + dfy * dfy).toDouble()).toFloat()\n                dfx += ddfx\n                dfy += ddfy\n                ddfx += dddfx\n                ddfy += dddfy\n                pathLength += kotlin.math.sqrt((dfx * dfx + dfy * dfy).toDouble()).toFloat()\n                dfx += ddfx\n                dfy += ddfy\n                pathLength += kotlin.math.sqrt((dfx * dfx + dfy * dfy).toDouble()).toFloat()\n                dfx += ddfx + dddfx\n                dfy += ddfy + dddfy\n                pathLength += kotlin.math.sqrt((dfx * dfx + dfy * dfy).toDouble()).toFloat()\n                curves[i] = pathLength\n                x1 = x2\n                y1 = y2\n                i++\n                w += 6\n            }\n        }\n        if (percentPosition)\n            position *= pathLength\n        else\n            position *= pathLength / path.lengths[curveCount - 1]\n        if (percentSpacing) {\n            for (i in 1 until spacesCount)\n                spaces[i] *= pathLength\n        }\n\n        val segments = this.segments\n        var curveLength = 0f\n        var i = 0\n        var o = 0\n        var curve = 0\n        var segment = 0\n        while (i < spacesCount) {\n            val space = spaces[i]\n            position += space\n            var p = position\n\n            if (closed) {\n                p %= pathLength\n                if (p < 0) p += pathLength\n                curve = 0\n            } else if (p < 0) {\n                addBeforePosition(p, world, 0, out, o)\n                i++\n                o += 3\n                continue\n            } else if (p > pathLength) {\n                addAfterPosition(p - pathLength, world, verticesLength - 4, out, o)\n                continue\n            }\n\n            // Determine curve containing position.\n            while (true) {\n                val length = curves[curve]\n                if (p > length) {\n                    curve++\n                    continue\n                }\n                if (curve == 0)\n                    p /= length\n                else {\n                    val prev = curves[curve - 1]\n                    p = (p - prev) / (length - prev)\n                }\n                break\n                curve++\n            }\n\n            // Curve segment lengths.\n            if (curve != prevCurve) {\n                prevCurve = curve\n                var ii = curve * 6\n                x1 = world[ii]\n                y1 = world[ii + 1]\n                cx1 = world[ii + 2]\n                cy1 = world[ii + 3]\n                cx2 = world[ii + 4]\n                cy2 = world[ii + 5]\n                x2 = world[ii + 6]\n                y2 = world[ii + 7]\n                tmpx = (x1 - cx1 * 2 + cx2) * 0.03f\n                tmpy = (y1 - cy1 * 2 + cy2) * 0.03f\n                dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.006f\n                dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.006f\n                ddfx = tmpx * 2 + dddfx\n                ddfy = tmpy * 2 + dddfy\n                dfx = (cx1 - x1) * 0.3f + tmpx + dddfx * 0.16666667f\n                dfy = (cy1 - y1) * 0.3f + tmpy + dddfy * 0.16666667f\n                curveLength = kotlin.math.sqrt((dfx * dfx + dfy * dfy).toDouble()).toFloat()\n                segments[0] = curveLength\n                ii = 1\n                while (ii < 8) {\n                    dfx += ddfx\n                    dfy += ddfy\n                    ddfx += dddfx\n                    ddfy += dddfy\n                    curveLength += kotlin.math.sqrt((dfx * dfx + dfy * dfy).toDouble()).toFloat()\n                    segments[ii] = curveLength\n                    ii++\n                }\n                dfx += ddfx\n                dfy += ddfy\n                curveLength += kotlin.math.sqrt((dfx * dfx + dfy * dfy).toDouble()).toFloat()\n                segments[8] = curveLength\n                dfx += ddfx + dddfx\n                dfy += ddfy + dddfy\n                curveLength += kotlin.math.sqrt((dfx * dfx + dfy * dfy).toDouble()).toFloat()\n                segments[9] = curveLength\n                segment = 0\n            }\n\n            // Weight by segment length.\n            p *= curveLength\n            while (true) {\n                val length = segments[segment]\n                if (p > length) {\n                    segment++\n                    continue\n                }\n                if (segment == 0)\n                    p /= length\n                else {\n                    val prev = segments[segment - 1]\n                    p = segment + (p - prev) / (length - prev)\n                }\n                break\n                segment++\n            }\n            addCurvePosition(p * 0.1f, x1, y1, cx1, cy1, cx2, cy2, x2, y2, out, o, tangents || i > 0 && space < epsilon)\n            i++\n            o += 3\n        }\n        return out\n    }\n\n    private fun addBeforePosition(p: Float, temp: FloatArray, i: Int, out: FloatArray, o: Int) {\n        val x1 = temp[i]\n        val y1 = temp[i + 1]\n        val dx = temp[i + 2] - x1\n        val dy = temp[i + 3] - y1\n        val r = kotlin.math.atan2(dy.toDouble(), dx.toDouble()).toFloat()\n        out[o] = x1 + p * kotlin.math.cos(r.toDouble()).toFloat()\n        out[o + 1] = y1 + p * kotlin.math.sin(r.toDouble()).toFloat()\n        out[o + 2] = r\n    }\n\n    private fun addAfterPosition(p: Float, temp: FloatArray, i: Int, out: FloatArray, o: Int) {\n        val x1 = temp[i + 2]\n        val y1 = temp[i + 3]\n        val dx = x1 - temp[i]\n        val dy = y1 - temp[i + 1]\n        val r = kotlin.math.atan2(dy.toDouble(), dx.toDouble()).toFloat()\n        out[o] = x1 + p * kotlin.math.cos(r.toDouble()).toFloat()\n        out[o + 1] = y1 + p * kotlin.math.sin(r.toDouble()).toFloat()\n        out[o + 2] = r\n    }\n\n    private fun addCurvePosition(p: Float, x1: Float, y1: Float, cx1: Float, cy1: Float, cx2: Float, cy2: Float, x2: Float, y2: Float,\n                                 out: FloatArray, o: Int, tangents: Boolean) {\n        if (p < epsilon || p.isNaN()) {\n            out[o] = x1\n            out[o + 1] = y1\n            out[o + 2] = kotlin.math.atan2((cy1 - y1).toDouble(), (cx1 - x1).toDouble()).toFloat()\n            return\n        }\n        val tt = p * p\n        val ttt = tt * p\n        val u = 1 - p\n        val uu = u * u\n        val uuu = uu * u\n        val ut = u * p\n        val ut3 = ut * 3\n        val uut3 = u * ut3\n        val utt3 = ut3 * p\n        val x = x1 * uuu + cx1 * uut3 + cx2 * utt3 + x2 * ttt\n        val y = y1 * uuu + cy1 * uut3 + cy2 * utt3 + y2 * ttt\n        out[o] = x\n        out[o + 1] = y\n        if (tangents) {\n            if (p < 0.001f)\n                out[o + 2] = kotlin.math.atan2((cy1 - y1).toDouble(), (cx1 - x1).toDouble()).toFloat()\n            else\n                out[o + 2] = kotlin.math.atan2((y - (y1 * uu + cy1 * ut * 2f + cy2 * tt)).toDouble(), (x - (x1 * uu + cx1 * ut * 2f + cx2 * tt)).toDouble()).toFloat()\n        }\n    }\n\n    /** The slot whose path attachment will be used to constrained the bones.  */\n    fun getTarget(): Slot? {\n        return target\n    }\n\n    fun setTarget(target: Slot) {\n        this.target = target\n    }\n\n    override fun toString(): String {\n        return data.name\n    }\n\n    companion object {\n        private val NONE = -1\n        private val BEFORE = -2\n        private val AFTER = -3\n        private val epsilon = 0.00001f\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine\n\nimport com.soywiz.kds.*\nimport kotlin.js.*\n\n/** Stores the setup pose for a [PathConstraint].\n *\n *\n * See [Path constraints](http://esotericsoftware.com/spine-path-constraints) in the Spine User Guide.  */\nclass PathConstraintData(name: String) : ConstraintData(name) {\n    /** The bones that will be modified by this path constraint.  */\n    val bones: FastArrayList<BoneData> = FastArrayList()\n    internal lateinit var target: SlotData\n    internal lateinit var positionMode: PositionMode\n    internal lateinit var spacingMode: SpacingMode\n    internal lateinit var rotateMode: RotateMode\n\n    /** An offset added to the constrained bone rotation.  */\n    var offsetRotation: Float = 0.toFloat()\n\n    /** The position along the path.  */\n    var position: Float = 0.toFloat()\n\n    /** The spacing between bones.  */\n    var spacing: Float = 0.toFloat()\n\n    /** A percentage (0-1) that controls the mix between the constrained and unconstrained rotations.  */\n    var rotateMix: Float = 0.toFloat()\n\n    /** A percentage (0-1) that controls the mix between the constrained and unconstrained translations.  */\n    var translateMix: Float = 0.toFloat()\n\n    /** The slot whose path attachment will be used to constrained the bones.  */\n    fun getTarget(): SlotData {\n        return target\n    }\n\n    fun setTarget(target: SlotData) {\n        this.target = target\n    }\n\n    /** The mode for positioning the first bone on the path.  */\n    fun getPositionMode(): PositionMode {\n        return positionMode\n    }\n\n    fun setPositionMode(positionMode: PositionMode) {\n        this.positionMode = positionMode\n    }\n\n    /** The mode for positioning the bones after the first bone on the path.  */\n    fun getSpacingMode(): SpacingMode {\n        return spacingMode\n    }\n\n    fun setSpacingMode(spacingMode: SpacingMode) {\n        this.spacingMode = spacingMode\n    }\n\n    /** The mode for adjusting the rotation of the bones.  */\n    fun getRotateMode(): RotateMode {\n        return rotateMode\n    }\n\n    fun setRotateMode(rotateMode: RotateMode) {\n        this.rotateMode = rotateMode\n    }\n\n    /** Controls how the first bone is positioned along the path.\n     *\n     *\n     * See [Position mode](http://esotericsoftware.com/spine-path-constraints#Position-mode) in the Spine User Guide.  */\n    enum class PositionMode {\n        fixed, percent;\n\n\n        companion object {\n\n            val values = PositionMode.values()\n        }\n    }\n\n    /** Controls how bones after the first bone are positioned along the path.\n     *\n     *\n     * See [Spacing mode](http://esotericsoftware.com/spine-path-constraints#Spacing-mode) in the Spine User Guide.  */\n    enum class SpacingMode {\n        @JsName(\"length2\") length, fixed, percent;\n\n\n        companion object {\n\n            val values = SpacingMode.values()\n        }\n    }\n\n    /** Controls how bones are rotated, translated, and scaled to match the path.\n     *\n     *\n     * See [Rotate mode](http://esotericsoftware.com/spine-path-constraints#Rotate-mode) in the Spine User Guide.  */\n    enum class RotateMode {\n        tangent, chain, chainScale;\n\n\n        companion object {\n\n            val values = RotateMode.values()\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine\n\nimport com.soywiz.korim.color.RGBAf\n\nimport com.esotericsoftware.spine.attachments.Attachment\nimport com.esotericsoftware.spine.attachments.MeshAttachment\nimport com.esotericsoftware.spine.attachments.PathAttachment\nimport com.esotericsoftware.spine.attachments.RegionAttachment\nimport com.esotericsoftware.spine.utils.*\nimport com.esotericsoftware.spine.utils.SpineUtils.arraycopy\nimport com.esotericsoftware.spine.utils.SpineUtils.cosDeg\nimport com.esotericsoftware.spine.utils.SpineUtils.sinDeg\nimport com.soywiz.kds.*\nimport com.soywiz.kds.iterators.*\nimport kotlin.js.*\nimport kotlin.math.*\n\n/** Stores the current pose for a skeleton.\n *\n *\n * See [Instance objects](http://esotericsoftware.com/spine-runtime-architecture#Instance-objects) in the Spine\n * Runtimes Guide.  */\nclass Skeleton {\n    /** The skeleton's setup pose data.  */\n    val data: SkeletonData\n\n    /** The skeleton's bones, sorted parent first. The root bone is always the first bone.  */\n    val bones: FastArrayList<Bone>\n\n    /** The skeleton's slots.  */\n    val slots: FastArrayList<Slot>\n    internal var drawOrder: FastArrayList<Slot>\n\n    /** The skeleton's IK constraints.  */\n    val ikConstraints: FastArrayList<IkConstraint>\n\n    /** The skeleton's transform constraints.  */\n    val transformConstraints: FastArrayList<TransformConstraint>\n\n    /** The skeleton's path constraints.  */\n    val pathConstraints: FastArrayList<PathConstraint>\n\n    /** The list of bones and constraints, sorted in the order they should be updated, as computed by [.updateCache].  */\n    @JsName(\"updateCacheProp\")\n    val updateCache: FastArrayList<Updatable> = FastArrayList()\n    internal val updateCacheReset: FastArrayList<Bone> = FastArrayList()\n    internal var skin: Skin? = null\n    internal var color: RGBAf\n\n    /** Returns the skeleton's time. This can be used for tracking, such as with Slot [Slot.getAttachmentTime].\n     *\n     *\n     * See [.update].  */\n    var time: Float = 0.toFloat()\n\n    /** Scales the entire skeleton on the X axis. This affects all bones, even if the bone's transform mode disallows scale\n     * inheritance.  */\n    var scaleX = 1f\n\n    /** Scales the entire skeleton on the Y axis. This affects all bones, even if the bone's transform mode disallows scale\n     * inheritance.  */\n    var scaleY = 1f\n\n    /** Sets the skeleton X position, which is added to the root bone worldX position.  */\n    var x: Float = 0.toFloat()\n\n    /** Sets the skeleton Y position, which is added to the root bone worldY position.  */\n    var y: Float = 0.toFloat()\n\n    /** Returns the root bone, or null.  */\n    val rootBone: Bone?\n        get() = if (bones.size == 0) null else bones.first()\n\n    constructor(data: SkeletonData) {\n        this.data = data\n\n        bones = FastArrayList(data.bones.size)\n        data.bones.fastForEach { boneData ->\n            val bone: Bone\n            if (boneData.parent == null)\n                bone = Bone(boneData, this, null)\n            else {\n                val parent = bones[boneData.parent.index]\n                bone = Bone(boneData, this, parent)\n                parent.children.add(bone)\n            }\n            bones.add(bone)\n        }\n\n        slots = FastArrayList(data.slots.size)\n        drawOrder = FastArrayList(data.slots.size)\n        data.slots.fastForEach { slotData ->\n            val bone = bones[slotData.boneData.index]\n            val slot = Slot(slotData, bone)\n            slots.add(slot)\n            drawOrder.add(slot)\n        }\n\n        ikConstraints = FastArrayList(data.ikConstraints.size)\n        data.ikConstraints.fastForEach { ikConstraintData ->\n            ikConstraints.add(IkConstraint(ikConstraintData, this))\n        }\n\n        transformConstraints = FastArrayList(data.transformConstraints.size)\n        data.transformConstraints.fastForEach { transformConstraintData ->\n            transformConstraints.add(TransformConstraint(transformConstraintData, this))\n        }\n\n        pathConstraints = FastArrayList(data.pathConstraints.size)\n        data.pathConstraints.fastForEach { pathConstraintData ->\n            pathConstraints.add(PathConstraint(pathConstraintData, this))\n        }\n\n        color = RGBAf(1f, 1f, 1f, 1f)\n\n        updateCache()\n    }\n\n    /** Copy constructor.  */\n    constructor(skeleton: Skeleton) {\n        data = skeleton.data\n\n        bones = FastArrayList(skeleton.bones.size)\n        skeleton.bones.fastForEach { bone ->\n            val newBone: Bone\n            if (bone.parent == null)\n                newBone = Bone(bone, this, null)\n            else {\n                val parent = bones[bone.parent.data.index]\n                newBone = Bone(bone, this, parent)\n                parent.children.add(newBone)\n            }\n            bones.add(newBone)\n        }\n\n        slots = FastArrayList(skeleton.slots.size)\n        skeleton.slots.fastForEach { slot ->\n            val bone = bones[slot.bone.data.index]\n            slots.add(Slot(slot, bone))\n        }\n\n        drawOrder = FastArrayList(slots.size)\n        skeleton.drawOrder.fastForEach { slot ->\n            drawOrder.add(slots[slot.data.index])\n        }\n\n        ikConstraints = FastArrayList(skeleton.ikConstraints.size)\n        skeleton.ikConstraints.fastForEach { ikConstraint ->\n            ikConstraints.add(IkConstraint(ikConstraint, this))\n        }\n\n        transformConstraints = FastArrayList(skeleton.transformConstraints.size)\n        skeleton.transformConstraints.fastForEach { transformConstraint ->\n            transformConstraints.add(TransformConstraint(transformConstraint, this))\n        }\n\n        pathConstraints = FastArrayList(skeleton.pathConstraints.size)\n        skeleton.pathConstraints.fastForEach { pathConstraint ->\n            pathConstraints.add(PathConstraint(pathConstraint, this))\n        }\n\n        skin = skeleton.skin\n        color = RGBAf(skeleton.color)\n        time = skeleton.time\n        scaleX = skeleton.scaleX\n        scaleY = skeleton.scaleY\n\n        updateCache()\n    }\n\n    /** Caches information about bones and constraints. Must be called if the [.getSkin] is modified or if bones,\n     * constraints, or weighted path attachments are added or removed.  */\n    fun updateCache() {\n        val updateCache = this.updateCache\n        updateCache.clear()\n        updateCacheReset.clear()\n\n        val boneCount = bones.size\n        val bones = this.bones\n        for (i in 0 until boneCount) {\n            val bone = bones[i]\n            bone.sorted = bone.data.skinRequired\n            bone.isActive = !bone.sorted\n        }\n        if (skin != null) {\n            val skinBones = skin!!.bones\n            var i = 0\n            val n = skin!!.bones.size\n            while (i < n) {\n                var bone: Bone? = bones[(skinBones[i] as BoneData).index]\n                do {\n                    bone!!.sorted = false\n                    bone.isActive = true\n                    bone = bone.parent\n                } while (bone != null)\n                i++\n            }\n        }\n\n        val ikCount = ikConstraints.size\n        val transformCount = transformConstraints.size\n        val pathCount = pathConstraints.size\n        val ikConstraints = this.ikConstraints\n        val transformConstraints = this.transformConstraints\n        val pathConstraints = this.pathConstraints\n        val constraintCount = ikCount + transformCount + pathCount\n        outer@ for (i in 0 until constraintCount) {\n            for (ii in 0 until ikCount) {\n                val constraint = ikConstraints[ii]\n                if (constraint.data.order == i) {\n                    sortIkConstraint(constraint)\n                    continue@outer\n                }\n            }\n            for (ii in 0 until transformCount) {\n                val constraint = transformConstraints[ii]\n                if (constraint.data.order == i) {\n                    sortTransformConstraint(constraint)\n                    continue@outer\n                }\n            }\n            for (ii in 0 until pathCount) {\n                val constraint = pathConstraints[ii]\n                if (constraint.data.order == i) {\n                    sortPathConstraint(constraint)\n                    continue@outer\n                }\n            }\n        }\n\n        for (i in 0 until boneCount)\n            sortBone(bones[i])\n    }\n\n    private fun sortIkConstraint(constraint: IkConstraint) {\n        constraint.active = constraint.target!!.isActive && (!constraint.data.skinRequired || skin != null && skin!!.constraints.containsIdentity(constraint.data))\n        if (!constraint.active) return\n\n        val target = constraint.target\n        sortBone(target!!)\n\n        val constrained = constraint.bones\n        val parent = constrained.first()\n        sortBone(parent)\n\n        if (constrained.size > 1) {\n            val child = constrained.last()\n            if (!updateCache.containsIdentity(child)) updateCacheReset.add(child)\n        }\n\n        updateCache.add(constraint)\n\n        sortReset(parent.children)\n        constrained.last().sorted = true\n    }\n\n    private fun sortPathConstraint(constraint: PathConstraint) {\n        constraint.isActive = constraint.target!!.bone.isActive && (!constraint.data.skinRequired || skin != null && skin!!.constraints.containsIdentity(constraint.data))\n        if (!constraint.isActive) return\n\n        val slot = constraint.target\n        val slotIndex = slot!!.data.index\n        val slotBone = slot.bone\n        if (skin != null) sortPathConstraintAttachment(skin!!, slotIndex, slotBone)\n        if (data.defaultSkin != null && data.defaultSkin !== skin)\n            sortPathConstraintAttachment(data.defaultSkin, slotIndex, slotBone)\n\n        val attachment = slot.attachment\n        if (attachment is PathAttachment) sortPathConstraintAttachment(attachment, slotBone)\n\n        val constrained = constraint.bones\n        val boneCount = constrained.size\n        for (i in 0 until boneCount)\n            sortBone(constrained[i])\n\n        updateCache.add(constraint)\n\n        for (i in 0 until boneCount)\n            sortReset(constrained[i].children)\n        for (i in 0 until boneCount)\n            constrained[i].sorted = true\n    }\n\n    private fun sortTransformConstraint(constraint: TransformConstraint) {\n        constraint.isActive = constraint.target!!.isActive && (!constraint.data.skinRequired || skin != null && skin!!.constraints.containsIdentity(constraint.data))\n        if (!constraint.isActive) return\n\n        sortBone(constraint.target!!)\n\n        val constrained = constraint.bones\n        val boneCount = constrained.size\n        if (constraint.data.local) {\n            for (i in 0 until boneCount) {\n                val child = constrained[i]\n                sortBone(child.parent!!)\n                if (!updateCache.containsIdentity(child)) updateCacheReset.add(child)\n            }\n        } else {\n            for (i in 0 until boneCount)\n                sortBone(constrained[i])\n        }\n\n        updateCache.add(constraint)\n\n        for (i in 0 until boneCount)\n            sortReset(constrained[i].children)\n        for (i in 0 until boneCount)\n            constrained[i].sorted = true\n    }\n\n    private fun sortPathConstraintAttachment(skin: Skin, slotIndex: Int, slotBone: Bone) {\n        for (entry in skin.attachments.keys)\n            if (entry.slotIndex == slotIndex) sortPathConstraintAttachment(entry.attachment, slotBone)\n    }\n\n    private fun sortPathConstraintAttachment(attachment: Attachment?, slotBone: Bone) {\n        if (attachment !is PathAttachment) return\n        val pathBones = attachment.bones\n        if (pathBones == null)\n            sortBone(slotBone)\n        else {\n            val bones = this.bones\n            var i = 0\n            val n = pathBones.size\n            while (i < n) {\n                var nn = pathBones[i++]\n                nn += i\n                while (i < nn)\n                    sortBone(bones[pathBones[i++]])\n            }\n        }\n    }\n\n    private fun sortBone(bone: Bone) {\n        if (bone.sorted) return\n        val parent = bone.parent\n        if (parent != null) sortBone(parent)\n        bone.sorted = true\n        updateCache.add(bone)\n    }\n\n    private fun sortReset(bones: FastArrayList<Bone>) {\n        var i = 0\n        val n = bones.size\n        while (i < n) {\n            val bone = bones[i]\n            if (!bone.isActive) {\n                i++\n                continue\n            }\n            if (bone.sorted) sortReset(bone.children)\n            bone.sorted = false\n            i++\n        }\n    }\n\n    /** Updates the world transform for each bone and applies all constraints.\n     *\n     *\n     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\n     * Runtimes Guide.  */\n    fun updateWorldTransform() {\n        // This partial update avoids computing the world transform for constrained bones when 1) the bone is not updated\n        // before the constraint, 2) the constraint only needs to access the applied local transform, and 3) the constraint calls\n        // updateWorldTransform.\n        val updateCacheReset = this.updateCacheReset\n        run {\n            var i = 0\n            val n = updateCacheReset.size\n            while (i < n) {\n                val bone = updateCacheReset[i]\n                bone.ax = bone.x\n                bone.ay = bone.y\n                bone.arotation = bone.rotation\n                bone.ascaleX = bone.scaleX\n                bone.ascaleY = bone.scaleY\n                bone.ashearX = bone.shearX\n                bone.ashearY = bone.shearY\n                bone.appliedValid = true\n                i++\n            }\n        }\n        val updateCache = this.updateCache\n        var i = 0\n        val n = updateCache.size\n        while (i < n) {\n            updateCache[i].update()\n            i++\n        }\n    }\n\n    /** Temporarily sets the root bone as a child of the specified bone, then updates the world transform for each bone and applies\n     * all constraints.\n     *\n     *\n     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\n     * Runtimes Guide.  */\n    fun updateWorldTransform(parent: Bone) {\n        // This partial update avoids computing the world transform for constrained bones when 1) the bone is not updated\n        // before the constraint, 2) the constraint only needs to access the applied local transform, and 3) the constraint calls\n        // updateWorldTransform.\n        val updateCacheReset = this.updateCacheReset\n        run {\n            var i = 0\n            val n = updateCacheReset.size\n            while (i < n) {\n                val bone = updateCacheReset[i]\n                bone.ax = bone.x\n                bone.ay = bone.y\n                bone.arotation = bone.rotation\n                bone.ascaleX = bone.scaleX\n                bone.ascaleY = bone.scaleY\n                bone.ashearX = bone.shearX\n                bone.ashearY = bone.shearY\n                bone.appliedValid = true\n                i++\n            }\n        }\n\n        // Apply the parent bone transform to the root bone. The root bone always inherits scale, rotation and reflection.\n        val rootBone = rootBone\n        val pa = parent.a\n        val pb = parent.b\n        val pc = parent.c\n        val pd = parent.d\n        rootBone!!.worldX = pa * x + pb * y + parent.worldX\n        rootBone.worldY = pc * x + pd * y + parent.worldY\n\n        val rotationY = rootBone.rotation + 90f + rootBone.shearY\n        val la = cosDeg(rootBone.rotation + rootBone.shearX) * rootBone.scaleX\n        val lb = cosDeg(rotationY) * rootBone.scaleY\n        val lc = sinDeg(rootBone.rotation + rootBone.shearX) * rootBone.scaleX\n        val ld = sinDeg(rotationY) * rootBone.scaleY\n        rootBone.a = (pa * la + pb * lc) * scaleX\n        rootBone.b = (pa * lb + pb * ld) * scaleX\n        rootBone.c = (pc * la + pd * lc) * scaleY\n        rootBone.d = (pc * lb + pd * ld) * scaleY\n\n        // Update everything except root bone.\n        val updateCache = this.updateCache\n        var i = 0\n        val n = updateCache.size\n        while (i < n) {\n            val updatable = updateCache[i]\n            if (updatable !== rootBone) updatable.update()\n            i++\n        }\n    }\n\n    /** Sets the bones, constraints, slots, and draw order to their setup pose values.  */\n    fun setToSetupPose() {\n        setBonesToSetupPose()\n        setSlotsToSetupPose()\n    }\n\n    /** Sets the bones and constraints to their setup pose values.  */\n    fun setBonesToSetupPose() {\n        val bones = this.bones\n        run {\n            var i = 0\n            val n = bones.size\n            while (i < n) {\n                bones[i].setToSetupPose()\n                i++\n            }\n        }\n\n        val ikConstraints = this.ikConstraints\n        run {\n            var i = 0\n            val n = ikConstraints.size\n            while (i < n) {\n                val constraint = ikConstraints[i]\n                constraint.mix = constraint.data.mix\n                constraint.softness = constraint.data.softness\n                constraint.bendDirection = constraint.data.bendDirection\n                constraint.compress = constraint.data.compress\n                constraint.stretch = constraint.data.stretch\n                i++\n            }\n        }\n\n        val transformConstraints = this.transformConstraints\n        run {\n            var i = 0\n            val n = transformConstraints.size\n            while (i < n) {\n                val constraint = transformConstraints[i]\n                val data = constraint.data\n                constraint.rotateMix = data.rotateMix\n                constraint.translateMix = data.translateMix\n                constraint.scaleMix = data.scaleMix\n                constraint.shearMix = data.shearMix\n                i++\n            }\n        }\n\n        val pathConstraints = this.pathConstraints\n        var i = 0\n        val n = pathConstraints.size\n        while (i < n) {\n            val constraint = pathConstraints[i]\n            val data = constraint.data\n            constraint.position = data.position\n            constraint.spacing = data.spacing\n            constraint.rotateMix = data.rotateMix\n            constraint.translateMix = data.translateMix\n            i++\n        }\n    }\n\n    /** Sets the slots and draw order to their setup pose values.  */\n    fun setSlotsToSetupPose() {\n        val slots = this.slots\n        arraycopy(slots, 0, drawOrder, 0, slots.size)\n        var i = 0\n        val n = slots.size\n        while (i < n) {\n            slots[i].setToSetupPose()\n            i++\n        }\n    }\n\n    /** Finds a bone by comparing each bone's name. It is more efficient to cache the results of this method than to call it\n     * repeatedly.\n     * @return May be null.\n     */\n    fun findBone(boneName: String): Bone? {\n        val bones = this.bones\n        for (i in 0 until bones.size) {\n            val bone = bones[i]\n            if (bone.data.name == boneName) return bone\n        }\n        return null\n    }\n\n    /** Finds a slot by comparing each slot's name. It is more efficient to cache the results of this method than to call it\n     * repeatedly.\n     * @return May be null.\n     */\n    fun findSlot(slotName: String): Slot? {\n        val slots = this.slots\n        var i = 0\n        val n = slots.size\n        while (i < n) {\n            val slot = slots[i]\n            if (slot.data.name == slotName) return slot\n            i++\n        }\n        return null\n    }\n\n    /** The skeleton's slots in the order they should be drawn. The returned array may be modified to change the draw order.  */\n    fun getDrawOrder(): FastArrayList<Slot> {\n        return drawOrder\n    }\n\n    fun setDrawOrder(drawOrder: FastArrayList<Slot>) {\n        this.drawOrder = drawOrder\n    }\n\n    /** The skeleton's current skin.\n     * @return May be null.\n     */\n    fun getSkin(): Skin? {\n        return skin\n    }\n\n    /** Sets a skin by name.\n     *\n     *\n     * See [.setSkin].  */\n    fun setSkin(skinName: String) {\n        val skin = data.findSkin(skinName) ?: throw IllegalArgumentException(\"Skin not found: $skinName\")\n        setSkin(skin)\n    }\n\n    /** Sets the skin used to look up attachments before looking in the [default skin][SkeletonData.getDefaultSkin]. If the\n     * skin is changed, [.updateCache] is called.\n     *\n     *\n     * Attachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was no\n     * old skin, each slot's setup mode attachment is attached from the new skin.\n     *\n     *\n     * After changing the skin, the visible attachments can be reset to those attached in the setup pose by calling\n     * [.setSlotsToSetupPose]. Also, often [AnimationState.apply] is called before the next time the\n     * skeleton is rendered to allow any attachment keys in the current animation(s) to hide or show attachments from the new skin.\n     * @param newSkin May be null.\n     */\n    fun setSkin(newSkin: Skin?) {\n        if (newSkin === skin) return\n        if (newSkin != null) {\n            if (skin != null)\n                newSkin.attachAll(this, skin!!)\n            else {\n                val slots = this.slots\n                var i = 0\n                val n = slots.size\n                while (i < n) {\n                    val slot = slots[i]\n                    val name = slot.data.attachmentName\n                    if (name != null) {\n                        val attachment = newSkin.getAttachment(i, name)\n                        if (attachment != null) slot.setAttachment(attachment)\n                    }\n                    i++\n                }\n            }\n        }\n        skin = newSkin\n        updateCache()\n    }\n\n    /** Finds an attachment by looking in the [.skin] and [SkeletonData.defaultSkin] using the slot name and attachment\n     * name.\n     *\n     *\n     * See [.getAttachment].\n     * @return May be null.\n     */\n    fun getAttachment(slotName: String, attachmentName: String): Attachment? {\n        val slot = data.findSlot(slotName) ?: throw IllegalArgumentException(\"Slot not found: $slotName\")\n        return getAttachment(slot.index, attachmentName)\n    }\n\n    /** Finds an attachment by looking in the [.skin] and [SkeletonData.defaultSkin] using the slot index and\n     * attachment name. First the skin is checked and if the attachment was not found, the default skin is checked.\n     *\n     *\n     * See [Runtime skins](http://esotericsoftware.com/spine-runtime-skins) in the Spine Runtimes Guide.\n     * @return May be null.\n     */\n    fun getAttachment(slotIndex: Int, attachmentName: String): Attachment? {\n        if (skin != null) {\n            val attachment = skin!!.getAttachment(slotIndex, attachmentName)\n            if (attachment != null) return attachment\n        }\n        return if (data.defaultSkin != null) data.defaultSkin.getAttachment(slotIndex, attachmentName) else null\n    }\n\n    /** A convenience method to set an attachment by finding the slot with [.findSlot], finding the attachment with\n     * [.getAttachment], then setting the slot's [Slot.attachment].\n     * @param attachmentName May be null to clear the slot's attachment.\n     */\n    fun setAttachment(slotName: String, attachmentName: String?) {\n        val slot = findSlot(slotName) ?: throw IllegalArgumentException(\"Slot not found: $slotName\")\n        var attachment: Attachment? = null\n        if (attachmentName != null) {\n            attachment = getAttachment(slot.data.index, attachmentName)\n                ?: error(\"Attachment not found: $attachmentName, for slot: $slotName\")\n        }\n        slot.setAttachment(attachment)\n    }\n\n    /** Finds an IK constraint by comparing each IK constraint's name. It is more efficient to cache the results of this method\n     * than to call it repeatedly.\n     * @return May be null.\n     */\n    fun findIkConstraint(constraintName: String): IkConstraint? {\n        val ikConstraints = this.ikConstraints\n        var i = 0\n        val n = ikConstraints.size\n        while (i < n) {\n            val ikConstraint = ikConstraints[i]\n            if (ikConstraint.data.name == constraintName) return ikConstraint\n            i++\n        }\n        return null\n    }\n\n    /** Finds a transform constraint by comparing each transform constraint's name. It is more efficient to cache the results of\n     * this method than to call it repeatedly.\n     * @return May be null.\n     */\n    fun findTransformConstraint(constraintName: String): TransformConstraint? {\n        val transformConstraints = this.transformConstraints\n        var i = 0\n        val n = transformConstraints.size\n        while (i < n) {\n            val constraint = transformConstraints[i]\n            if (constraint.data.name == constraintName) return constraint\n            i++\n        }\n        return null\n    }\n\n    /** Finds a path constraint by comparing each path constraint's name. It is more efficient to cache the results of this method\n     * than to call it repeatedly.\n     * @return May be null.\n     */\n    fun findPathConstraint(constraintName: String): PathConstraint? {\n        val pathConstraints = this.pathConstraints\n        var i = 0\n        val n = pathConstraints.size\n        while (i < n) {\n            val constraint = pathConstraints[i]\n            if (constraint.data.name == constraintName) return constraint\n            i++\n        }\n        return null\n    }\n\n    /** Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose.\n     * @param offset An output value, the distance from the skeleton origin to the bottom left corner of the AABB.\n     * @param size An output value, the width and height of the AABB.\n     * @param temp Working memory to temporarily store attachments' computed world vertices.\n     */\n    fun getBounds(offset: SpineVector2, size: SpineVector2, temp: FloatArrayList) {\n        val drawOrder = this.drawOrder\n        var minX = Int.MAX_VALUE.toFloat()\n        var minY = Int.MAX_VALUE.toFloat()\n        var maxX = Int.MIN_VALUE.toFloat()\n        var maxY = Int.MIN_VALUE.toFloat()\n        var i = 0\n        val n = drawOrder.size\n        while (i < n) {\n            val slot = drawOrder[i]\n            if (!slot.bone.isActive) {\n                i++\n                continue\n            }\n            var verticesLength = 0\n            var vertices: FloatArray? = null\n            val attachment = slot.attachment\n            if (attachment is RegionAttachment) {\n                verticesLength = 8\n                vertices = temp.setSize(8)\n                attachment.computeWorldVertices(slot.bone, vertices, 0, 2)\n            } else if (attachment is MeshAttachment) {\n                verticesLength = attachment.worldVerticesLength\n                vertices = temp.setSize(verticesLength)\n                attachment.computeWorldVertices(slot, 0, verticesLength, vertices, 0, 2)\n            }\n            if (vertices != null) {\n                var ii = 0\n                while (ii < verticesLength) {\n                    val x = vertices[ii]\n                    val y = vertices[ii + 1]\n                    minX = min(minX, x)\n                    minY = min(minY, y)\n                    maxX = max(maxX, x)\n                    maxY = max(maxY, y)\n                    ii += 2\n                }\n            }\n            i++\n        }\n        offset[minX] = minY\n        size[maxX - minX] = maxY - minY\n    }\n\n    /** The color to tint all the skeleton's attachments.  */\n    fun getColor(): RGBAf {\n        return color\n    }\n\n    /** A convenience method for setting the skeleton color. The color can also be set by modifying [.getColor].  */\n    fun setColor(color: RGBAf) {\n        this.color.setTo(color)\n    }\n\n    fun setScale(scaleX: Float, scaleY: Float) {\n        this.scaleX = scaleX\n        this.scaleY = scaleY\n    }\n\n    /** Sets the skeleton X and Y position, which is added to the root bone worldX and worldY position.  */\n    fun setPosition(x: Float, y: Float) {\n        this.x = x\n        this.y = y\n    }\n\n    /** Increments the skeleton's [.time].  */\n    fun update(delta: Float) {\n        time += delta\n    }\n\n    override fun toString(): String {\n        return if (data.name != null) data.name!! else super.toString()\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine\n\nimport com.esotericsoftware.spine.Animation.*\nimport com.esotericsoftware.spine.BoneData.*\nimport com.esotericsoftware.spine.PathConstraintData.*\nimport com.esotericsoftware.spine.SkeletonJson.*\nimport com.esotericsoftware.spine.attachments.*\nimport com.esotericsoftware.spine.utils.*\nimport com.soywiz.kds.*\nimport com.soywiz.korim.atlas.*\nimport com.soywiz.korim.color.*\nimport com.soywiz.korio.file.*\nimport kotlin.math.*\n\n/** Loads skeleton data in the Spine binary format.\n *\n *\n * See [Spine binary format](http://esotericsoftware.com/spine-binary-format) and\n * [JSON and binary data](http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data) in the Spine\n * Runtimes Guide.  */\nclass SkeletonBinary {\n\n    private val attachmentLoader: AttachmentLoader\n\n    /** Scales bone positions, image sizes, and translations as they are loaded. This allows different size images to be used at\n     * runtime than were used in Spine.\n     *\n     *\n     * See [Scaling](http://esotericsoftware.com/spine-loading-skeleton-data#Scaling) in the Spine Runtimes Guide.  */\n    var scale = 1f\n        set(scale) {\n            require(scale != 0f) { \"scale cannot be 0.\" }\n            field = scale\n        }\n    //private val linkedMeshes = FastArrayList<LinkedMesh>()\n    private val linkedMeshes by lazy { FastArrayList<LinkedMesh>() }\n\n    constructor(atlas: Atlas) {\n        attachmentLoader = AtlasAttachmentLoader(atlas)\n    }\n\n    constructor(attachmentLoader: AttachmentLoader) {\n        this.attachmentLoader = attachmentLoader\n    }\n\n    suspend fun readSkeletonData(file: VfsFile): SkeletonData = readSkeletonData(file.readAll(), file.fullName)\n\n    fun readSkeletonData(file: ByteArray, fileName: String = \"unknown\"): SkeletonData {\n        val scale = this.scale\n\n        val skeletonData = SkeletonData()\n        skeletonData.name = PathInfo(fileName).baseNameWithoutExtension\n\n        val input = SkeletonInput(file)\n        try {\n            skeletonData.hash = input.readString()\n            if (skeletonData.hash!!.isEmpty()) skeletonData.hash = null\n            skeletonData.version = input.readString()\n            if (skeletonData.version!!.isEmpty()) skeletonData.version = null\n            if (\"3.8.75\" == skeletonData.version)\n                throw RuntimeException(\"Unsupported skeleton data, please export with a newer version of Spine.\")\n            skeletonData.x = input.readFloat()\n            skeletonData.y = input.readFloat()\n            skeletonData.width = input.readFloat()\n            skeletonData.height = input.readFloat()\n\n            val nonessential = input.readBoolean()\n            if (nonessential) {\n                skeletonData.fps = input.readFloat()\n\n                skeletonData.imagesPath = input.readString()\n                if (skeletonData.imagesPath!!.isEmpty()) skeletonData.imagesPath = null\n\n                skeletonData.audioPath = input.readString()\n                if (skeletonData.audioPath!!.isEmpty()) skeletonData.audioPath = null\n            }\n\n            var n: Int = 0\n\n            // Strings.\n            run {\n                input.strings = FastArrayList<String>(input.readInt(true).also { n = it })\n                val o = input.strings!!.setSize(n)\n                for (i in 0 until n)\n                    o.setAndGrow(i, input.readString()!!)\n            }\n\n            // Bones.\n            run {\n                val o = skeletonData.bones.setSize(input.readInt(true).also { n = it })\n                for (i in 0 until n) {\n                    val name = input.readString()!!\n                    val parent = if (i == 0) null else skeletonData.bones[input.readInt(true)]\n                    val data = BoneData(i, name, parent)\n                    data.rotation = input.readFloat()\n                    data.x = input.readFloat() * scale\n                    data.y = input.readFloat() * scale\n                    data.scaleX = input.readFloat()\n                    data.scaleY = input.readFloat()\n                    data.shearX = input.readFloat()\n                    data.shearY = input.readFloat()\n                    data.length = input.readFloat() * scale\n                    data.transformMode = TransformMode.values[input.readInt(true)]\n                    data.skinRequired = input.readBoolean()\n                    if (nonessential) rgba8888ToColor(data.color, input.readInt())\n                    o.setAndGrow(i, data)\n                }\n            }\n\n            // Slots.\n            run {\n                val o = skeletonData.slots.setSize(input.readInt(true).also { n = it })\n                for (i in 0 until n) {\n                    val slotName = input.readString()!!\n                    val boneData = skeletonData.bones[input.readInt(true)]\n                    val data = SlotData(i, slotName, boneData)\n                    rgba8888ToColor(data.color, input.readInt())\n\n                    val darkColor = input.readInt()\n                    if (darkColor != -1) rgb888ToColor(RGBAf().also { data.darkColor = it }, darkColor)\n\n                    data.attachmentName = input.readStringRef()\n                    data.blendMode = BlendMode.values[input.readInt(true)]\n                    o.setAndGrow(i, data)\n                }\n            }\n\n            // IK constraints.\n            run {\n                val o = skeletonData.ikConstraints.setSize(input.readInt(true).also { n = it })\n                run {\n                    var i = 0\n                    var nn: Int\n                    while (i < n) {\n                        val data = IkConstraintData(input.readString()!!)\n                        data.order = input.readInt(true)\n                        data.skinRequired = input.readBoolean()\n                        val bones = data.bones.setSize(input.readInt(true).also { nn = it })\n                        for (ii in 0 until nn)\n                            bones.setAndGrow(ii, skeletonData.bones[input.readInt(true)])\n                        data.target = skeletonData.bones[input.readInt(true)]\n                        data.mix = input.readFloat()\n                        data.softness = input.readFloat() * scale\n                        data.bendDirection = input.readByte().toInt()\n                        data.compress = input.readBoolean()\n                        data.stretch = input.readBoolean()\n                        data.uniform = input.readBoolean()\n                        o.setAndGrow(i, data)\n                        i++\n                    }\n                }\n            }\n\n            // Transform constraints.\n            run {\n                val o = skeletonData.transformConstraints.setSize(input.readInt(true).also { n = it })\n                run {\n                    var i = 0\n                    var nn: Int\n                    while (i < n) {\n                        val data = TransformConstraintData(input.readString()!!)\n                        data.order = input.readInt(true)\n                        data.skinRequired = input.readBoolean()\n                        val bones = data.bones.setSize(input.readInt(true).also { nn = it })\n                        for (ii in 0 until nn)\n                            bones.setAndGrow(ii, skeletonData.bones[input.readInt(true)])\n                        data.target = skeletonData.bones[input.readInt(true)]\n                        data.local = input.readBoolean()\n                        data.relative = input.readBoolean()\n                        data.offsetRotation = input.readFloat()\n                        data.offsetX = input.readFloat() * scale\n                        data.offsetY = input.readFloat() * scale\n                        data.offsetScaleX = input.readFloat()\n                        data.offsetScaleY = input.readFloat()\n                        data.offsetShearY = input.readFloat()\n                        data.rotateMix = input.readFloat()\n                        data.translateMix = input.readFloat()\n                        data.scaleMix = input.readFloat()\n                        data.shearMix = input.readFloat()\n                        o.setAndGrow(i, data)\n                        i++\n                    }\n                }\n            }\n\n            // Path constraints.\n            run {\n                val o = skeletonData.pathConstraints.setSize(input.readInt(true).also { n = it })\n                run {\n                    var i = 0\n                    var nn: Int\n                    while (i < n) {\n                        val data = PathConstraintData(input.readString()!!)\n                        data.order = input.readInt(true)\n                        data.skinRequired = input.readBoolean()\n                        val bones = data.bones.setSize(input.readInt(true).also { nn = it })\n                        for (ii in 0 until nn)\n                            bones.setAndGrow(ii, skeletonData.bones[input.readInt(true)])\n                        data.target = skeletonData.slots[input.readInt(true)]\n                        data.positionMode = PositionMode.values[input.readInt(true)]\n                        data.spacingMode = SpacingMode.values[input.readInt(true)]\n                        data.rotateMode = RotateMode.values[input.readInt(true)]\n                        data.offsetRotation = input.readFloat()\n                        data.position = input.readFloat()\n                        if (data.positionMode == PositionMode.fixed) data.position *= scale\n                        data.spacing = input.readFloat()\n                        if (data.spacingMode == SpacingMode.length || data.spacingMode == SpacingMode.fixed) data.spacing *= scale\n                        data.rotateMix = input.readFloat()\n                        data.translateMix = input.readFloat()\n                        o.setAndGrow(i, data)\n                        i++\n                    }\n                }\n            }\n\n            // Default skin.\n            val defaultSkin = readSkin(input, skeletonData, true, nonessential)\n            if (defaultSkin != null) {\n                skeletonData.defaultSkin = defaultSkin\n                skeletonData.skins.add(defaultSkin)\n            }\n\n            // Skins.\n            run {\n                var i = skeletonData.skins.size\n                val o = skeletonData.skins.setSize((i + input.readInt(true)).also { n = it })\n                while (i < n) {\n                    o.setAndGrow(i, readSkin(input, skeletonData, false, nonessential)!!)\n                    i++\n                }\n            }\n\n            // Linked meshes.\n            n = linkedMeshes.size\n            for (i in 0 until n) {\n                val linkedMesh = linkedMeshes.get(i)\n                val skin = (if (linkedMesh.skin == null) skeletonData.defaultSkin else skeletonData.findSkin(linkedMesh.skin))\n                        ?: error(\"Skin not found: \" + linkedMesh.skin!!)\n                val parent = skin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent!!)\n                        ?: error(\"Parent mesh not found: \" + linkedMesh.parent)\n                linkedMesh.mesh.deformAttachment = if (linkedMesh.inheritDeform) parent as VertexAttachment else linkedMesh.mesh\n                linkedMesh.mesh.parentMesh = parent as MeshAttachment\n                linkedMesh.mesh.updateUVs()\n            }\n            linkedMeshes.clear()\n\n            // Events.\n            run {\n                val o = skeletonData.events.setSize(input.readInt(true).also { n = it })\n                for (i in 0 until n) {\n                    val data = EventData(input.readStringRef()!!)\n                    data.int = input.readInt(false)\n                    data.float = input.readFloat()\n                    data.stringValue = input.readString()!!\n                    data.audioPath = input.readString()\n                    if (data.audioPath != null) {\n                        data.volume = input.readFloat()\n                        data.balance = input.readFloat()\n                    }\n                    o.setAndGrow(i, data)\n                }\n            }\n\n            // Animations.\n            run {\n                val o = skeletonData.animations.setSize(input.readInt(true).also { n = it })\n                for (i in 0 until n)\n                    o.setAndGrow(i, readAnimation(input, input.readString(), skeletonData))\n            }\n\n        } catch (ex: Throwable) {\n            throw RuntimeException(\"Error reading skeleton file.\", ex)\n        } finally {\n            try {\n                input.close()\n            } catch (ignored: Throwable) {\n            }\n\n        }\n        return skeletonData\n    }\n\n    private fun rgb888ToColor(color: RGBAf, value: Int) {\n        color.r = (value and 0x00ff0000 ushr 16) / 255f\n        color.g = (value and 0x0000ff00 ushr 8) / 255f\n        color.b = (value and 0x000000ff) / 255f\n    }\n\n    private fun rgba8888ToColor(color: RGBAf, value: Int) {\n        color.r = (value and -0x1000000 ushr 24) / 255f\n        color.g = (value and 0x00ff0000 ushr 16) / 255f\n        color.b = (value and 0x0000ff00 ushr 8) / 255f\n        color.a = (value and 0x000000ff) / 255f\n    }\n\n    /** @return May be null.\n     */\n    \n    private fun readSkin(input: SkeletonInput, skeletonData: SkeletonData, defaultSkin: Boolean, nonessential: Boolean): Skin? {\n\n        val skin: Skin\n        val slotCount: Int\n        if (defaultSkin) {\n            slotCount = input.readInt(true)\n            if (slotCount == 0) return null\n            skin = Skin(\"default\")\n        } else {\n            skin = Skin(input.readStringRef()!!)\n            val bones = skin.bones.setSize(input.readInt(true))\n            run {\n                var i = 0\n                val n = skin.bones.size\n                while (i < n) {\n                    bones.setAndGrow(i, skeletonData.bones[input.readInt(true)])\n                    i++\n                }\n            }\n\n            run {\n                var i = 0\n                val n = input.readInt(true)\n                while (i < n) {\n                    skin.constraints.add(skeletonData.ikConstraints[input.readInt(true)])\n                    i++\n                }\n            }\n            run {\n                var i = 0\n                val n = input.readInt(true)\n                while (i < n) {\n                    skin.constraints.add(skeletonData.transformConstraints[input.readInt(true)])\n                    i++\n                }\n            }\n            var i = 0\n            val n = input.readInt(true)\n            while (i < n) {\n                skin.constraints.add(skeletonData.pathConstraints[input.readInt(true)])\n                i++\n            }\n            skin.constraints.shrink()\n\n            slotCount = input.readInt(true)\n        }\n\n        for (i in 0 until slotCount) {\n            val slotIndex = input.readInt(true)\n            var ii = 0\n            val nn = input.readInt(true)\n            while (ii < nn) {\n                val name = input.readStringRef()!!\n                val attachment = readAttachment(input, skeletonData, skin, slotIndex, name, nonessential)\n                if (attachment != null) skin.setAttachment(slotIndex, name, attachment)\n                ii++\n            }\n        }\n        return skin\n    }\n\n    \n    private fun readAttachment(input: SkeletonInput, skeletonData: SkeletonData, skin: Skin, slotIndex: Int,\n                               attachmentName: String?, nonessential: Boolean): Attachment? {\n        val scale = this.scale\n\n        var name = input.readStringRef()\n        if (name == null) name = attachmentName\n\n        val type = AttachmentType.values[input.readByte().toInt()]\n        when (type) {\n            AttachmentType.region -> {\n                var path = input.readStringRef()\n                val rotation = input.readFloat()\n                val x = input.readFloat()\n                val y = input.readFloat()\n                val scaleX = input.readFloat()\n                val scaleY = input.readFloat()\n                val width = input.readFloat()\n                val height = input.readFloat()\n                val color = input.readInt()\n\n                if (path == null) path = name\n                val region = attachmentLoader.newRegionAttachment(skin, name!!, path!!) ?: return null\n                region.path = path\n                region.x = x * scale\n                region.y = y * scale\n                region.scaleX = scaleX\n                region.scaleY = scaleY\n                region.rotation = rotation\n                region.width = width * scale\n                region.height = height * scale\n                rgba8888ToColor(region.color, color)\n                region.updateOffset()\n                return region\n            }\n            AttachmentType.boundingbox -> {\n                val vertexCount = input.readInt(true)\n                val vertices = readVertices(input, vertexCount)\n                val color = if (nonessential) input.readInt() else 0\n\n                val box = attachmentLoader.newBoundingBoxAttachment(skin, name!!) ?: return null\n                box.worldVerticesLength = vertexCount shl 1\n                box.vertices = vertices.vertices\n                box.bones = vertices.bones\n                if (nonessential) rgba8888ToColor(box.color, color)\n                return box\n            }\n            AttachmentType.mesh -> {\n                var path = input.readStringRef()\n                val color = input.readInt()\n                val vertexCount = input.readInt(true)\n                val uvs = readFloatArray(input, vertexCount shl 1, 1f)\n                val triangles = readShortArray(input)\n                val vertices = readVertices(input, vertexCount)\n                val hullLength = input.readInt(true)\n                var edges: ShortArray? = null\n                var width = 0f\n                var height = 0f\n                if (nonessential) {\n                    edges = readShortArray(input)\n                    width = input.readFloat()\n                    height = input.readFloat()\n                }\n\n                if (path == null) path = name\n                val mesh = attachmentLoader.newMeshAttachment(skin, name!!, path!!) ?: return null\n                mesh.path = path\n                rgba8888ToColor(mesh.color, color)\n                mesh.bones = vertices.bones\n                mesh.vertices = vertices.vertices\n                mesh.worldVerticesLength = vertexCount shl 1\n                mesh.triangles = triangles\n                mesh.regionUVs = uvs\n                mesh.updateUVs()\n                mesh.hullLength = hullLength shl 1\n                if (nonessential) {\n                    mesh.edges = edges\n                    mesh.width = width * scale\n                    mesh.height = height * scale\n                }\n                return mesh\n            }\n            AttachmentType.linkedmesh -> {\n                var path = input.readStringRef()\n                val color = input.readInt()\n                val skinName = input.readStringRef()\n                val parent = input.readStringRef()\n                val inheritDeform = input.readBoolean()\n                var width = 0f\n                var height = 0f\n                if (nonessential) {\n                    width = input.readFloat()\n                    height = input.readFloat()\n                }\n\n                if (path == null) path = name\n                val mesh = attachmentLoader.newMeshAttachment(skin, name!!, path!!) ?: return null\n                mesh.path = path\n                rgba8888ToColor(mesh.color, color)\n                if (nonessential) {\n                    mesh.width = width * scale\n                    mesh.height = height * scale\n                }\n                linkedMeshes.add(LinkedMesh(mesh, skinName, slotIndex, parent, inheritDeform))\n                return mesh\n            }\n            AttachmentType.path -> {\n                val closed = input.readBoolean()\n                val constantSpeed = input.readBoolean()\n                val vertexCount = input.readInt(true)\n                val vertices = readVertices(input, vertexCount)\n                val lengths = FloatArray(vertexCount / 3)\n                var i = 0\n                val n = lengths.size\n                while (i < n) {\n                    lengths[i] = input.readFloat() * scale\n                    i++\n                }\n                val color = if (nonessential) input.readInt() else 0\n\n                val path = attachmentLoader.newPathAttachment(skin, name!!) ?: return null\n                path.closed = closed\n                path.constantSpeed = constantSpeed\n                path.worldVerticesLength = vertexCount shl 1\n                path.vertices = vertices.vertices\n                path.bones = vertices.bones\n                path.lengths = lengths\n                if (nonessential) rgba8888ToColor(path.color, color)\n                return path\n            }\n            AttachmentType.point -> {\n                val rotation = input.readFloat()\n                val x = input.readFloat()\n                val y = input.readFloat()\n                val color = if (nonessential) input.readInt() else 0\n\n                val point = attachmentLoader.newPointAttachment(skin, name!!) ?: return null\n                point.x = x * scale\n                point.y = y * scale\n                point.rotation = rotation\n                if (nonessential) rgba8888ToColor(point.color, color)\n                return point\n            }\n            AttachmentType.clipping -> {\n                val endSlotIndex = input.readInt(true)\n                val vertexCount = input.readInt(true)\n                val vertices = readVertices(input, vertexCount)\n                val color = if (nonessential) input.readInt() else 0\n\n                val clip = attachmentLoader.newClippingAttachment(skin, name!!) ?: return null\n                clip.endSlot = skeletonData.slots[endSlotIndex]\n                clip.worldVerticesLength = vertexCount shl 1\n                clip.vertices = vertices.vertices\n                clip.bones = vertices.bones\n                if (nonessential) rgba8888ToColor(clip.color, color)\n                return clip\n            }\n        }\n        return null\n    }\n\n    \n    private fun readVertices(input: SkeletonInput, vertexCount: Int): Vertices {\n        val verticesLength = vertexCount shl 1\n        val vertices = Vertices()\n        if (!input.readBoolean()) {\n            vertices.vertices = readFloatArray(input, verticesLength, this.scale)\n            return vertices\n        }\n        val weights = FloatArrayList(verticesLength * 3 * 3)\n        val bonesArray = IntArrayList(verticesLength * 3)\n        for (i in 0 until vertexCount) {\n            val boneCount = input.readInt(true)\n            bonesArray.add(boneCount)\n            for (ii in 0 until boneCount) {\n                bonesArray.add(input.readInt(true))\n                weights.add(input.readFloat() * this.scale)\n                weights.add(input.readFloat() * this.scale)\n                weights.add(input.readFloat())\n            }\n        }\n        vertices.vertices = weights.toArray()\n        vertices.bones = bonesArray.toArray()\n        return vertices\n    }\n\n    private fun readFloatArray(input: SkeletonInput, n: Int, scale: Float): FloatArray {\n        val array = FloatArray(n)\n        if (scale == 1f) {\n            for (i in 0 until n)\n                array[i] = input.readFloat()\n        } else {\n            for (i in 0 until n)\n                array[i] = input.readFloat() * scale\n        }\n        return array\n    }\n\n    private fun readShortArray(input: SkeletonInput): ShortArray {\n        val n = input.readInt(true)\n        val array = ShortArray(n)\n        for (i in 0 until n)\n            array[i] = input.readShort()\n        return array\n    }\n\n    private fun readAnimation(input: SkeletonInput, name: String?, skeletonData: SkeletonData): Animation {\n        val timelines = FastArrayList<Timeline>(32)\n        val scale = this.scale\n        var duration = 0f\n\n        try {\n            // Slot timelines.\n            run {\n                var i = 0\n                val n = input.readInt(true)\n                while (i < n) {\n                    val slotIndex = input.readInt(true)\n                    var ii = 0\n                    val nn = input.readInt(true)\n                    while (ii < nn) {\n                        val timelineType = input.readByte().toInt()\n                        val frameCount = input.readInt(true)\n                        when (timelineType) {\n                            SLOT_ATTACHMENT -> {\n                                val timeline = AttachmentTimeline(frameCount)\n                                timeline.slotIndex = slotIndex\n                                for (frameIndex in 0 until frameCount)\n                                    timeline.setFrame(frameIndex, input.readFloat(), input.readStringRef())\n                                timelines.add(timeline)\n                                duration = max(duration, timeline.frames[frameCount - 1])\n                            }\n                            SLOT_COLOR -> {\n                                val timeline = ColorTimeline(frameCount)\n                                timeline.slotIndex = slotIndex\n                                for (frameIndex in 0 until frameCount) {\n                                    val time = input.readFloat()\n                                    rgba8888ToColor(tempColor1, input.readInt())\n                                    timeline.setFrame(frameIndex, time, tempColor1.r, tempColor1.g, tempColor1.b, tempColor1.a)\n                                    if (frameIndex < frameCount - 1) readCurve(input, frameIndex, timeline)\n                                }\n                                timelines.add(timeline)\n                                duration = max(duration, timeline.frames[(frameCount - 1) * ColorTimeline.ENTRIES])\n                            }\n                            SLOT_TWO_COLOR -> {\n                                val timeline = TwoColorTimeline(frameCount)\n                                timeline.slotIndex = slotIndex\n                                for (frameIndex in 0 until frameCount) {\n                                    val time = input.readFloat()\n                                    rgba8888ToColor(tempColor1, input.readInt())\n                                    rgb888ToColor(tempColor2, input.readInt())\n                                    timeline.setFrame(frameIndex, time, tempColor1.r, tempColor1.g, tempColor1.b, tempColor1.a, tempColor2.r,\n                                            tempColor2.g, tempColor2.b)\n                                    if (frameIndex < frameCount - 1) readCurve(input, frameIndex, timeline)\n                                }\n                                timelines.add(timeline)\n                                duration = max(duration, timeline.frames[(frameCount - 1) * TwoColorTimeline.ENTRIES])\n                            }\n                        }\n                        ii++\n                    }\n                    i++\n                }\n            }\n\n            // Bone timelines.\n            run {\n                var i = 0\n                val n = input.readInt(true)\n                while (i < n) {\n                    val boneIndex = input.readInt(true)\n                    var ii = 0\n                    val nn = input.readInt(true)\n                    while (ii < nn) {\n                        val timelineType = input.readByte().toInt()\n                        val frameCount = input.readInt(true)\n                        when (timelineType) {\n                            BONE_ROTATE -> {\n                                val timeline = RotateTimeline(frameCount)\n                                timeline.boneIndex = boneIndex\n                                for (frameIndex in 0 until frameCount) {\n                                    timeline.setFrame(frameIndex, input.readFloat(), input.readFloat())\n                                    if (frameIndex < frameCount - 1) readCurve(input, frameIndex, timeline)\n                                }\n                                timelines.add(timeline)\n                                duration = max(duration, timeline.frames[(frameCount - 1) * RotateTimeline.ENTRIES])\n                            }\n                            BONE_TRANSLATE, BONE_SCALE, BONE_SHEAR -> {\n                                val timeline: TranslateTimeline\n                                var timelineScale = 1f\n                                if (timelineType == BONE_SCALE)\n                                    timeline = ScaleTimeline(frameCount)\n                                else if (timelineType == BONE_SHEAR)\n                                    timeline = ShearTimeline(frameCount)\n                                else {\n                                    timeline = TranslateTimeline(frameCount)\n                                    timelineScale = scale\n                                }\n                                timeline.boneIndex = boneIndex\n                                for (frameIndex in 0 until frameCount) {\n                                    timeline.setFrame(frameIndex, input.readFloat(), input.readFloat() * timelineScale,\n                                            input.readFloat() * timelineScale)\n                                    if (frameIndex < frameCount - 1) readCurve(input, frameIndex, timeline)\n                                }\n                                timelines.add(timeline)\n                                duration = max(duration, timeline.frames[(frameCount - 1) * TranslateTimeline.ENTRIES])\n                            }\n                        }\n                        ii++\n                    }\n                    i++\n                }\n            }\n\n            // IK constraint timelines.\n            run {\n                var i = 0\n                val n = input.readInt(true)\n                while (i < n) {\n                    val index = input.readInt(true)\n                    val frameCount = input.readInt(true)\n                    val timeline = IkConstraintTimeline(frameCount)\n                    timeline.ikConstraintIndex = index\n                    for (frameIndex in 0 until frameCount) {\n                        timeline.setFrame(frameIndex, input.readFloat(), input.readFloat(), input.readFloat() * scale, input.readByte().toInt(),\n                                input.readBoolean(), input.readBoolean())\n                        if (frameIndex < frameCount - 1) readCurve(input, frameIndex, timeline)\n                    }\n                    timelines.add(timeline)\n                    duration = max(duration, timeline.frames[(frameCount - 1) * IkConstraintTimeline.ENTRIES])\n                    i++\n                }\n            }\n\n            // Transform constraint timelines.\n            run {\n                var i = 0\n                val n = input.readInt(true)\n                while (i < n) {\n                    val index = input.readInt(true)\n                    val frameCount = input.readInt(true)\n                    val timeline = TransformConstraintTimeline(frameCount)\n                    timeline.transformConstraintIndex = index\n                    for (frameIndex in 0 until frameCount) {\n                        timeline.setFrame(frameIndex, input.readFloat(), input.readFloat(), input.readFloat(), input.readFloat(),\n                                input.readFloat())\n                        if (frameIndex < frameCount - 1) readCurve(input, frameIndex, timeline)\n                    }\n                    timelines.add(timeline)\n                    duration = max(duration, timeline.frames[(frameCount - 1) * TransformConstraintTimeline.ENTRIES])\n                    i++\n                }\n            }\n\n            // Path constraint timelines.\n            run {\n                var i = 0\n                val n = input.readInt(true)\n                while (i < n) {\n                    val index = input.readInt(true)\n                    val data = skeletonData.pathConstraints[index]\n                    var ii = 0\n                    val nn = input.readInt(true)\n                    while (ii < nn) {\n                        val timelineType = input.readByte().toInt()\n                        val frameCount = input.readInt(true)\n                        when (timelineType) {\n                            PATH_POSITION, PATH_SPACING -> {\n                                val timeline: PathConstraintPositionTimeline\n                                var timelineScale = 1f\n                                if (timelineType == PATH_SPACING) {\n                                    timeline = PathConstraintSpacingTimeline(frameCount)\n                                    if (data.spacingMode == SpacingMode.length || data.spacingMode == SpacingMode.fixed) timelineScale = scale\n                                } else {\n                                    timeline = PathConstraintPositionTimeline(frameCount)\n                                    if (data.positionMode == PositionMode.fixed) timelineScale = scale\n                                }\n                                timeline.pathConstraintIndex = index\n                                for (frameIndex in 0 until frameCount) {\n                                    timeline.setFrame(frameIndex, input.readFloat(), input.readFloat() * timelineScale)\n                                    if (frameIndex < frameCount - 1) readCurve(input, frameIndex, timeline)\n                                }\n                                timelines.add(timeline)\n                                duration = max(duration, timeline.frames[(frameCount - 1) * PathConstraintPositionTimeline.ENTRIES])\n                            }\n                            PATH_MIX -> {\n                                val timeline = PathConstraintMixTimeline(frameCount)\n                                timeline.pathConstraintIndex = index\n                                for (frameIndex in 0 until frameCount) {\n                                    timeline.setFrame(frameIndex, input.readFloat(), input.readFloat(), input.readFloat())\n                                    if (frameIndex < frameCount - 1) readCurve(input, frameIndex, timeline)\n                                }\n                                timelines.add(timeline)\n                                duration = max(duration, timeline.frames[(frameCount - 1) * PathConstraintMixTimeline.ENTRIES])\n                            }\n                        }\n                        ii++\n                    }\n                    i++\n                }\n            }\n\n            // Deform timelines.\n            run {\n                var i = 0\n                val n = input.readInt(true)\n                while (i < n) {\n                    val skin = skeletonData.skins[input.readInt(true)]\n                    var ii = 0\n                    val nn = input.readInt(true)\n                    while (ii < nn) {\n                        val slotIndex = input.readInt(true)\n                        var iii = 0\n                        val nnn = input.readInt(true)\n                        while (iii < nnn) {\n                            val attachment = skin.getAttachment(slotIndex, input.readStringRef()!!) as VertexAttachment\n                            val weighted = attachment.bones != null\n                            val vertices = attachment.vertices\n                            val deformLength = if (weighted) vertices!!.size / 3 * 2 else vertices!!.size\n\n                            val frameCount = input.readInt(true)\n                            val timeline = DeformTimeline(frameCount)\n                            timeline.slotIndex = slotIndex\n                            timeline.attachment = attachment\n\n                            for (frameIndex in 0 until frameCount) {\n                                val time = input.readFloat()\n                                val deform: FloatArray\n                                var end = input.readInt(true)\n                                if (end == 0)\n                                    deform = if (weighted) FloatArray(deformLength) else vertices\n                                else {\n                                    deform = FloatArray(deformLength)\n                                    val start = input.readInt(true)\n                                    end += start\n                                    if (scale == 1f) {\n                                        for (v in start until end)\n                                            deform[v] = input.readFloat()\n                                    } else {\n                                        for (v in start until end)\n                                            deform[v] = input.readFloat() * scale\n                                    }\n                                    if (!weighted) {\n                                        var v = 0\n                                        val vn = deform.size\n                                        while (v < vn) {\n                                            deform[v] += vertices[v]\n                                            v++\n                                        }\n                                    }\n                                }\n\n                                timeline.setFrame(frameIndex, time, deform)\n                                if (frameIndex < frameCount - 1) readCurve(input, frameIndex, timeline)\n                            }\n                            timelines.add(timeline)\n                            duration = max(duration, timeline.frames[frameCount - 1])\n                            iii++\n                        }\n                        ii++\n                    }\n                    i++\n                }\n            }\n\n            // Draw order timeline.\n            val drawOrderCount = input.readInt(true)\n            if (drawOrderCount > 0) {\n                val timeline = DrawOrderTimeline(drawOrderCount)\n                val slotCount = skeletonData.slots.size\n                for (i in 0 until drawOrderCount) {\n                    val time = input.readFloat()\n                    val offsetCount = input.readInt(true)\n                    val drawOrder = IntArray(slotCount)\n                    for (ii in slotCount - 1 downTo 0)\n                        drawOrder[ii] = -1\n                    val unchanged = IntArray(slotCount - offsetCount)\n                    var originalIndex = 0\n                    var unchangedIndex = 0\n                    for (ii in 0 until offsetCount) {\n                        val slotIndex = input.readInt(true)\n                        // Collect unchanged items.\n                        while (originalIndex != slotIndex)\n                            unchanged[unchangedIndex++] = originalIndex++\n                        // Set changed items.\n                        drawOrder[originalIndex + input.readInt(true)] = originalIndex++\n                    }\n                    // Collect remaining unchanged items.\n                    while (originalIndex < slotCount)\n                        unchanged[unchangedIndex++] = originalIndex++\n                    // Fill in unchanged items.\n                    for (ii in slotCount - 1 downTo 0)\n                        if (drawOrder[ii] == -1) drawOrder[ii] = unchanged[--unchangedIndex]\n                    timeline.setFrame(i, time, drawOrder)\n                }\n                timelines.add(timeline)\n                duration = max(duration, timeline.frames[drawOrderCount - 1])\n            }\n\n            // Event timeline.\n            val eventCount = input.readInt(true)\n            if (eventCount > 0) {\n                val timeline = EventTimeline(eventCount)\n                for (i in 0 until eventCount) {\n                    val time = input.readFloat()\n                    val eventData = skeletonData.events[input.readInt(true)]\n                    val event = Event(time, eventData)\n                    event.int = input.readInt(false)\n                    event.float = input.readFloat()\n                    event.stringValue = if (input.readBoolean()) input.readString()!! else eventData.stringValue\n                    if (event.data.audioPath != null) {\n                        event.volume = input.readFloat()\n                        event.balance = input.readFloat()\n                    }\n                    timeline.setFrame(i, event)\n                }\n                timelines.add(timeline)\n                duration = max(duration, timeline.frames[eventCount - 1])\n            }\n        } catch (ex: Throwable) {\n            throw RuntimeException(\"Error reading skeleton file.\", ex)\n        }\n\n        timelines.shrink()\n        return Animation(name!!, timelines, duration)\n    }\n\n    \n    private fun readCurve(input: SkeletonInput, frameIndex: Int, timeline: CurveTimeline) {\n        when (input.readByte().toInt()) {\n            CURVE_STEPPED -> timeline.setStepped(frameIndex)\n            CURVE_BEZIER -> setCurve(timeline, frameIndex, input.readFloat(), input.readFloat(), input.readFloat(), input.readFloat())\n        }\n    }\n\n    internal fun setCurve(timeline: CurveTimeline, frameIndex: Int, cx1: Float, cy1: Float, cx2: Float, cy2: Float) {\n        timeline.setCurve(frameIndex, cx1, cy1, cx2, cy2)\n    }\n\n    internal class Vertices {\n        var bones: IntArray? = null\n        var vertices: FloatArray? = null\n    }\n\n    internal class SkeletonInput(val data: ByteArray) {\n        private var n = 0\n\n        fun read(): Int {\n            if (n >= data.size) {\n                return -1\n            }\n            return data[n++].toInt() and 0xFF\n        }\n\n        fun close() {\n        }\n\n        fun readFloat(): Float {\n            return Float.fromBits(readInt())\n        }\n\n        fun readBoolean(): Boolean {\n            return readUnsignedByte() != 0\n        }\n\n        fun readInt(optimizePositive: Boolean): Int {\n            var b = read()\n            var result = b and 0x7F\n            if (b and 0x80 != 0) {\n                b = read()\n                result = result or (b and 0x7F shl 7)\n                if (b and 0x80 != 0) {\n                    b = read()\n                    result = result or (b and 0x7F shl 14)\n                    if (b and 0x80 != 0) {\n                        b = read()\n                        result = result or (b and 0x7F shl 21)\n                        if (b and 0x80 != 0) {\n                            b = read()\n                            result = result or (b and 0x7F shl 28)\n                        }\n                    }\n                }\n            }\n            return if (optimizePositive) result else result.ushr(1) xor -(result and 1)\n        }\n        fun readInt(): Int {\n            val a = readUnsignedByte()\n            val b = readUnsignedByte()\n            val c = readUnsignedByte()\n            val d = readUnsignedByte()\n            return a shl 24 or (b shl 16) or (c shl 8) or d\n        }\n\n        fun readUnsignedByte(): Int {\n            val i = read()\n            if (i == -1) {\n                error(\"EOF\")\n            }\n            return i\n        }\n\n        fun readByte(): Byte {\n            return readUnsignedByte().toByte()\n        }\n\n        fun readShort(): Short {\n            val a = readUnsignedByte()\n            val b = readUnsignedByte()\n            return (a shl 8 or b).toShort()\n        }\n\n        private var chars = CharArray(32)\n        var strings: FastArrayList<String>? = null\n\n        /** @return May be null.\n         */\n        \n        fun readStringRef(): String? {\n            val index = readInt(true)\n            return if (index == 0) null else strings!![index - 1]\n        }\n\n        \n        fun readString(): String? {\n            var byteCount = readInt(true)\n            when (byteCount) {\n                0 -> return null\n                1 -> return \"\"\n            }\n            byteCount--\n            if (chars.size < byteCount) chars = CharArray(byteCount)\n            val chars = this.chars\n            var charCount = 0\n            var i = 0\n            while (i < byteCount) {\n                val b = read()\n                when (b shr 4) {\n                    -1 -> error(\"EOF\")\n                    12, 13 -> {\n                        chars[charCount++] = (b and 0x1F shl 6 or (read() and 0x3F)).toChar()\n                        i += 2\n                    }\n                    14 -> {\n                        chars[charCount++] = (b and 0x0F shl 12 or (read() and 0x3F shl 6) or (read() and 0x3F)).toChar()\n                        i += 3\n                    }\n                    else -> {\n                        chars[charCount++] = b.toChar()\n                        i++\n                    }\n                }\n            }\n            return chars.concatToString(0, charCount)\n        }\n    }\n\n    private val tempColor1 = RGBAf()\n    private val tempColor2 = RGBAf()\n\n    companion object {\n        val BONE_ROTATE = 0\n        val BONE_TRANSLATE = 1\n        val BONE_SCALE = 2\n        val BONE_SHEAR = 3\n\n        val SLOT_ATTACHMENT = 0\n        val SLOT_COLOR = 1\n        val SLOT_TWO_COLOR = 2\n\n        val PATH_POSITION = 0\n        val PATH_SPACING = 1\n        val PATH_MIX = 2\n\n        val CURVE_LINEAR = 0\n        val CURVE_STEPPED = 1\n        val CURVE_BEZIER = 2\n    }\n}\n\nsuspend fun VfsFile.readSkeletonBinary(atlas: Atlas, scale: Float = 1f): SkeletonData\n    = SkeletonBinary(atlas).also { it.scale = scale }.readSkeletonData(this)\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine\n\nimport com.soywiz.kds.*\nimport com.soywiz.kds.iterators.*\n\n/** Stores the setup pose and all of the stateless data for a skeleton.\n *\n *\n * See [Data objects](http://esotericsoftware.com/spine-runtime-architecture#Data-objects) in the Spine Runtimes\n * Guide.  */\nclass SkeletonData {\n    // ---\n\n    /** The skeleton's name, which by default is the name of the skeleton data file, if possible.\n     * @return May be null.\n     */\n    /** @param name May be null.\n     */\n    var name: String? = null\n    // --- Bones.\n\n    /** The skeleton's bones, sorted parent first. The root bone is always the first bone.  */\n    val bones: FastArrayList<BoneData> = FastArrayList<BoneData>() // Ordered parents first.\n    // --- Slots.\n\n    /** The skeleton's slots.  */\n    val slots: FastArrayList<SlotData> = FastArrayList<SlotData>() // Setup pose draw order.\n\n    /** All skins, including the default skin.  */\n    val skins: FastArrayList<Skin> = FastArrayList<Skin>()\n    // --- Skins.\n\n    /** The skeleton's default skin. By default this skin contains all attachments that were not in a skin in Spine.\n     *\n     *\n     * See [Skeleton.getAttachment].\n     * @return May be null.\n     */\n    /** @param defaultSkin May be null.\n     */\n    lateinit var defaultSkin: Skin\n\n    /** The skeleton's events.  */\n    val events: FastArrayList<EventData> = FastArrayList()\n    // --- Animations.\n\n    /** The skeleton's animations.  */\n    val animations: FastArrayList<Animation> = FastArrayList()\n    // --- IK constraints\n\n    /** The skeleton's IK constraints.  */\n    val ikConstraints: FastArrayList<IkConstraintData> = FastArrayList()\n    // --- Transform constraints\n\n    /** The skeleton's transform constraints.  */\n    val transformConstraints: FastArrayList<TransformConstraintData> = FastArrayList()\n    // --- Path constraints\n\n    /** The skeleton's path constraints.  */\n    val pathConstraints: FastArrayList<PathConstraintData> = FastArrayList()\n\n    /** The X coordinate of the skeleton's axis aligned bounding box in the setup pose.  */\n    var x: Float = 0.toFloat()\n\n    /** The Y coordinate of the skeleton's axis aligned bounding box in the setup pose.  */\n    var y: Float = 0.toFloat()\n\n    /** The width of the skeleton's axis aligned bounding box in the setup pose.  */\n    var width: Float = 0.toFloat()\n\n    /** The height of the skeleton's axis aligned bounding box in the setup pose.  */\n    var height: Float = 0.toFloat()\n    /** The Spine version used to export the skeleton data, or null.  */\n    /** @param version May be null.\n     */\n    var version: String? = null\n    /** The skeleton data hash. This value will change if any of the skeleton data has changed.\n     * @return May be null.\n     */\n    /** @param hash May be null.\n     */\n    var hash: String? = null\n\n    // Nonessential.\n    /** The dopesheet FPS in Spine. Available only when nonessential data was exported.  */\n    var fps = 30f\n    /** The path to the images directory as defined in Spine. Available only when nonessential data was exported.\n     * @return May be null.\n     */\n    /** @param imagesPath May be null.\n     */\n    var imagesPath: String? = null\n    /** The path to the audio directory as defined in Spine. Available only when nonessential data was exported.\n     * @return May be null.\n     */\n    /** @param audioPath May be null.\n     */\n    var audioPath: String? = null\n\n    /** Finds a bone by comparing each bone's name. It is more efficient to cache the results of this method than to call it\n     * multiple times.\n     * @return May be null.\n     */\n    fun findBone(boneName: String?): BoneData? {\n        val bones = this.bones\n        var i = 0\n        val n = bones.size\n        while (i < n) {\n            val bone = bones[i]\n            if (bone.name == boneName) return bone\n            i++\n        }\n        return null\n    }\n\n    /** Finds a slot by comparing each slot's name. It is more efficient to cache the results of this method than to call it\n     * multiple times.\n     * @return May be null.\n     */\n    fun findSlot(slotName: String?): SlotData? {\n        val slots = this.slots\n        var i = 0\n        val n = slots.size\n        while (i < n) {\n            val slot = slots[i]\n            if (slot.name == slotName) return slot\n            i++\n        }\n        return null\n    }\n\n    /** Finds a skin by comparing each skin's name. It is more efficient to cache the results of this method than to call it\n     * multiple times.\n     * @return May be null.\n     */\n    fun findSkin(skinName: String?): Skin? {\n        skins.fastForEach { skin ->\n            if (skin.name == skinName) return skin\n        }\n        return null\n    }\n\n    // --- Events.\n\n    /** Finds an event by comparing each events's name. It is more efficient to cache the results of this method than to call it\n     * multiple times.\n     * @return May be null.\n     */\n    fun findEvent(eventDataName: String?): EventData? {\n        events.fastForEach { eventData ->\n            if (eventData.name == eventDataName) return eventData\n        }\n        return null\n    }\n\n    /** Finds an animation by comparing each animation's name. It is more efficient to cache the results of this method than to\n     * call it multiple times.\n     * @return May be null.\n     */\n    fun findAnimation(animationName: String): Animation? {\n        val animations = this.animations\n        var i = 0\n        val n = animations.size\n        while (i < n) {\n            val animation = animations[i]\n            if (animation.name == animationName) return animation\n            i++\n        }\n        return null\n    }\n\n    /** Finds an IK constraint by comparing each IK constraint's name. It is more efficient to cache the results of this method\n     * than to call it multiple times.\n     * @return May be null.\n     */\n    fun findIkConstraint(constraintName: String?): IkConstraintData? {\n        val ikConstraints = this.ikConstraints\n        var i = 0\n        val n = ikConstraints.size\n        while (i < n) {\n            val constraint = ikConstraints[i]\n            if (constraint.name == constraintName) return constraint\n            i++\n        }\n        return null\n    }\n\n    /** Finds a transform constraint by comparing each transform constraint's name. It is more efficient to cache the results of\n     * this method than to call it multiple times.\n     * @return May be null.\n     */\n    fun findTransformConstraint(constraintName: String?): TransformConstraintData? {\n        val transformConstraints = this.transformConstraints\n        var i = 0\n        val n = transformConstraints.size\n        while (i < n) {\n            val constraint = transformConstraints[i]\n            if (constraint.name == constraintName) return constraint\n            i++\n        }\n        return null\n    }\n\n    /** Finds a path constraint by comparing each path constraint's name. It is more efficient to cache the results of this method\n     * than to call it multiple times.\n     * @return May be null.\n     */\n    fun findPathConstraint(constraintName: String?): PathConstraintData? {\n        val pathConstraints = this.pathConstraints\n        var i = 0\n        val n = pathConstraints.size\n        while (i < n) {\n            val constraint = pathConstraints[i]\n            if (constraint.name == constraintName) return constraint\n            i++\n        }\n        return null\n    }\n\n    override fun toString(): String = name ?: super.toString()\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine\n\nimport com.esotericsoftware.spine.Animation.*\nimport com.esotericsoftware.spine.BoneData.*\nimport com.esotericsoftware.spine.PathConstraintData.*\nimport com.esotericsoftware.spine.attachments.*\nimport com.esotericsoftware.spine.utils.*\nimport com.esotericsoftware.spine.utils.SpineUtils.arraycopy\nimport com.soywiz.kds.*\nimport com.soywiz.korim.atlas.*\nimport com.soywiz.korim.color.*\nimport com.soywiz.korio.file.*\nimport com.soywiz.korio.serialization.json.*\nimport kotlin.math.*\n\n/** Loads skeleton data in the Spine JSON format.\n *\n *\n * See [Spine JSON format](http://esotericsoftware.com/spine-json-format) and\n * [JSON and binary data](http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data) in the Spine\n * Runtimes Guide.  */\nclass SkeletonJson {\n    private val attachmentLoader: AttachmentLoader\n\n    /** Scales bone positions, image sizes, and translations as they are loaded. This allows different size images to be used at\n     * runtime than were used in Spine.\n     *\n     *\n     * See [Scaling](http://esotericsoftware.com/spine-loading-skeleton-data#Scaling) in the Spine Runtimes Guide.  */\n    var scale = 1f\n        set(scale) {\n            require(scale != 0f) { \"scale cannot be 0.\" }\n            field = scale\n        }\n    private val linkedMeshes = FastArrayList<LinkedMesh>()\n\n    constructor(atlas: Atlas) {\n        attachmentLoader = AtlasAttachmentLoader(atlas)\n    }\n\n    constructor(attachmentLoader: AttachmentLoader) {\n        this.attachmentLoader = attachmentLoader\n    }\n\n    suspend fun readSkeletonData(file: VfsFile): SkeletonData = readSkeletonData(file.readString(), file.fullName)\n\n    fun readSkeletonData(fileContent: String, fileName: String): SkeletonData {\n        val scale = this.scale\n\n        val skeletonData = SkeletonData()\n        skeletonData.name = PathInfo(fileName).baseNameWithoutExtension\n\n        val root = SpineJsonValue.fromPrimitiveTree(Json.parse(fileContent, Json.Context.FAST))\n\n        // Skeleton.\n        val skeletonMap = root!![\"skeleton\"]\n        if (skeletonMap != null) {\n            skeletonData.hash = skeletonMap.getString(\"hash\", null)\n            skeletonData.version = skeletonMap.getString(\"spine\", null)\n            if (\"3.8.75\" == skeletonData.version)\n                throw RuntimeException(\"Unsupported skeleton data, please export with a newer version of Spine.\")\n            skeletonData.x = skeletonMap.getFloat(\"x\", 0f)\n            skeletonData.y = skeletonMap.getFloat(\"y\", 0f)\n            skeletonData.width = skeletonMap.getFloat(\"width\", 0f)\n            skeletonData.height = skeletonMap.getFloat(\"height\", 0f)\n            skeletonData.fps = skeletonMap.getFloat(\"fps\", 30f)\n            skeletonData.imagesPath = skeletonMap.getString(\"images\", null)\n            skeletonData.audioPath = skeletonMap.getString(\"audio\", null)\n        }\n\n        // Bones.\n        root[\"bones\"]?.fastForEach { boneMap ->\n            var parent: BoneData? = null\n            val parentName = boneMap.getString(\"parent\", null)\n            if (parentName != null) {\n                parent = skeletonData.findBone(parentName)\n                if (parent == null) error(\"Parent bone not found: $parentName\")\n            }\n            val data = BoneData(skeletonData.bones.size, boneMap.getString(\"name\")!!, parent)\n            data.length = boneMap.getFloat(\"length\", 0f) * scale\n            data.x = boneMap.getFloat(\"x\", 0f) * scale\n            data.y = boneMap.getFloat(\"y\", 0f) * scale\n            data.rotation = boneMap.getFloat(\"rotation\", 0f)\n            data.scaleX = boneMap.getFloat(\"scaleX\", 1f)\n            data.scaleY = boneMap.getFloat(\"scaleY\", 1f)\n            data.shearX = boneMap.getFloat(\"shearX\", 0f)\n            data.shearY = boneMap.getFloat(\"shearY\", 0f)\n            data.transformMode = TransformMode.valueOf(boneMap.getStringNotNull(\"transform\", TransformMode.normal.name)!!)\n            data.skinRequired = boneMap.getBoolean(\"skin\", false)\n\n            val color = boneMap.getString(\"color\", null)\n            if (color != null) data.color.setTo(RGBAf.valueOf(color))\n\n            skeletonData.bones.add(data)\n        }\n\n        // Slots.\n        root.get(\"slots\")?.fastForEach { slotMap ->\n            val slotName = slotMap.getString(\"name\")!!\n            val boneName = slotMap.getString(\"bone\")\n            val boneData = skeletonData.findBone(boneName)\n                    ?: error(\"Slot bone not found: \" + boneName!!)\n            val data = SlotData(skeletonData.slots.size, slotName, boneData)\n\n            val color = slotMap.getString(\"color\", null)\n            if (color != null) data.color.setTo(RGBAf.valueOf(color))\n\n            val dark = slotMap.getString(\"dark\", null)\n            if (dark != null) data.darkColor = RGBAf.valueOf(dark)\n\n            data.attachmentName = slotMap.getString(\"attachment\", null)\n            data.blendMode = BlendMode.valueOf(slotMap.getStringNotNull(\"blend\", BlendMode.normal.name)!!)\n            skeletonData.slots.add(data)\n        }\n\n        // IK constraints.\n        run {\n            root.get(\"ik\")?.fastForEach { constraintMap ->\n                val data = IkConstraintData(constraintMap!!.getString(\"name\")!!)\n                data.order = constraintMap!!.getInt(\"order\", 0)\n                data.skinRequired = constraintMap!!.getBoolean(\"skin\", false)\n\n                constraintMap!!.get(\"bones\")?.fastForEach { entry ->\n                    val bone = skeletonData.findBone(entry!!.asString())\n                        ?: error(\"IK bone not found: \" + entry!!)\n                    data.bones.add(bone)\n                }\n\n                val targetName = constraintMap!!.getString(\"target\")!!\n                data.target = skeletonData.findBone(targetName)\n                    ?: error(\"IK target bone not found: \" + targetName!!)\n\n                data.mix = constraintMap!!.getFloat(\"mix\", 1f)\n                data.softness = constraintMap!!.getFloat(\"softness\", 0f) * scale\n                data.bendDirection = if (constraintMap!!.getBoolean(\"bendPositive\", true)) 1 else -1\n                data.compress = constraintMap!!.getBoolean(\"compress\", false)\n                data.stretch = constraintMap!!.getBoolean(\"stretch\", false)\n                data.uniform = constraintMap!!.getBoolean(\"uniform\", false)\n\n                skeletonData.ikConstraints.add(data)\n            }\n        }\n\n        // Transform constraints.\n        run {\n            root[\"transform\"]?.fastForEach { constraintMap ->\n                val data = TransformConstraintData(constraintMap!!.getString(\"name\")!!)\n                data.order = constraintMap!!.getInt(\"order\", 0)\n                data.skinRequired = constraintMap!!.getBoolean(\"skin\", false)\n\n                constraintMap!!.get(\"bones\")?.fastForEach { entry ->\n                    val bone = skeletonData.findBone(entry!!.asString())\n                            ?: error(\"Transform constraint bone not found: \" + entry!!)\n                    data.bones.add(bone)\n                }\n\n                val targetName = constraintMap!!.getString(\"target\")\n                data.target = skeletonData.findBone(targetName)\n                    ?: error(\"Transform constraint target bone not found: \" + targetName!!)\n\n                data.local = constraintMap!!.getBoolean(\"local\", false)\n                data.relative = constraintMap!!.getBoolean(\"relative\", false)\n\n                data.offsetRotation = constraintMap!!.getFloat(\"rotation\", 0f)\n                data.offsetX = constraintMap!!.getFloat(\"x\", 0f) * scale\n                data.offsetY = constraintMap!!.getFloat(\"y\", 0f) * scale\n                data.offsetScaleX = constraintMap!!.getFloat(\"scaleX\", 0f)\n                data.offsetScaleY = constraintMap!!.getFloat(\"scaleY\", 0f)\n                data.offsetShearY = constraintMap!!.getFloat(\"shearY\", 0f)\n\n                data.rotateMix = constraintMap!!.getFloat(\"rotateMix\", 1f)\n                data.translateMix = constraintMap!!.getFloat(\"translateMix\", 1f)\n                data.scaleMix = constraintMap!!.getFloat(\"scaleMix\", 1f)\n                data.shearMix = constraintMap!!.getFloat(\"shearMix\", 1f)\n\n                skeletonData.transformConstraints.add(data)\n            }\n        }\n\n        // Path constraints.\n        root[\"path\"]?.fastForEach { constraintMap ->\n            val data = PathConstraintData(constraintMap!!.getString(\"name\")!!)\n            data.order = constraintMap!!.getInt(\"order\", 0)\n            data.skinRequired = constraintMap!!.getBoolean(\"skin\", false)\n\n            constraintMap!![\"bones\"]?.fastForEach { entry ->\n                val bone = skeletonData.findBone(entry!!.asString())\n                        ?: error(\"Path bone not found: \" + entry!!)\n                data.bones.add(bone)\n            }\n\n            val targetName = constraintMap!!.getString(\"target\")!!\n            data.target = skeletonData.findSlot(targetName)\n                ?: error(\"Path target slot not found: \" + targetName!!)\n\n            data.positionMode = PositionMode.valueOf(constraintMap!!.getStringNotNull(\"positionMode\", \"percent\")!!)\n            data.spacingMode = SpacingMode.valueOf(constraintMap!!.getStringNotNull(\"spacingMode\", \"length\")!!)\n            data.rotateMode = RotateMode.valueOf(constraintMap!!.getStringNotNull(\"rotateMode\", \"tangent\")!!)\n            data.offsetRotation = constraintMap!!.getFloat(\"rotation\", 0f)\n            data.position = constraintMap!!.getFloat(\"position\", 0f)\n            if (data.positionMode == PositionMode.fixed) data.position *= scale\n            data.spacing = constraintMap!!.getFloat(\"spacing\", 0f)\n            if (data.spacingMode == SpacingMode.length || data.spacingMode == SpacingMode.fixed) data.spacing *= scale\n            data.rotateMix = constraintMap!!.getFloat(\"rotateMix\", 1f)\n            data.translateMix = constraintMap!!.getFloat(\"translateMix\", 1f)\n\n            skeletonData.pathConstraints.add(data)\n        }\n\n        // Skins.\n        root.get(\"skins\")?.fastForEach { skinMap ->\n            val skin = Skin(skinMap.getString(\"name\")!!)\n            run {\n                skinMap!!.get(\"bones\")?.fastForEach { entry ->\n                    val bone = skeletonData.findBone(entry!!.asString())\n                            ?: error(\"Skin bone not found: \" + entry!!)\n                    skin.bones.add(bone)\n                }\n            }\n            run {\n                skinMap!!.get(\"ik\")?.fastForEach { entry ->\n                    val constraint = skeletonData.findIkConstraint(entry!!.asString())\n                            ?: error(\"Skin IK constraint not found: \" + entry!!)\n                    skin.constraints.add(constraint)\n                }\n            }\n            run {\n                skinMap!!.get(\"transform\")?.fastForEach { entry ->\n                    val constraint = skeletonData.findTransformConstraint(entry!!.asString())\n                            ?: error(\"Skin transform constraint not found: \" + entry!!)\n                    skin.constraints.add(constraint)\n                }\n            }\n            run {\n                skinMap!!.get(\"path\")?.fastForEach { entry ->\n                    val constraint = skeletonData.findPathConstraint(entry!!.asString())\n                            ?: error(\"Skin path constraint not found: \" + entry!!)\n                    skin.constraints.add(constraint)\n                }\n            }\n            skinMap.get(\"attachments\")?.fastForEach { slotEntry ->\n                val slot = skeletonData.findSlot(slotEntry.name)\n                        ?: error(\"Slot not found: \" + slotEntry.name!!)\n                slotEntry?.fastForEach { entry ->\n                    try {\n                        val attachment = readAttachment(entry!!, skin, slot.index, entry!!.name, skeletonData)\n                        if (attachment != null) skin.setAttachment(slot.index, entry!!.name!!, attachment)\n                    } catch (ex: Throwable) {\n                        throw RuntimeException(\"Error reading attachment: \" + entry!!.name + \", skin: \" + skin, ex)\n                    }\n                }\n            }\n            skeletonData.skins.add(skin)\n            if (skin.name == \"default\") skeletonData.defaultSkin = skin\n        }\n\n        // Linked meshes.\n        var i = 0\n        val n = linkedMeshes.size\n        while (i < n) {\n            val linkedMesh = linkedMeshes.get(i)\n            val skin = (if (linkedMesh.skin == null) skeletonData.defaultSkin else skeletonData.findSkin(linkedMesh.skin))\n                    ?: error(\"Skin not found: \" + linkedMesh.skin!!)\n            val parent = skin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent!!)\n                    ?: error(\"Parent mesh not found: \" + linkedMesh.parent)\n            linkedMesh.mesh.deformAttachment = if (linkedMesh.inheritDeform) parent as VertexAttachment else linkedMesh.mesh\n            linkedMesh.mesh.parentMesh = parent as MeshAttachment\n            linkedMesh.mesh.updateUVs()\n            i++\n        }\n        linkedMeshes.clear()\n\n        // Events.\n        root.get(\"events\")?.fastForEach { eventMap ->\n            val data = EventData(eventMap.name!!)\n            data.int = eventMap.getInt(\"int\", 0)\n            data.float = eventMap.getFloat(\"float\", 0f)\n            data.stringValue = eventMap.getStringNotNull(\"string\", \"\")\n            data.audioPath = eventMap.getString(\"audio\", null)\n            if (data.audioPath != null) {\n                data.volume = eventMap.getFloat(\"volume\", 1f)\n                data.balance = eventMap.getFloat(\"balance\", 0f)\n            }\n            skeletonData.events.add(data)\n        }\n\n        // Animations.\n        root.get(\"animations\")?.fastForEach { animationMap ->\n            try {\n                readAnimation(animationMap, animationMap.name!!, skeletonData)\n            } catch (ex: Throwable) {\n                throw RuntimeException(\"Error reading animation: \" + animationMap.name!!, ex)\n            }\n        }\n\n        skeletonData.bones.shrink()\n        skeletonData.slots.shrink()\n        skeletonData.skins.shrink()\n        skeletonData.events.shrink()\n        skeletonData.animations.shrink()\n        skeletonData.ikConstraints.shrink()\n        return skeletonData\n    }\n\n    private fun readAttachment(map: SpineJsonValue, skin: Skin, slotIndex: Int, name: String?, skeletonData: SkeletonData): Attachment? {\n        var name = name\n        val scale = this.scale\n        name = map.getStringNotNull(\"name\", name!!)\n\n        val type = map.getStringNotNull(\"type\", AttachmentType.region.name)\n\n        when (AttachmentType.valueOf(type)) {\n            AttachmentType.region -> {\n                val path = map.getStringNotNull(\"path\", name!!)\n                val region = attachmentLoader.newRegionAttachment(skin, name, path) ?: return null\n                region.path = path\n                region.x = map.getFloat(\"x\", 0f) * scale\n                region.y = map.getFloat(\"y\", 0f) * scale\n                region.scaleX = map.getFloat(\"scaleX\", 1f)\n                region.scaleY = map.getFloat(\"scaleY\", 1f)\n                region.rotation = map.getFloat(\"rotation\", 0f)\n                region.width = map.getFloat(\"width\") * scale\n                region.height = map.getFloat(\"height\") * scale\n\n                val color = map.getString(\"color\", null)\n                if (color != null) region.color.setTo(RGBAf.valueOf(color))\n\n                region.updateOffset()\n                return region\n            }\n            AttachmentType.boundingbox -> {\n                val box = attachmentLoader.newBoundingBoxAttachment(skin, name) ?: return null\n                readVertices(map, box, map.getInt(\"vertexCount\") shl 1)\n\n                val color = map.getString(\"color\", null)\n                if (color != null) box.color.setTo(RGBAf.valueOf(color))\n                return box\n            }\n            AttachmentType.mesh, AttachmentType.linkedmesh -> {\n                val path = map.getStringNotNull(\"path\", name!!)\n                val mesh = attachmentLoader.newMeshAttachment(skin, name, path) ?: return null\n                mesh.path = path\n\n                val color = map.getString(\"color\", null)\n                if (color != null) mesh.color.setTo(RGBAf.valueOf(color))\n\n                mesh.width = map.getFloat(\"width\", 0f) * scale\n                mesh.height = map.getFloat(\"height\", 0f) * scale\n\n                val parent = map.getString(\"parent\", null)\n                if (parent != null) {\n                    linkedMeshes\n                            .add(LinkedMesh(mesh, map.getString(\"skin\", null), slotIndex, parent, map.getBoolean(\"deform\", true)))\n                    return mesh\n                }\n\n                val uvs = map.require(\"uvs\").asFloatArray()\n                readVertices(map, mesh, uvs.size)\n                mesh.triangles = map.require(\"triangles\").asShortArray()\n                mesh.regionUVs = uvs\n                mesh.updateUVs()\n\n                if (map.has(\"hull\")) mesh.hullLength = map.require(\"hull\").asInt() * 2\n                if (map.has(\"edges\")) mesh.edges = map.require(\"edges\").asShortArray()\n                return mesh\n            }\n            AttachmentType.path -> {\n                val path = attachmentLoader.newPathAttachment(skin, name) ?: return null\n                path.closed = map.getBoolean(\"closed\", false)\n                path.constantSpeed = map.getBoolean(\"constantSpeed\", true)\n\n                val vertexCount = map.getInt(\"vertexCount\")\n                readVertices(map, path, vertexCount shl 1)\n\n                val lengths = FloatArray(vertexCount / 3)\n                var i = 0\n                map.require(\"lengths\")?.fastForEach { curves ->\n                    lengths[i++] = curves.asFloat() * scale\n                }\n                path.lengths = lengths\n\n                val color = map.getString(\"color\", null)\n                if (color != null) path.color.setTo(RGBAf.valueOf(color))\n                return path\n            }\n            AttachmentType.point -> {\n                val point = attachmentLoader.newPointAttachment(skin, name) ?: return null\n                point.x = map.getFloat(\"x\", 0f) * scale\n                point.y = map.getFloat(\"y\", 0f) * scale\n                point.rotation = map.getFloat(\"rotation\", 0f)\n\n                val color = map.getString(\"color\", null)\n                if (color != null) point.color.setTo(RGBAf.valueOf(color))\n                return point\n            }\n            AttachmentType.clipping -> {\n                val clip = attachmentLoader.newClippingAttachment(skin, name) ?: return null\n\n                val end = map.getString(\"end\", null)\n                if (end != null) {\n                    val slot = skeletonData.findSlot(end)\n                            ?: error(\"Clipping end slot not found: $end\")\n                    clip.endSlot = slot\n                }\n\n                readVertices(map, clip, map.getInt(\"vertexCount\") shl 1)\n\n                val color = map.getString(\"color\", null)\n                if (color != null) clip.color.setTo(RGBAf.valueOf(color))\n                return clip\n            }\n        }\n        return null\n    }\n\n    private fun readVertices(map: SpineJsonValue, attachment: VertexAttachment, verticesLength: Int) {\n        attachment.worldVerticesLength = verticesLength\n        val vertices = map.require(\"vertices\").asFloatArray()\n        if (verticesLength == vertices.size) {\n            if (this.scale != 1f) {\n                var i = 0\n                val n = vertices.size\n                while (i < n) {\n                    vertices[i] *= this.scale\n                    i++\n                }\n            }\n            attachment.vertices = vertices\n            return\n        }\n        val weights = FloatArrayList(verticesLength * 3 * 3)\n        val bones = IntArrayList(verticesLength * 3)\n        var i = 0\n        val n = vertices.size\n        while (i < n) {\n            val boneCount = vertices[i++].toInt()\n            bones.add(boneCount)\n            val nn = i + boneCount * 4\n            while (i < nn) {\n                bones.add(vertices[i].toInt())\n                weights.add(vertices[i + 1] * this.scale)\n                weights.add(vertices[i + 2] * this.scale)\n                weights.add(vertices[i + 3])\n                i += 4\n            }\n        }\n        attachment.bones = bones.toArray()\n        attachment.vertices = weights.toArray()\n    }\n\n    private fun readAnimation(map: SpineJsonValue, name: String, skeletonData: SkeletonData) {\n        val scale = this.scale\n        val timelines = FastArrayList<Timeline>()\n        var duration = 0f\n\n        // Slot timelines.\n        run {\n            map.get(\"slots\")?.fastForEach { slotMap ->\n                val slot = skeletonData.findSlot(slotMap!!.name)\n                        ?: error(\"Slot not found: \" + slotMap!!.name!!)\n                slotMap?.fastForEach { timelineMap ->\n                    val timelineName = timelineMap!!.name\n                    when (timelineName) {\n                        \"attachment\" -> {\n                            val timeline = AttachmentTimeline(timelineMap!!.size)\n                            timeline.slotIndex = slot.index\n\n                            var frameIndex = 0\n                            timelineMap!!?.fastForEach { valueMap ->\n                                timeline.setFrame(frameIndex++, valueMap!!.getFloat(\"time\", 0f), valueMap!!.getString(\"name\"))\n                            }\n                            timelines.add(timeline)\n                            duration = max(duration, timeline.frames[timeline.frameCount - 1])\n\n                        }\n                        \"color\" -> {\n                            val timeline = ColorTimeline(timelineMap!!.size)\n                            timeline.slotIndex = slot.index\n\n                            var frameIndex = 0\n                            timelineMap?.fastForEach { valueMap ->\n                                val color = RGBAf.valueOf(valueMap!!.getString(\"color\")!!)\n                                timeline.setFrame(frameIndex, valueMap!!.getFloat(\"time\", 0f), color.r, color.g, color.b, color.a)\n                                readCurve(valueMap!!, timeline, frameIndex)\n                                frameIndex++\n                            }\n                            timelines.add(timeline)\n                            duration = max(duration, timeline.frames[(timeline.frameCount - 1) * ColorTimeline.ENTRIES])\n\n                        }\n                        \"twoColor\" -> {\n                            val timeline = TwoColorTimeline(timelineMap!!.size)\n                            timeline.slotIndex = slot.index\n\n                            var frameIndex = 0\n                            timelineMap?.fastForEach { valueMap ->\n                                val light = RGBAf.valueOf(valueMap!!.getString(\"light\")!!)\n                                val dark = RGBAf.valueOf(valueMap!!.getString(\"dark\")!!)\n                                timeline.setFrame(frameIndex, valueMap!!.getFloat(\"time\", 0f), light.r, light.g, light.b, light.a, dark.r, dark.g,\n                                    dark.b)\n                                readCurve(valueMap!!, timeline, frameIndex)\n                                frameIndex++\n                            }\n                            timelines.add(timeline)\n                            duration = max(duration, timeline.frames[(timeline.frameCount - 1) * TwoColorTimeline.ENTRIES])\n\n                        }\n                        else -> throw RuntimeException(\"Invalid timeline type for a slot: \" + timelineName + \" (\" + slotMap!!.name + \")\")\n                    }\n                }\n            }\n        }\n\n        // Bone timelines.\n        map.get(\"bones\")?.fastForEach { boneMap ->\n            val bone = skeletonData.findBone(boneMap.name) ?: error(\"Bone not found: \" + boneMap.name!!)\n            boneMap.fastForEach { timelineMap ->\n                val timelineName = timelineMap!!.name\n                when (timelineName) {\n                    \"rotate\" -> {\n                        val timeline = RotateTimeline(timelineMap!!.size)\n                        timeline.boneIndex = bone.index\n\n                        var frameIndex = 0\n                        timelineMap?.fastForEach { valueMap ->\n                            timeline.setFrame(frameIndex, valueMap!!.getFloat(\"time\", 0f), valueMap!!.getFloat(\"angle\", 0f))\n                            readCurve(valueMap!!, timeline, frameIndex)\n                            frameIndex++\n                        }\n                        timelines.add(timeline)\n                        duration = max(duration, timeline.frames[(timeline.frameCount - 1) * RotateTimeline.ENTRIES])\n\n                    }\n                    \"translate\", \"scale\", \"shear\" -> {\n                        val timeline: TranslateTimeline\n                        var timelineScale = 1f\n                        var defaultValue = 0f\n                        if (timelineName == \"scale\") {\n                            timeline = ScaleTimeline(timelineMap!!.size)\n                            defaultValue = 1f\n                        } else if (timelineName == \"shear\")\n                            timeline = ShearTimeline(timelineMap!!.size)\n                        else {\n                            timeline = TranslateTimeline(timelineMap!!.size)\n                            timelineScale = scale\n                        }\n                        timeline.boneIndex = bone.index\n\n                        var frameIndex = 0\n                        timelineMap?.fastForEach { valueMap ->\n                            val x = valueMap!!.getFloat(\"x\", defaultValue)\n                            val y = valueMap!!.getFloat(\"y\", defaultValue)\n                            timeline.setFrame(frameIndex, valueMap!!.getFloat(\"time\", 0f), x * timelineScale, y * timelineScale)\n                            readCurve(valueMap!!, timeline, frameIndex)\n                            frameIndex++\n                        }\n                        timelines.add(timeline)\n                        duration = max(duration, timeline.frames[(timeline.frameCount - 1) * TranslateTimeline.ENTRIES])\n\n                    }\n                    else -> throw RuntimeException(\"Invalid timeline type for a bone: \" + timelineName + \" (\" + boneMap.name + \")\")\n                }\n            }\n        }\n\n        // IK constraint timelines.\n        run {\n            map.get(\"ik\")?.fastForEach { constraintMap ->\n                val constraint = skeletonData.findIkConstraint(constraintMap!!.name)\n                val timeline = IkConstraintTimeline(constraintMap!!.size)\n                timeline.ikConstraintIndex = skeletonData.ikConstraints.indexOfIdentity(constraint)\n                var frameIndex = 0\n                constraintMap!!.fastForEach { valueMap ->\n                    timeline.setFrame(\n                        frameIndex, valueMap!!.getFloat(\"time\", 0f), valueMap!!.getFloat(\"mix\", 1f),\n                        valueMap!!.getFloat(\"softness\", 0f) * scale, if (valueMap!!.getBoolean(\"bendPositive\", true)) 1 else -1,\n                        valueMap!!.getBoolean(\"compress\", false), valueMap!!.getBoolean(\"stretch\", false)\n                    )\n                    readCurve(valueMap!!, timeline, frameIndex)\n                    frameIndex++\n                }\n                timelines.add(timeline)\n                duration = max(duration, timeline.frames[(timeline.frameCount - 1) * IkConstraintTimeline.ENTRIES])\n            }\n        }\n\n        // Transform constraint timelines.\n        run {\n            map[\"transform\"]?.fastForEach { constraintMap ->\n                val constraint = skeletonData.findTransformConstraint(constraintMap!!.name)\n                val timeline = TransformConstraintTimeline(constraintMap!!.size)\n                timeline.transformConstraintIndex = skeletonData.transformConstraints.indexOfIdentity(constraint)\n                var frameIndex = 0\n                constraintMap?.fastForEach { valueMap ->\n                    timeline.setFrame(frameIndex, valueMap!!.getFloat(\"time\", 0f), valueMap!!.getFloat(\"rotateMix\", 1f),\n                            valueMap!!.getFloat(\"translateMix\", 1f), valueMap!!.getFloat(\"scaleMix\", 1f), valueMap!!.getFloat(\"shearMix\", 1f))\n                    readCurve(valueMap!!, timeline, frameIndex)\n                    frameIndex++\n                }\n                timelines.add(timeline)\n                duration = max(duration,\n                        timeline.frames[(timeline.frameCount - 1) * TransformConstraintTimeline.ENTRIES])\n            }\n        }\n\n        // Path constraint timelines.\n        map[\"path\"]?.fastForEach { constraintMap ->\n            val data = skeletonData.findPathConstraint(constraintMap!!.name)\n                    ?: error(\"Path constraint not found: \" + constraintMap!!.name!!)\n            val index = skeletonData.pathConstraints.indexOfIdentity(data)\n            constraintMap!!.fastForEach { timelineMap ->\n                val timelineName = timelineMap!!.name\n                when (timelineName) {\n                    \"position\", \"spacing\" -> {\n                        val timeline: PathConstraintPositionTimeline\n                        var timelineScale = 1f\n                        if (timelineName == \"spacing\") {\n                            timeline = PathConstraintSpacingTimeline(timelineMap!!.size)\n                            if (data.spacingMode == SpacingMode.length || data.spacingMode == SpacingMode.fixed) timelineScale = scale\n                        } else {\n                            timeline = PathConstraintPositionTimeline(timelineMap!!.size)\n                            if (data.positionMode == PositionMode.fixed) timelineScale = scale\n                        }\n                        timeline.pathConstraintIndex = index\n                        var frameIndex = 0\n                        timelineMap?.fastForEach { valueMap ->\n                            timeline.setFrame(frameIndex, valueMap!!.getFloat(\"time\", 0f), valueMap!!.getFloat(timelineName, 0f) * timelineScale)\n                            readCurve(valueMap!!, timeline, frameIndex)\n                            frameIndex++\n                        }\n                        timelines.add(timeline)\n                        duration = max(duration,\n                            timeline.frames[(timeline.frameCount - 1) * PathConstraintPositionTimeline.ENTRIES])\n                    }\n                    \"mix\" -> {\n                        val timeline = PathConstraintMixTimeline(timelineMap!!.size)\n                        timeline.pathConstraintIndex = index\n                        var frameIndex = 0\n                        timelineMap!!.fastForEach { valueMap ->\n                            timeline.setFrame(frameIndex, valueMap!!.getFloat(\"time\", 0f), valueMap!!.getFloat(\"rotateMix\", 1f),\n                                valueMap!!.getFloat(\"translateMix\", 1f))\n                            readCurve(valueMap!!, timeline, frameIndex)\n                            frameIndex++\n                        }\n                        timelines.add(timeline)\n                        duration = max(duration,\n                            timeline.frames[(timeline.frameCount - 1) * PathConstraintMixTimeline.ENTRIES])\n                    }\n                }\n            }\n        }\n\n        // Deform timelines.\n        map[\"deform\"]?.fastForEach { deformMap ->\n            val skin = skeletonData.findSkin(deformMap.name) ?: error(\"Skin not found: \" + deformMap.name!!)\n            deformMap.fastForEach { slotMap ->\n                val slot = skeletonData.findSlot(slotMap!!.name) ?: error(\"Slot not found: \" + slotMap!!.name!!)\n                slotMap!!.fastForEach { timelineMap ->\n                    val attachment = skin.getAttachment(slot.index, timelineMap!!.name!!) as? VertexAttachment?\n                            ?: error(\"Deform attachment not found: \" + timelineMap!!.name!!)\n                    val weighted = attachment.bones != null\n                    val vertices = attachment.vertices\n                    val deformLength = if (weighted) vertices!!.size / 3 * 2 else vertices!!.size\n\n                    val timeline = DeformTimeline(timelineMap!!.size)\n                    timeline.slotIndex = slot.index\n                    timeline.attachment = attachment\n\n                    var frameIndex = 0\n                    timelineMap!!.fastForEach { valueMap ->\n                        val deform: FloatArray\n                        val verticesValue = valueMap!![\"vertices\"]\n                        if (verticesValue == null)\n                            deform = if (weighted) FloatArray(deformLength) else vertices\n                        else {\n                            deform = FloatArray(deformLength)\n                            val start = valueMap!!.getInt(\"offset\", 0)\n                            arraycopy(verticesValue.asFloatArray(), 0, deform, start, verticesValue.size)\n                            if (scale != 1f) {\n                                var i = start\n                                val n = i + verticesValue.size\n                                while (i < n) {\n                                    deform[i] *= scale\n                                    i++\n                                }\n                            }\n                            if (!weighted) {\n                                for (i in 0 until deformLength)\n                                    deform[i] += vertices[i]\n                            }\n                        }\n\n                        timeline.setFrame(frameIndex, valueMap!!.getFloat(\"time\", 0f), deform)\n                        readCurve(valueMap!!, timeline, frameIndex)\n                        frameIndex++\n                    }\n                    timelines.add(timeline)\n                    duration = max(duration, timeline.frames[timeline.frameCount - 1])\n                }\n            }\n        }\n\n        // Draw order timeline.\n        var drawOrdersMap = map[\"drawOrder\"]\n        if (drawOrdersMap == null) drawOrdersMap = map[\"draworder\"]\n        if (drawOrdersMap != null) {\n            val timeline = DrawOrderTimeline(drawOrdersMap.size)\n            val slotCount = skeletonData.slots.size\n            var frameIndex = 0\n            drawOrdersMap.fastForEach { drawOrderMap ->\n                var drawOrder: IntArray? = null\n                val offsets = drawOrderMap[\"offsets\"]\n                if (offsets != null) {\n                    drawOrder = IntArray(slotCount)\n                    for (i in slotCount - 1 downTo 0)\n                        drawOrder[i] = -1\n                    val unchanged = IntArray(slotCount - offsets.size)\n                    var originalIndex = 0\n                    var unchangedIndex = 0\n                    offsets.fastForEach { offsetMap ->\n                        val slot = skeletonData.findSlot(offsetMap.getString(\"slot\"))\n                                ?: error(\"Slot not found: \" + offsetMap.getString(\"slot\")!!)\n// Collect unchanged items.\n                        while (originalIndex != slot.index)\n                            unchanged[unchangedIndex++] = originalIndex++\n                        // Set changed items.\n                        drawOrder[originalIndex + offsetMap.getInt(\"offset\")] = originalIndex++\n                    }\n                    // Collect remaining unchanged items.\n                    while (originalIndex < slotCount)\n                        unchanged[unchangedIndex++] = originalIndex++\n                    // Fill in unchanged items.\n                    for (i in slotCount - 1 downTo 0)\n                        if (drawOrder[i] == -1) drawOrder[i] = unchanged[--unchangedIndex]\n                }\n                timeline.setFrame(frameIndex++, drawOrderMap.getFloat(\"time\", 0f), drawOrder)\n            }\n            timelines.add(timeline)\n            duration = max(duration, timeline.frames[timeline.frameCount - 1])\n        }\n\n        // Event timeline.\n        val eventsMap = map[\"events\"]\n        if (eventsMap != null) {\n            val timeline = EventTimeline(eventsMap.size)\n            var frameIndex = 0\n            eventsMap.fastForEach { eventMap ->\n                val eventData = skeletonData.findEvent(eventMap.getString(\"name\"))\n                        ?: error(\"Event not found: \" + eventMap.getString(\"name\")!!)\n                val event = Event(eventMap.getFloat(\"time\", 0f), eventData)\n                event.int = eventMap.getInt(\"int\", eventData.int)\n                event.float = eventMap.getFloat(\"float\", eventData.float)\n                event.stringValue = eventMap.getStringNotNull(\"string\", eventData.stringValue)\n                if (event.data.audioPath != null) {\n                    event.volume = eventMap.getFloat(\"volume\", eventData.volume)\n                    event.balance = eventMap.getFloat(\"balance\", eventData.balance)\n                }\n                timeline.setFrame(frameIndex++, event)\n            }\n            timelines.add(timeline)\n            duration = max(duration, timeline.frames[timeline.frameCount - 1])\n        }\n\n        timelines.shrink()\n        skeletonData.animations.add(Animation(name, timelines, duration))\n    }\n\n    internal fun readCurve(map: SpineJsonValue, timeline: CurveTimeline, frameIndex: Int) {\n        val curve = map[\"curve\"] ?: return\n        if (curve.isString)\n            timeline.setStepped(frameIndex)\n        else\n            timeline.setCurve(frameIndex, curve.asFloat(), map.getFloat(\"c2\", 0f), map.getFloat(\"c3\", 1f), map.getFloat(\"c4\", 1f))\n    }\n\n    internal class LinkedMesh(\n        var mesh: MeshAttachment,\n        var skin: String?,\n        var slotIndex: Int,\n        var parent: String?,\n        var inheritDeform: Boolean\n    )\n}\n\nsuspend fun VfsFile.readSkeletonJson(atlas: Atlas, scale: Float = 1f): SkeletonData\n    = SkeletonJson(atlas).also { it.scale = scale }.readSkeletonData(this)\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine\n\nimport com.esotericsoftware.spine.attachments.Attachment\nimport com.esotericsoftware.spine.attachments.MeshAttachment\nimport com.esotericsoftware.spine.utils.*\nimport com.soywiz.kds.*\nimport com.soywiz.kds.iterators.*\n\n/** Stores attachments by slot index and attachment name.\n *\n *\n * See SkeletonData [SkeletonData.defaultSkin], Skeleton [Skeleton.skin], and\n * [Runtime skins](http://esotericsoftware.com/spine-runtime-skins) in the Spine Runtimes Guide.  */\nclass Skin(\n        /** The skin's name, which is unique across all skins in the skeleton.  */\n        val name: String\n) {\n    internal val attachments: LinkedHashMap<SkinEntry, SkinEntry> = LinkedHashMap()\n    val bones: FastArrayList<BoneData> = FastArrayList()\n    val constraints: FastArrayList<ConstraintData> = FastArrayList()\n    private val lookup = SkinEntry()\n\n    /** Adds an attachment to the skin for the specified slot index and name.  */\n    fun setAttachment(slotIndex: Int, name: String, attachment: Attachment) {\n        require(slotIndex >= 0) { \"slotIndex must be >= 0.\" }\n        val newEntry = SkinEntry(slotIndex, name, attachment)\n        val oldEntry = attachments.put(newEntry, newEntry)\n        if (oldEntry != null) {\n            oldEntry.attachment = attachment\n        }\n    }\n\n    /** Adds all attachments, bones, and constraints from the specified skin to this skin.  */\n    fun addSkin(skin: Skin) {\n        skin.bones.fastForEach { data ->\n            if (!bones.containsIdentity(data)) bones.add(data)\n        }\n\n        skin.constraints.fastForEach { data ->\n            if (!constraints.containsIdentity(data)) constraints.add(data)\n        }\n\n        for (entry in skin.attachments.keys)\n            setAttachment(entry.slotIndex, entry.name, entry.attachment!!)\n    }\n\n    /** Adds all bones and constraints and copies of all attachments from the specified skin to this skin. Mesh attachments are not\n     * copied, instead a new linked mesh is created. The attachment copies can be modified without affecting the originals.  */\n    fun copySkin(skin: Skin) {\n        skin.bones.fastForEach { data ->\n            if (!bones.containsIdentity(data)) bones.add(data)\n        }\n\n        skin.constraints.fastForEach { data ->\n            if (!constraints.containsIdentity(data)) constraints.add(data)\n        }\n\n        for (entry in skin.attachments.keys) {\n            if (entry.attachment is MeshAttachment)\n                setAttachment(entry.slotIndex, entry.name, (entry.attachment as MeshAttachment).newLinkedMesh())\n            else\n                setAttachment(entry.slotIndex, entry.name, entry.attachment?.copy() ?: error(\"Cannot be null (verify)\"))\n        }\n    }\n\n    /** Returns the attachment for the specified slot index and name, or null.  */\n    fun getAttachment(slotIndex: Int, name: String): Attachment? {\n        require(slotIndex >= 0) { \"slotIndex must be >= 0.\" }\n        lookup[slotIndex] = name\n        val entry = attachments[lookup]\n        return entry?.attachment\n    }\n\n    /** Removes the attachment in the skin for the specified slot index and name, if any.  */\n    fun removeAttachment(slotIndex: Int, name: String) {\n        require(slotIndex >= 0) { \"slotIndex must be >= 0.\" }\n        lookup[slotIndex] = name\n        attachments.remove(lookup)\n    }\n\n    /** Returns all attachments in this skin.  */\n    fun getAttachments(): Set<SkinEntry> {\n        return attachments.keys\n    }\n\n    /** Returns all attachments in this skin for the specified slot index.  */\n    fun getAttachments(slotIndex: Int, attachments: FastArrayList<SkinEntry>) {\n        require(slotIndex >= 0) { \"slotIndex must be >= 0.\" }\n        for (entry in this.attachments.keys)\n            if (entry.slotIndex == slotIndex) attachments.add(entry)\n    }\n\n    /** Clears all attachments, bones, and constraints.  */\n    fun clear() {\n        //attachments.clear(1024)\n        attachments.clear()\n        bones.clear()\n        constraints.clear()\n    }\n\n    override fun toString(): String {\n        return name\n    }\n\n    /** Attach each attachment in this skin if the corresponding attachment in the old skin is currently attached.  */\n    internal fun attachAll(skeleton: Skeleton, oldSkin: Skin) {\n        for (entry in oldSkin.attachments.keys) {\n            val slotIndex = entry.slotIndex\n            val slot = skeleton.slots[slotIndex]\n            if (slot.attachment === entry.attachment) {\n                val attachment = getAttachment(slotIndex, entry.name)\n                if (attachment != null) slot.setAttachment(attachment)\n            }\n        }\n    }\n\n    /** Stores an entry in the skin consisting of the slot index, name, and attachment  */\n    class SkinEntry {\n        var slotIndex: Int = 0\n            internal set\n\n        /** The name the attachment is associated with, equivalent to the skin placeholder name in the Spine editor.  */\n        lateinit var name: String\n            internal set\n        var attachment: Attachment? = null\n            internal set\n        private var hashCode: Int = 0\n\n        internal constructor() {\n            set(0, \"\")\n        }\n\n        internal constructor(slotIndex: Int, name: String, attachment: Attachment) {\n            set(slotIndex, name)\n            this.attachment = attachment\n        }\n\n        internal operator fun set(slotIndex: Int, name: String) {\n            this.slotIndex = slotIndex\n            this.name = name\n            this.hashCode = name.hashCode() + slotIndex * 37\n        }\n\n        override fun hashCode(): Int {\n            return hashCode\n        }\n\n        override fun equals(`object`: Any?): Boolean {\n            if (`object` == null) return false\n            val other = `object` as SkinEntry?\n            if (slotIndex != other!!.slotIndex) return false\n            return if (name != other.name) false else true\n        }\n\n        override fun toString(): String {\n            return \"$slotIndex:$name\"\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine\n\nimport com.soywiz.korim.color.RGBAf\n\nimport com.esotericsoftware.spine.Animation.DeformTimeline\nimport com.esotericsoftware.spine.attachments.Attachment\nimport com.esotericsoftware.spine.attachments.VertexAttachment\nimport com.soywiz.kds.*\n\n/** Stores a slot's current pose. Slots organize attachments for [Skeleton.drawOrder] purposes and provide a place to store\n * state for an attachment. State cannot be stored in an attachment itself because attachments are stateless and may be shared\n * across multiple skeletons.  */\nclass Slot {\n    /** The slot's setup pose data.  */\n    val data: SlotData\n\n    /** The bone this slot belongs to.  */\n    val bone: Bone\n\n    /** The color used to tint the slot's attachment. If [.getDarkColor] is set, this is used as the light color for two\n     * color tinting.  */\n    val color = RGBAf()\n\n    /** The dark color used to tint the slot's attachment for two color tinting, or null if two color tinting is not used. The dark\n     * color's alpha is not used.  */\n    val darkColor: RGBAf?\n    internal var attachment: Attachment? = null\n    private var attachmentTime: Float = 0.toFloat()\n\n    /** Values to deform the slot's attachment. For an unweighted mesh, the entries are local positions for each vertex. For a\n     * weighted mesh, the entries are an offset for each vertex which will be added to the mesh's local vertex positions.\n     *\n     *\n     * See [VertexAttachment.computeWorldVertices] and [DeformTimeline].  */\n    var deform: FloatArrayList = FloatArrayList()\n\n    internal var attachmentState: Int = 0\n\n    /** The skeleton this slot belongs to.  */\n    val skeleton: Skeleton\n        get() = bone.skeleton\n\n    constructor(data: SlotData, bone: Bone) {\n        this.data = data\n        this.bone = bone\n        darkColor = if (data.darkColor == null) null else RGBAf()\n        setToSetupPose()\n    }\n\n    /** Copy constructor.  */\n    constructor(slot: Slot, bone: Bone) {\n        data = slot.data\n        this.bone = bone\n        color.setTo(slot.color)\n        darkColor = if (slot.darkColor == null) null else RGBAf(slot.darkColor)\n        attachment = slot.attachment\n        attachmentTime = slot.attachmentTime\n        this.deform.add(slot.deform)\n    }\n\n    /** The current attachment for the slot, or null if the slot has no attachment.  */\n    fun getAttachment(): Attachment? {\n        return attachment\n    }\n\n    /** Sets the slot's attachment and, if the attachment changed, resets [.attachmentTime] and clears [.deform].\n     * @param attachment May be null.\n     */\n    fun setAttachment(attachment: Attachment?) {\n        if (this.attachment === attachment) return\n        this.attachment = attachment\n        attachmentTime = bone.skeleton.time\n        this.deform!!.clear()\n    }\n\n    /** The time that has elapsed since the last time the attachment was set or cleared. Relies on Skeleton\n     * [Skeleton.time].  */\n    fun getAttachmentTime(): Float {\n        return bone.skeleton.time - attachmentTime\n    }\n\n    fun setAttachmentTime(time: Float) {\n        attachmentTime = bone.skeleton.time - time\n    }\n\n    /** Sets this slot to the setup pose.  */\n    fun setToSetupPose() {\n        color.setTo(data.color)\n        darkColor?.setTo(data.darkColor!!)\n        if (data.attachmentName == null)\n            setAttachment(null)\n        else {\n            attachment = null\n            setAttachment(bone.skeleton.getAttachment(data.index, data.attachmentName!!))\n        }\n    }\n\n    override fun toString(): String {\n        return data.name\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine\n\nimport com.soywiz.korim.color.RGBAf\n\n/** Stores the setup pose for a [Slot].  */\nclass SlotData(\n    /** The index of the slot in [Skeleton.getSlots].  */\n    val index: Int,\n    /** The name of the slot, which is unique across all slots in the skeleton.  */\n    val name: String,\n    /** The bone this slot belongs to.  */\n    val boneData: BoneData\n) {\n    init {\n        require(index >= 0) { \"index must be >= 0.\" }\n    }\n\n    /** The color used to tint the slot's attachment. If [.getDarkColor] is set, this is used as the light color for two\n     * color tinting.  */\n    val color = RGBAf(1f, 1f, 1f, 1f)\n    /** The dark color used to tint the slot's attachment for two color tinting, or null if two color tinting is not used. The dark\n     * color's alpha is not used.  */\n    /** @param darkColor May be null.\n     */\n    var darkColor: RGBAf? = null\n    /** The name of the attachment that is visible for this slot in the setup pose, or null if no attachment is visible.  */\n    /** @param attachmentName May be null.\n     */\n    var attachmentName: String? = null\n    lateinit internal var blendMode: BlendMode\n\n    /** The blend mode for drawing the slot's attachment.  */\n    fun getBlendMode(): BlendMode {\n        return blendMode\n    }\n\n    fun setBlendMode(blendMode: BlendMode) {\n        this.blendMode = blendMode\n    }\n\n    override fun toString(): String {\n        return name\n    }\n}\n","package com.esotericsoftware.spine\n\nimport com.soywiz.korim.atlas.*\nimport com.soywiz.korim.format.ImageOrientation\n\nclass SpineRegion(val entry: Atlas.Entry) {\n    val bmpSlice = entry.slice\n    val bmp = bmpSlice.bmpBase\n    val texture = bmp\n    var rotate = entry.info.imageOrientation != ImageOrientation.ORIGINAL\n    val u: Float = bmpSlice.tl_x\n    val u2: Float = bmpSlice.br_x\n    val v: Float = if (rotate) bmpSlice.br_y else bmpSlice.tl_y\n    val v2: Float = if (rotate) bmpSlice.tl_y else bmpSlice.br_y\n    var offsetX = (entry.info.virtFrame?.x ?: 0).toFloat()\n    var offsetY = (entry.info.virtFrame?.y ?: 0).toFloat()\n    var originalWidth = (entry.info.virtFrame?.w ?: entry.info.srcWidth).toFloat()\n    var originalHeight = (entry.info.virtFrame?.h ?: entry.info.srcHeight).toFloat()\n    var packedWidth = entry.info.srcWidth.toFloat()\n    var packedHeight = entry.info.srcHeight.toFloat()\n    var degrees = if (rotate) 90 else 0\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine\n\nimport com.esotericsoftware.spine.utils.SpineUtils.PI\nimport com.esotericsoftware.spine.utils.SpineUtils.PI2\nimport com.esotericsoftware.spine.utils.SpineUtils.atan2\nimport com.esotericsoftware.spine.utils.SpineUtils.cos\nimport com.esotericsoftware.spine.utils.SpineUtils.degRad\nimport com.esotericsoftware.spine.utils.SpineUtils.sin\nimport com.esotericsoftware.spine.utils.SpineVector2\nimport com.soywiz.kds.*\nimport com.soywiz.kds.iterators.*\n\n/** Stores the current pose for a transform constraint. A transform constraint adjusts the world transform of the constrained\n * bones to match that of the target bone.\n *\n *\n * See [Transform constraints](http://esotericsoftware.com/spine-transform-constraints) in the Spine User Guide.  */\nclass TransformConstraint : Updatable {\n    /** The transform constraint's setup pose data.  */\n    val data: TransformConstraintData\n\n    /** The bones that will be modified by this transform constraint.  */\n    val bones: FastArrayList<Bone>\n    internal var target: Bone? = null\n\n    /** A percentage (0-1) that controls the mix between the constrained and unconstrained rotations.  */\n    var rotateMix: Float = 0.toFloat()\n\n    /** A percentage (0-1) that controls the mix between the constrained and unconstrained translations.  */\n    var translateMix: Float = 0.toFloat()\n\n    /** A percentage (0-1) that controls the mix between the constrained and unconstrained scales.  */\n    var scaleMix: Float = 0.toFloat()\n\n    /** A percentage (0-1) that controls the mix between the constrained and unconstrained scales.  */\n    var shearMix: Float = 0.toFloat()\n\n    override var isActive: Boolean = false\n        internal set\n    internal val temp = SpineVector2()\n\n    constructor(data: TransformConstraintData, skeleton: Skeleton) {\n        this.data = data\n        rotateMix = data.rotateMix\n        translateMix = data.translateMix\n        scaleMix = data.scaleMix\n        shearMix = data.shearMix\n        bones = FastArrayList(data.bones.size)\n        data.bones.fastForEach { boneData ->\n            bones.add(skeleton.findBone(boneData.name)!!)\n        }\n        target = skeleton.findBone(data.target.name)\n    }\n\n    /** Copy constructor.  */\n    constructor(constraint: TransformConstraint, skeleton: Skeleton) {\n        data = constraint.data\n        bones = FastArrayList(constraint.bones.size)\n        constraint.bones.fastForEach { bone ->\n            bones.add(skeleton.bones[bone.data.index])\n        }\n        target = skeleton.bones[constraint.target!!.data.index]\n        rotateMix = constraint.rotateMix\n        translateMix = constraint.translateMix\n        scaleMix = constraint.scaleMix\n        shearMix = constraint.shearMix\n    }\n\n    /** Applies the constraint to the constrained bones.  */\n    fun apply() {\n        update()\n    }\n\n    override fun update() {\n        if (data.local) {\n            if (data.relative)\n                applyRelativeLocal()\n            else\n                applyAbsoluteLocal()\n        } else {\n            if (data.relative)\n                applyRelativeWorld()\n            else\n                applyAbsoluteWorld()\n        }\n    }\n\n    private fun applyAbsoluteWorld() {\n        val rotateMix = this.rotateMix\n        val translateMix = this.translateMix\n        val scaleMix = this.scaleMix\n        val shearMix = this.shearMix\n        val target = this.target\n        val ta = target!!.a\n        val tb = target.b\n        val tc = target.c\n        val td = target.d\n        val degRadReflect = if (ta * td - tb * tc > 0) degRad else -degRad\n        val offsetRotation = data.offsetRotation * degRadReflect\n        val offsetShearY = data.offsetShearY * degRadReflect\n        val bones = this.bones\n        var i = 0\n        val n = bones.size\n        while (i < n) {\n            val bone = bones[i]\n            var modified = false\n\n            if (rotateMix != 0f) {\n                val a = bone.a\n                val b = bone.b\n                val c = bone.c\n                val d = bone.d\n                var r = atan2(tc, ta) - atan2(c, a) + offsetRotation\n                if (r > PI)\n                    r -= PI2\n                else if (r < -PI) r += PI2\n                r *= rotateMix\n                val cos = cos(r)\n                val sin = sin(r)\n                bone.a = cos * a - sin * c\n                bone.b = cos * b - sin * d\n                bone.c = sin * a + cos * c\n                bone.d = sin * b + cos * d\n                modified = true\n            }\n\n            if (translateMix != 0f) {\n                val temp = this.temp\n                target.localToWorld(temp.set(data.offsetX, data.offsetY))\n                bone.worldX += (temp.x - bone.worldX) * translateMix\n                bone.worldY += (temp.y - bone.worldY) * translateMix\n                modified = true\n            }\n\n            if (scaleMix > 0) {\n                var s = kotlin.math.sqrt((bone.a * bone.a + bone.c * bone.c).toDouble()).toFloat()\n                if (s != 0f) s = (s + (kotlin.math.sqrt((ta * ta + tc * tc).toDouble()).toFloat() - s + data.offsetScaleX) * scaleMix) / s\n                bone.a *= s\n                bone.c *= s\n                s = kotlin.math.sqrt((bone.b * bone.b + bone.d * bone.d).toDouble()).toFloat()\n                if (s != 0f) s = (s + (kotlin.math.sqrt((tb * tb + td * td).toDouble()).toFloat() - s + data.offsetScaleY) * scaleMix) / s\n                bone.b *= s\n                bone.d *= s\n                modified = true\n            }\n\n            if (shearMix > 0) {\n                val b = bone.b\n                val d = bone.d\n                val by = atan2(d, b)\n                var r = atan2(td, tb) - atan2(tc, ta) - (by - atan2(bone.c, bone.a))\n                if (r > PI)\n                    r -= PI2\n                else if (r < -PI) r += PI2\n                r = by + (r + offsetShearY) * shearMix\n                val s = kotlin.math.sqrt((b * b + d * d).toDouble()).toFloat()\n                bone.b = cos(r) * s\n                bone.d = sin(r) * s\n                modified = true\n            }\n\n            if (modified) bone.appliedValid = false\n            i++\n        }\n    }\n\n    private fun applyRelativeWorld() {\n        val rotateMix = this.rotateMix\n        val translateMix = this.translateMix\n        val scaleMix = this.scaleMix\n        val shearMix = this.shearMix\n        val target = this.target\n        val ta = target!!.a\n        val tb = target.b\n        val tc = target.c\n        val td = target.d\n        val degRadReflect = if (ta * td - tb * tc > 0) degRad else -degRad\n        val offsetRotation = data.offsetRotation * degRadReflect\n        val offsetShearY = data.offsetShearY * degRadReflect\n        val bones = this.bones\n        var i = 0\n        val n = bones.size\n        while (i < n) {\n            val bone = bones[i]\n            var modified = false\n\n            if (rotateMix != 0f) {\n                val a = bone.a\n                val b = bone.b\n                val c = bone.c\n                val d = bone.d\n                var r = atan2(tc, ta) + offsetRotation\n                if (r > PI)\n                    r -= PI2\n                else if (r < -PI) r += PI2\n                r *= rotateMix\n                val cos = cos(r)\n                val sin = sin(r)\n                bone.a = cos * a - sin * c\n                bone.b = cos * b - sin * d\n                bone.c = sin * a + cos * c\n                bone.d = sin * b + cos * d\n                modified = true\n            }\n\n            if (translateMix != 0f) {\n                val temp = this.temp\n                target.localToWorld(temp.set(data.offsetX, data.offsetY))\n                bone.worldX += temp.x * translateMix\n                bone.worldY += temp.y * translateMix\n                modified = true\n            }\n\n            if (scaleMix > 0) {\n                var s = (kotlin.math.sqrt((ta * ta + tc * tc).toDouble()).toFloat() - 1 + data.offsetScaleX) * scaleMix + 1\n                bone.a *= s\n                bone.c *= s\n                s = (kotlin.math.sqrt((tb * tb + td * td).toDouble()).toFloat() - 1 + data.offsetScaleY) * scaleMix + 1\n                bone.b *= s\n                bone.d *= s\n                modified = true\n            }\n\n            if (shearMix > 0) {\n                var r = atan2(td, tb) - atan2(tc, ta)\n                if (r > PI)\n                    r -= PI2\n                else if (r < -PI) r += PI2\n                val b = bone.b\n                val d = bone.d\n                r = atan2(d, b) + (r - PI / 2 + offsetShearY) * shearMix\n                val s = kotlin.math.sqrt((b * b + d * d).toDouble()).toFloat()\n                bone.b = cos(r) * s\n                bone.d = sin(r) * s\n                modified = true\n            }\n\n            if (modified) bone.appliedValid = false\n            i++\n        }\n    }\n\n    private fun applyAbsoluteLocal() {\n        val rotateMix = this.rotateMix\n        val translateMix = this.translateMix\n        val scaleMix = this.scaleMix\n        val shearMix = this.shearMix\n        val target = this.target\n        if (!target!!.appliedValid) target.updateAppliedTransform()\n        val bones = this.bones\n        var i = 0\n        val n = bones.size\n        while (i < n) {\n            val bone = bones[i]\n            if (!bone.appliedValid) bone.updateAppliedTransform()\n\n            var rotation = bone.arotation\n            if (rotateMix != 0f) {\n                var r = target.arotation - rotation + data.offsetRotation\n                r -= ((16384 - (16384.499999999996 - r / 360).toInt()) * 360).toFloat()\n                rotation += r * rotateMix\n            }\n\n            var x = bone.ax\n            var y = bone.ay\n            if (translateMix != 0f) {\n                x += (target.ax - x + data.offsetX) * translateMix\n                y += (target.ay - y + data.offsetY) * translateMix\n            }\n\n            var scaleX = bone.ascaleX\n            var scaleY = bone.ascaleY\n            if (scaleMix != 0f) {\n                if (scaleX != 0f) scaleX = (scaleX + (target.ascaleX - scaleX + data.offsetScaleX) * scaleMix) / scaleX\n                if (scaleY != 0f) scaleY = (scaleY + (target.ascaleY - scaleY + data.offsetScaleY) * scaleMix) / scaleY\n            }\n\n            var shearY = bone.ashearY\n            if (shearMix != 0f) {\n                var r = target.ashearY - shearY + data.offsetShearY\n                r -= ((16384 - (16384.499999999996 - r / 360).toInt()) * 360).toFloat()\n                shearY += r * shearMix\n            }\n\n            bone.updateWorldTransform(x, y, rotation, scaleX, scaleY, bone.ashearX, shearY)\n            i++\n        }\n    }\n\n    private fun applyRelativeLocal() {\n        val rotateMix = this.rotateMix\n        val translateMix = this.translateMix\n        val scaleMix = this.scaleMix\n        val shearMix = this.shearMix\n        val target = this.target\n        if (!target!!.appliedValid) target.updateAppliedTransform()\n        val bones = this.bones\n        var i = 0\n        val n = bones.size\n        while (i < n) {\n            val bone = bones[i]\n            if (!bone.appliedValid) bone.updateAppliedTransform()\n\n            var rotation = bone.arotation\n            if (rotateMix != 0f) rotation += (target.arotation + data.offsetRotation) * rotateMix\n\n            var x = bone.ax\n            var y = bone.ay\n            if (translateMix != 0f) {\n                x += (target.ax + data.offsetX) * translateMix\n                y += (target.ay + data.offsetY) * translateMix\n            }\n\n            var scaleX = bone.ascaleX\n            var scaleY = bone.ascaleY\n            if (scaleMix != 0f) {\n                scaleX *= (target.ascaleX - 1 + data.offsetScaleX) * scaleMix + 1\n                scaleY *= (target.ascaleY - 1 + data.offsetScaleY) * scaleMix + 1\n            }\n\n            var shearY = bone.ashearY\n            if (shearMix != 0f) shearY += (target.ashearY + data.offsetShearY) * shearMix\n\n            bone.updateWorldTransform(x, y, rotation, scaleX, scaleY, bone.ashearX, shearY)\n            i++\n        }\n    }\n\n    /** The target bone whose world transform will be copied to the constrained bones.  */\n    fun getTarget(): Bone? {\n        return target\n    }\n\n    fun setTarget(target: Bone) {\n        this.target = target\n    }\n\n    override fun toString(): String {\n        return data.name\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine\n\nimport com.soywiz.kds.*\n\n/** Stores the setup pose for a [TransformConstraint].\n *\n *\n * See [Transform constraints](http://esotericsoftware.com/spine-transform-constraints) in the Spine User Guide.  */\nclass TransformConstraintData(name: String) : ConstraintData(name) {\n    /** The bones that will be modified by this transform constraint.  */\n    val bones: FastArrayList<BoneData> = FastArrayList()\n    internal lateinit var target: BoneData\n\n    /** A percentage (0-1) that controls the mix between the constrained and unconstrained rotations.  */\n    var rotateMix: Float = 0.toFloat()\n\n    /** A percentage (0-1) that controls the mix between the constrained and unconstrained translations.  */\n    var translateMix: Float = 0.toFloat()\n\n    /** A percentage (0-1) that controls the mix between the constrained and unconstrained scales.  */\n    var scaleMix: Float = 0.toFloat()\n\n    /** A percentage (0-1) that controls the mix between the constrained and unconstrained shears.  */\n    var shearMix: Float = 0.toFloat()\n\n    /** An offset added to the constrained bone rotation.  */\n    var offsetRotation: Float = 0.toFloat()\n\n    /** An offset added to the constrained bone X translation.  */\n    var offsetX: Float = 0.toFloat()\n\n    /** An offset added to the constrained bone Y translation.  */\n    var offsetY: Float = 0.toFloat()\n\n    /** An offset added to the constrained bone scaleX.  */\n    var offsetScaleX: Float = 0.toFloat()\n\n    /** An offset added to the constrained bone scaleY.  */\n    var offsetScaleY: Float = 0.toFloat()\n\n    /** An offset added to the constrained bone shearY.  */\n    var offsetShearY: Float = 0.toFloat()\n    var relative: Boolean = false\n    var local: Boolean = false\n\n    /** The target bone whose world transform will be copied to the constrained bones.  */\n    fun getTarget(): BoneData {\n        return target\n    }\n\n    fun setTarget(target: BoneData) {\n        this.target = target\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine.attachments\n\nimport com.esotericsoftware.spine.*\n\nimport com.soywiz.korim.atlas.*\n\n/** An [AttachmentLoader] that configures attachments using texture regions from an [Atlas].\n *\n *\n * See [Loading skeleton data](http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data) in the\n * Spine Runtimes Guide.  */\nclass AtlasAttachmentLoader(private val atlas: Atlas) : AttachmentLoader {\n    private val regions = HashMap<String, SpineRegion>()\n\n    private fun findRegion(path: String): SpineRegion? {\n        return regions.getOrPut(path) {\n            val entry = atlas.tryGetEntryByName(path) ?: error(\"Can't find '$path' in atlas\")\n            SpineRegion(entry)\n        }\n    }\n    override fun newRegionAttachment(skin: Skin, name: String, path: String): RegionAttachment? {\n        val region = findRegion(path)\n                ?: throw RuntimeException(\"Region not found in atlas: $path (region attachment: $name)\")\n        val attachment = RegionAttachment(name)\n        attachment.region = region\n        return attachment\n    }\n\n    override fun newMeshAttachment(skin: Skin, name: String, path: String): MeshAttachment? {\n        val region = findRegion(path)\n                ?: throw RuntimeException(\"Region not found in atlas: $path (mesh attachment: $name)\")\n        val attachment = MeshAttachment(name)\n        attachment.region = region\n        return attachment\n    }\n\n    override fun newBoundingBoxAttachment(skin: Skin, name: String): BoundingBoxAttachment? {\n        return BoundingBoxAttachment(name)\n    }\n\n    override fun newClippingAttachment(skin: Skin, name: String): ClippingAttachment? {\n        return ClippingAttachment(name)\n    }\n\n    override fun newPathAttachment(skin: Skin, name: String): PathAttachment? {\n        return PathAttachment(name)\n    }\n\n    override fun newPointAttachment(skin: Skin, name: String): PointAttachment? {\n        return PointAttachment(name)\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine.attachments\n\n/** The base class for all attachments.  */\nabstract class Attachment(\n    /** The attachment's name.  */\n    var name: String\n) {\n    override fun toString(): String = name\n\n    /** Returns a copy of the attachment.  */\n    abstract fun copy(): Attachment\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine.attachments\n\nenum class AttachmentType {\n    region, boundingbox, mesh, linkedmesh, path, point, clipping;\n\n\n    companion object {\n\n        val values = values()\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine.attachments\n\nimport com.soywiz.korim.color.RGBAf\nimport com.esotericsoftware.spine.SkeletonBounds\n\n/** An attachment with vertices that make up a polygon. Can be used for hit detection, creating physics bodies, spawning particle\n * effects, and more.\n *\n *\n * See [SkeletonBounds] and [Bounding Boxes](http://esotericsoftware.com/spine-bounding-boxes) in the Spine User\n * Guide.  */\nclass BoundingBoxAttachment(name: String) : VertexAttachment(name) {\n    // Nonessential.\n    /** The color of the bounding box as it was in Spine. Available only when nonessential data was exported. Bounding boxes are\n     * not usually rendered at runtime.  */\n    val color = RGBAf(0.38f, 0.94f, 0f, 1f) // 60f000ff\n\n    override fun copy(): Attachment {\n        val copy = BoundingBoxAttachment(name)\n        copyTo(copy)\n        copy.color.setTo(color)\n        return copy\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine.attachments\n\nimport com.soywiz.korim.color.RGBAf\nimport com.esotericsoftware.spine.SlotData\n\n/** An attachment with vertices that make up a polygon used for clipping the rendering of other attachments.  */\nclass ClippingAttachment(name: String) : VertexAttachment(name) {\n    /** Clipping is performed between the clipping polygon's slot and the end slot. Returns -1 if clipping is done until the end of\n     * the skeleton's rendering.  */\n    lateinit var endSlot: SlotData\n\n    // Nonessential.\n    /** The color of the clipping polygon as it was in Spine. Available only when nonessential data was exported. Clipping polygons\n     * are not usually rendered at runtime.  */\n    val color = RGBAf(0.2275f, 0.2275f, 0.8078f, 1f) // ce3a3aff\n\n    override fun copy(): Attachment {\n        val copy = ClippingAttachment(name)\n        copyTo(copy)\n        copy.endSlot = endSlot\n        copy.color.setTo(color)\n        return copy\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine.attachments\n\nimport com.esotericsoftware.spine.SpineRegion\nimport com.esotericsoftware.spine.utils.SpineUtils.arraycopy\nimport com.soywiz.korim.color.*\n\n/** An attachment that displays a textured mesh. A mesh has hull vertices and internal vertices within the hull. Holes are not\n * supported. Each vertex has UVs (texture coordinates) and triangles are used to map an image on to the mesh.\n *\n *\n * See [Mesh attachments](http://esotericsoftware.com/spine-meshes) in the Spine User Guide.  */\nclass MeshAttachment(name: String) : VertexAttachment(name) {\n    var region: SpineRegion? = null\n\n    /** The name of the texture region for this attachment.  */\n    var path: String? = null\n    /** The UV pair for each vertex, normalized within the texture region.  */\n    /** Sets the texture coordinates for the region. The values are u,v pairs for each vertex.  */\n    lateinit var regionUVs: FloatArray\n\n    /** The UV pair for each vertex, normalized within the entire texture.\n     *\n     *\n     * See [.updateUVs].  */\n    var uVs: FloatArray? = null\n\n    /** Triplets of vertex indices which describe the mesh's triangulation.  */\n    lateinit var triangles: ShortArray\n\n    /** The color to tint the mesh.  */\n    val color = RGBAf(1f, 1f, 1f, 1f)\n\n    /** The number of entries at the beginning of [.vertices] that make up the mesh hull.  */\n    var hullLength: Int = 0\n    /** The parent mesh if this is a linked mesh, else null. A linked mesh shares the [.bones], [.vertices],\n     * [.regionUVs], [.triangles], [.hullLength], [.edges], [.width], and [.height] with the\n     * parent mesh, but may have a different [.name] or [.path] (and therefore a different texture).  */\n    /** @param parentMesh May be null.\n     */\n    var parentMesh: MeshAttachment? = null\n        set(parentMesh) {\n            field = parentMesh\n            if (parentMesh != null) {\n                bones = parentMesh.bones\n                vertices = parentMesh.vertices\n                regionUVs = parentMesh.regionUVs\n                triangles = parentMesh.triangles\n                hullLength = parentMesh.hullLength\n                worldVerticesLength = parentMesh.worldVerticesLength\n                edges = parentMesh.edges\n                width = parentMesh.width\n                height = parentMesh.height\n            }\n        }\n\n    // Nonessential.\n    /** Vertex index pairs describing edges for controling triangulation. Mesh triangles will never cross edges. Only available if\n     * nonessential data was exported. Triangulation is not performed at runtime.  */\n    var edges: ShortArray? = null\n\n    /** The width of the mesh's image. Available only when nonessential data was exported.  */\n    var width: Float = 0.toFloat()\n\n    /** The height of the mesh's image. Available only when nonessential data was exported.  */\n    var height: Float = 0.toFloat()\n\n    /** Calculates [.uvs] using [.regionUVs] and the [.region]. Must be called after changing the region UVs or\n     * region.  */\n    fun updateUVs() {\n        val regionUVs = this.regionUVs\n        if (this.uVs == null || this.uVs!!.size != regionUVs!!.size) this.uVs = FloatArray(regionUVs!!.size)\n        val uvs = this.uVs\n        val n = uvs!!.size\n        var u: Float\n        var v: Float\n        val width: Float\n        val height: Float\n        if (region is SpineRegion) {\n            u = region!!.u\n            v = region!!.v\n            val region = this.region as SpineRegion?\n            val textureWidth = region!!.texture.width\n            val textureHeight = region.texture.height\n            when (region.degrees) {\n                90 -> {\n                    u -= (region.originalHeight - region.offsetY - region.packedWidth) / textureWidth\n                    v -= (region.originalWidth - region.offsetX - region.packedHeight) / textureHeight\n                    width = region.originalHeight / textureWidth\n                    height = region.originalWidth / textureHeight\n                    run {\n                        var i = 0\n                        while (i < n) {\n                            uvs[i] = u + regionUVs[i + 1] * width\n                            uvs[i + 1] = v + (1 - regionUVs[i]) * height\n                            i += 2\n                        }\n                    }\n                    return\n                }\n                180 -> {\n                    u -= (region.originalWidth - region.offsetX - region.packedWidth) / textureWidth\n                    v -= region.offsetY / textureHeight\n                    width = region.originalWidth / textureWidth\n                    height = region.originalHeight / textureHeight\n                    run {\n                        var i = 0\n                        while (i < n) {\n                            uvs[i] = u + (1 - regionUVs[i]) * width\n                            uvs[i + 1] = v + (1 - regionUVs[i + 1]) * height\n                            i += 2\n                        }\n                    }\n                    return\n                }\n                270 -> {\n                    u -= region.offsetY / textureWidth\n                    v -= region.offsetX / textureHeight\n                    width = region.originalHeight / textureWidth\n                    height = region.originalWidth / textureHeight\n                    var i = 0\n                    while (i < n) {\n                        uvs[i] = u + (1 - regionUVs[i + 1]) * width\n                        uvs[i + 1] = v + regionUVs[i] * height\n                        i += 2\n                    }\n                    return\n                }\n            }\n            u -= region.offsetX / textureWidth\n            v -= (region.originalHeight - region.offsetY - region.packedHeight) / textureHeight\n            width = region.originalWidth / textureWidth\n            height = region.originalHeight / textureHeight\n        } else if (region == null) {\n            v = 0f\n            u = v\n            height = 1f\n            width = height\n        } else {\n            u = region!!.u\n            v = region!!.v\n            width = region!!.u2 - u\n            height = region!!.v2 - v\n        }\n        var i = 0\n        while (i < n) {\n            uvs[i] = u + regionUVs[i] * width\n            uvs[i + 1] = v + regionUVs[i + 1] * height\n            i += 2\n        }\n    }\n\n    override fun copy(): Attachment {\n        if (this.parentMesh != null) return newLinkedMesh()\n\n        val copy = MeshAttachment(name)\n        copy.region = region\n        copy.path = path\n        copy.color.setTo(color)\n\n        copyTo(copy)\n        copy.regionUVs = FloatArray(regionUVs.size)\n        arraycopy(regionUVs, 0, copy.regionUVs, 0, regionUVs.size)\n        copy.uVs = FloatArray(uVs!!.size)\n        arraycopy(uVs!!, 0, copy.uVs!!, 0, uVs!!.size)\n        copy.triangles = ShortArray(triangles.size)\n        arraycopy(triangles, 0, copy.triangles, 0, triangles.size)\n        copy.hullLength = hullLength\n\n        // Nonessential.\n        if (edges != null) {\n            copy.edges = ShortArray(edges!!.size)\n            arraycopy(edges!!, 0, copy.edges!!, 0, edges!!.size)\n        }\n        copy.width = width\n        copy.height = height\n        return copy\n    }\n\n    /** Returns a new mesh with the [.parentMesh] set to this mesh's parent mesh, if any, else to this mesh.  */\n    fun newLinkedMesh(): MeshAttachment {\n        val mesh = MeshAttachment(name)\n        mesh.region = region\n        mesh.path = path\n        mesh.color.setTo(color)\n        mesh.deformAttachment = deformAttachment\n        mesh.parentMesh = if (this.parentMesh != null) this.parentMesh else this\n        mesh.updateUVs()\n        return mesh\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine.attachments\n\nimport com.soywiz.korim.color.RGBAf\n\nimport com.esotericsoftware.spine.PathConstraint\nimport com.esotericsoftware.spine.utils.SpineUtils.arraycopy\n\n/** An attachment whose vertices make up a composite Bezier curve.\n *\n *\n * See [PathConstraint] and [Paths](http://esotericsoftware.com/spine-paths) in the Spine User Guide.  */\nclass PathAttachment(name: String) : VertexAttachment(name) {\n    /** The lengths along the path in the setup pose from the start of the path to the end of each Bezier curve.  */\n    lateinit var lengths: FloatArray\n\n    /** If true, the start and end knots are connected.  */\n    var closed: Boolean = false\n\n    /** If true, additional calculations are performed to make calculating positions along the path more accurate. If false, fewer\n     * calculations are performed but calculating positions along the path is less accurate.  */\n    var constantSpeed: Boolean = false\n\n    // Nonessential.\n    /** The color of the path as it was in Spine. Available only when nonessential data was exported. Paths are not usually\n     * rendered at runtime.  */\n    val color = RGBAf(1f, 0.5f, 0f, 1f) // ff7f00ff\n\n    override fun copy(): Attachment {\n        val copy = PathAttachment(name)\n        copyTo(copy)\n        copy.lengths = FloatArray(lengths.size)\n        arraycopy(lengths, 0, copy.lengths, 0, lengths.size)\n        copy.closed = closed\n        copy.constantSpeed = constantSpeed\n        copy.color.setTo(color)\n        return copy\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine.attachments\n\nimport com.esotericsoftware.spine.utils.SpineUtils.cosDeg\nimport com.esotericsoftware.spine.utils.SpineUtils.radDeg\nimport com.esotericsoftware.spine.utils.SpineUtils.sinDeg\n\nimport com.soywiz.korim.color.RGBAf\nimport com.esotericsoftware.spine.utils.SpineVector2\nimport com.esotericsoftware.spine.Bone\n\n/** An attachment which is a single point and a rotation. This can be used to spawn projectiles, particles, etc. A bone can be\n * used in similar ways, but a PointAttachment is slightly less expensive to compute and can be hidden, shown, and placed in a\n * skin.\n *\n *\n * See [Point Attachments](http://esotericsoftware.com/spine-point-attachments) in the Spine User Guide.  */\nclass PointAttachment(name: String) : Attachment(name) {\n    var x: Float = 0.toFloat()\n    var y: Float = 0.toFloat()\n    var rotation: Float = 0.toFloat()\n\n    // Nonessential.\n    /** The color of the point attachment as it was in Spine. Available only when nonessential data was exported. Point attachments\n     * are not usually rendered at runtime.  */\n    val color = RGBAf(0.9451f, 0.9451f, 0f, 1f) // f1f100ff\n\n    fun computeWorldPosition(bone: Bone, point: SpineVector2): SpineVector2 {\n        point.x = x * bone.a + y * bone.b + bone.worldX\n        point.y = x * bone.c + y * bone.d + bone.worldY\n        return point\n    }\n\n    fun computeWorldRotation(bone: Bone): Float {\n        val cos = cosDeg(rotation)\n        val sin = sinDeg(rotation)\n        val x = cos * bone.a + sin * bone.b\n        val y = cos * bone.c + sin * bone.d\n        return kotlin.math.atan2(y.toDouble(), x.toDouble()).toFloat() * radDeg\n    }\n\n    override fun copy(): Attachment {\n        val copy = PointAttachment(name)\n        copy.x = x\n        copy.y = y\n        copy.rotation = rotation\n        copy.color.setTo(color)\n        return copy\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine.attachments\n\nimport com.esotericsoftware.spine.SpineRegion\n\nimport com.esotericsoftware.spine.Bone\nimport com.esotericsoftware.spine.utils.*\nimport com.esotericsoftware.spine.utils.SpineUtils.arraycopy\nimport com.soywiz.korim.color.*\n\n/** An attachment that displays a textured quadrilateral.\n *\n *\n * See [Region attachments](http://esotericsoftware.com/spine-regions) in the Spine User Guide.  */\nclass RegionAttachment(name: String) : Attachment(name) {\n\n    private var _region: SpineRegion? = null\n\n    var region: SpineRegion\n        get() = _region ?: error(\"Region was not set before\")\n        set(region) {\n            _region = region\n            val uvs = this.uVs\n            if (region.rotate) {\n                uvs[URX] = region.u\n                uvs[URY] = region.v2\n                uvs[BRX] = region.u\n                uvs[BRY] = region.v\n                uvs[BLX] = region.u2\n                uvs[BLY] = region.v\n                uvs[ULX] = region.u2\n                uvs[ULY] = region.v2\n            } else {\n                uvs[ULX] = region.u\n                uvs[ULY] = region.v2\n                uvs[URX] = region.u\n                uvs[URY] = region.v\n                uvs[BRX] = region.u2\n                uvs[BRY] = region.v\n                uvs[BLX] = region.u2\n                uvs[BLY] = region.v2\n            }\n        }\n\n    /** The name of the texture region for this attachment.  */\n    var path: String? = null\n\n    /** The local x translation.  */\n    var x: Float = 0.toFloat()\n\n    /** The local y translation.  */\n    var y: Float = 0.toFloat()\n\n    /** The local scaleX.  */\n    var scaleX = 1f\n\n    /** The local scaleY.  */\n    var scaleY = 1f\n\n    /** The local rotation.  */\n    var rotation: Float = 0.toFloat()\n\n    /** The width of the region attachment in Spine.  */\n    var width: Float = 0.toFloat()\n\n    /** The height of the region attachment in Spine.  */\n    var height: Float = 0.toFloat()\n    val uVs = FloatArray(8)\n\n    /** For each of the 4 vertices, a pair of `x,y` values that is the local position of the vertex.\n     *\n     *\n     * See [.updateOffset].  */\n    val offset = FloatArray(8)\n\n    /** The color to tint the region attachment.  */\n    val color = RGBAf(1f, 1f, 1f, 1f)\n\n    /** Calculates the [.offset] using the region settings. Must be called after changing region settings.  */\n    fun updateOffset() {\n        val width = width\n        val height = height\n        var localX2 = width / 2\n        var localY2 = height / 2\n        var localX = -localX2\n        var localY = -localY2\n        if (region is SpineRegion) {\n            val region = this.region as SpineRegion?\n            localX += region!!.offsetX / region.originalWidth * width\n            localY += region.offsetY / region.originalHeight * height\n            if (region.rotate) {\n                localX2 -= (region.originalWidth - region.offsetX - region.packedHeight) / region.originalWidth * width\n                localY2 -= (region.originalHeight - region.offsetY - region.packedWidth) / region.originalHeight * height\n            } else {\n                localX2 -= (region.originalWidth - region.offsetX - region.packedWidth) / region.originalWidth * width\n                localY2 -= (region.originalHeight - region.offsetY - region.packedHeight) / region.originalHeight * height\n            }\n        }\n        val scaleX = scaleX\n        val scaleY = scaleY\n        localX *= scaleX\n        localY *= scaleY\n        localX2 *= scaleX\n        localY2 *= scaleY\n        val rotation = rotation\n        val cos = kotlin.math.cos((SpineUtils.degRad * rotation).toDouble()).toFloat()\n        val sin = kotlin.math.sin((SpineUtils.degRad * rotation).toDouble()).toFloat()\n        val x = x\n        val y = y\n        val localXCos = localX * cos + x\n        val localXSin = localX * sin\n        val localYCos = localY * cos + y\n        val localYSin = localY * sin\n        val localX2Cos = localX2 * cos + x\n        val localX2Sin = localX2 * sin\n        val localY2Cos = localY2 * cos + y\n        val localY2Sin = localY2 * sin\n        val offset = this.offset\n        offset[BLX] = localXCos - localYSin\n        offset[BLY] = localYCos + localXSin\n        offset[ULX] = localXCos - localY2Sin\n        offset[ULY] = localY2Cos + localXSin\n        offset[URX] = localX2Cos - localY2Sin\n        offset[URY] = localY2Cos + localX2Sin\n        offset[BRX] = localX2Cos - localYSin\n        offset[BRY] = localYCos + localX2Sin\n    }\n\n    /** Transforms the attachment's four vertices to world coordinates.\n     *\n     *\n     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\n     * Runtimes Guide.\n     * @param worldVertices The output world vertices. Must have a length >= `offset` + 8.\n     * @param offset The `worldVertices` index to begin writing values.\n     * @param stride The number of `worldVertices` entries between the value pairs written.\n     */\n    fun computeWorldVertices(bone: Bone, worldVertices: FloatArray, offset: Int, stride: Int) {\n        var offset = offset\n        val vertexOffset = this.offset\n        val x = bone.worldX\n        val y = bone.worldY\n        val a = bone.a\n        val b = bone.b\n        val c = bone.c\n        val d = bone.d\n        var offsetX: Float\n        var offsetY: Float\n\n        offsetX = vertexOffset[BRX]\n        offsetY = vertexOffset[BRY]\n        worldVertices[offset] = offsetX * a + offsetY * b + x // br\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y\n        offset += stride\n\n        offsetX = vertexOffset[BLX]\n        offsetY = vertexOffset[BLY]\n        worldVertices[offset] = offsetX * a + offsetY * b + x // bl\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y\n        offset += stride\n\n        offsetX = vertexOffset[ULX]\n        offsetY = vertexOffset[ULY]\n        worldVertices[offset] = offsetX * a + offsetY * b + x // ul\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y\n        offset += stride\n\n        offsetX = vertexOffset[URX]\n        offsetY = vertexOffset[URY]\n        worldVertices[offset] = offsetX * a + offsetY * b + x // ur\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y\n    }\n\n    override fun copy(): Attachment {\n        val copy = RegionAttachment(name)\n        copy.region = region\n        copy.path = path\n        copy.x = x\n        copy.y = y\n        copy.scaleX = scaleX\n        copy.scaleY = scaleY\n        copy.rotation = rotation\n        copy.width = width\n        copy.height = height\n        arraycopy(uVs, 0, copy.uVs, 0, 8)\n        arraycopy(offset, 0, copy.offset, 0, 8)\n        copy.color.setTo(color)\n        return copy\n    }\n\n    companion object {\n        val BLX = 0\n        val BLY = 1\n        val ULX = 2\n        val ULY = 3\n        val URX = 4\n        val URY = 5\n        val BRX = 6\n        val BRY = 7\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine.attachments\n\nimport com.esotericsoftware.spine.Bone\nimport com.esotericsoftware.spine.Skeleton\nimport com.esotericsoftware.spine.Slot\nimport com.esotericsoftware.spine.utils.*\nimport com.esotericsoftware.spine.utils.SpineUtils.arraycopy\nimport com.soywiz.korio.concurrent.atomic.*\nimport kotlin.jvm.*\nimport kotlin.native.concurrent.*\n\n/** Base class for an attachment with vertices that are transformed by one or more bones and can be deformed by a slot's\n * [Slot.getDeform].  */\nabstract class VertexAttachment(name: String) : Attachment(name) {\n\n    /** Returns a unique ID for this attachment.  */\n    val id = nextID() and 65535 shl 11\n    /** The bones which affect the [.getVertices]. The array entries are, for each vertex, the number of bones affecting\n     * the vertex followed by that many bone indices, which is the index of the bone in [Skeleton.getBones]. Will be null\n     * if this attachment has no weights.  */\n    /** @param bones May be null if this attachment has no weights.\n     */\n    var bones: IntArray? = null\n\n    /** The vertex positions in the bone's coordinate system. For a non-weighted attachment, the values are `x,y`\n     * entries for each vertex. For a weighted attachment, the values are `x,y,weight` entries for each bone affecting\n     * each vertex.  */\n    var vertices: FloatArray? = null\n\n    /** The maximum number of world vertex values that can be output by\n     * [.computeWorldVertices] using the `count` parameter.  */\n    var worldVerticesLength: Int = 0\n    /** Deform keys for the deform attachment are also applied to this attachment.\n     * @return May be null if no deform keys should be applied.\n     */\n    /** @param deformAttachment May be null if no deform keys should be applied.\n     */\n    var deformAttachment = this\n\n    /** Transforms the attachment's local [.getVertices] to world coordinates. If the slot's [Slot.getDeform] is\n     * not empty, it is used to deform the vertices.\n     *\n     *\n     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\n     * Runtimes Guide.\n     * @param start The index of the first [.getVertices] value to transform. Each vertex has 2 values, x and y.\n     * @param count The number of world vertex values to output. Must be <= [.getWorldVerticesLength] - `start`.\n     * @param worldVertices The output world vertices. Must have a length >= `offset` + `count` *\n     * `stride` / 2.\n     * @param offset The `worldVertices` index to begin writing values.\n     * @param stride The number of `worldVertices` entries between the value pairs written.\n     */\n    fun computeWorldVertices(slot: Slot, start: Int, count: Int, worldVertices: FloatArray, offset: Int, stride: Int) {\n        var count = count\n        count = offset + (count shr 1) * stride\n        val skeleton = slot.skeleton\n        val deformArray = slot.deform!!\n        var vertices = this.vertices\n        val bones = this.bones\n        if (bones == null) {\n            if (deformArray.size > 0) vertices = deformArray.data\n            val bone = slot.bone\n            val x = bone.worldX\n            val y = bone.worldY\n            val a = bone.a\n            val b = bone.b\n            val c = bone.c\n            val d = bone.d\n            var v = start\n            var w = offset\n            while (w < count) {\n                val vx = vertices!![v]\n                val vy = vertices[v + 1]\n                worldVertices[w] = vx * a + vy * b + x\n                worldVertices[w + 1] = vx * c + vy * d + y\n                v += 2\n                w += stride\n            }\n            return\n        }\n        var v = 0\n        var skip = 0\n        var i = 0\n        while (i < start) {\n            val n = bones[v]\n            v += n + 1\n            skip += n\n            i += 2\n        }\n        val skeletonBones = skeleton.bones\n        if (deformArray.size == 0) {\n            var w = offset\n            var b = skip * 3\n            while (w < count) {\n                var wx = 0f\n                var wy = 0f\n                var n = bones[v++]\n                n += v\n                while (v < n) {\n                    val bone = skeletonBones[bones[v]] as Bone\n                    val vx = vertices!![b]\n                    val vy = vertices[b + 1]\n                    val weight = vertices[b + 2]\n                    wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight\n                    wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight\n                    v++\n                    b += 3\n                }\n                worldVertices[w] = wx\n                worldVertices[w + 1] = wy\n                w += stride\n            }\n        } else {\n            val deform = deformArray.data\n            var w = offset\n            var b = skip * 3\n            var f = skip shl 1\n            while (w < count) {\n                var wx = 0f\n                var wy = 0f\n                var n = bones[v++]\n                n += v\n                while (v < n) {\n                    val bone = skeletonBones[bones[v]] as Bone\n                    val vx = vertices!![b] + deform[f]\n                    val vy = vertices[b + 1] + deform[f + 1]\n                    val weight = vertices[b + 2]\n                    wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight\n                    wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight\n                    v++\n                    b += 3\n                    f += 2\n                }\n                worldVertices[w] = wx\n                worldVertices[w + 1] = wy\n                w += stride\n            }\n        }\n    }\n\n    /** Does not copy id (generated) or name (set on construction).  */\n    internal fun copyTo(attachment: VertexAttachment) {\n        if (bones != null) {\n            attachment.bones = IntArray(bones!!.size)\n            arraycopy(bones!!, 0, attachment.bones!!, 0, bones!!.size)\n        } else\n            attachment.bones = null\n\n        if (vertices != null) {\n            attachment.vertices = FloatArray(vertices!!.size)\n            arraycopy(vertices!!, 0, attachment.vertices!!, 0, vertices!!.size)\n        } else\n            attachment.vertices = null\n\n        attachment.worldVerticesLength = worldVerticesLength\n        attachment.deformAttachment = deformAttachment\n    }\n\n    companion object {\n        //private fun nextID(): Int = nextID.incrementAndGet() - 1\n        private fun nextID(): Int = nextID++\n    }\n}\n\n// @TODO: Do this properly.\n@Suppress(\"VARIABLE_IN_SINGLETON_WITHOUT_THREAD_LOCAL\")\n@ThreadLocal\n//private var nextID = korAtomic(0)\nprivate var nextID = 0\n","package com.esotericsoftware.spine.korge\n\nimport com.esotericsoftware.spine.*\nimport com.esotericsoftware.spine.BlendMode\nimport com.esotericsoftware.spine.attachments.*\nimport com.esotericsoftware.spine.effect.*\nimport com.soywiz.korim.color.RGBAf\nimport com.esotericsoftware.spine.utils.*\nimport com.soywiz.kds.*\nimport com.soywiz.kds.iterators.*\nimport com.soywiz.klock.*\nimport com.soywiz.kmem.*\nimport com.soywiz.korge.debug.*\nimport com.soywiz.korge.render.*\nimport com.soywiz.korge.view.*\nimport com.soywiz.korim.bitmap.*\nimport com.soywiz.korim.color.*\nimport com.soywiz.korma.geom.BoundsBuilder\nimport com.soywiz.korma.geom.Rectangle\nimport com.soywiz.korui.*\n\ninline fun Container.skeletonView(skeleton: Skeleton, animationState: AnimationState, block: @ViewDslMarker SkeletonView.() -> Unit = {})\n    = SkeletonView(skeleton, animationState).addTo(this, block)\n\nclass SkeletonView(val skeleton: Skeleton, val animationState: AnimationState?) : View() {\n    init {\n        if (animationState != null) {\n            addUpdater { delta ->\n                update(delta)\n            }\n        }\n    }\n\n    override var ratio: Double = 0.0\n        set(value) {\n            field = value\n            running = false\n            animationState?.tracks?.filterNotNull()?.fastForEach {\n                //println(\"TRACK: it.trackTime=${it.trackTime}, value=${value}, it.animationTime=${it.animationTime}\")\n\n                it.trackTime = value.clamp01().convertRange(0.0, 1.0, it.animationStart.toDouble(), it.animationEnd.toDouble() - 0.01).toFloat()\n            }\n        }\n\n    var running = true\n\n    fun play() {\n        running = true\n    }\n\n    fun stop() {\n        running = false\n    }\n\n    fun update(delta: TimeSpan) {\n        if (running) {\n            animationState?.update(delta.seconds.toFloat())\n            if (delta != 0.milliseconds) {\n                invalidate() // @TODO: We should check if we updated something, to mark the view as invalidated\n            }\n        }\n        animationState?.apply(skeleton)\n    }\n\n    fun updateAdjustSkeleton() {\n        skeleton.setPosition(0f, 0f)\n        skeleton.updateWorldTransform()\n    }\n\n    override fun renderInternal(ctx: RenderContext) {\n        updateAdjustSkeleton()\n        renderSkeleton(ctx, skeleton, null)\n    }\n\n    var premultipliedAlpha: Boolean = false\n    private val vertices = FloatArrayList(32)\n    private val clipper = SkeletonClipping()\n    /** @return May be null.\n     */\n    /** @param vertexEffect May be null.\n     */\n    var vertexEffect: VertexEffect? = null\n    private val temp = SpineVector2()\n    private val temp2 = SpineVector2()\n    private val temp3 = RGBAf()\n    private val temp4 = RGBAf()\n    private val temp5 = RGBAf()\n    private val temp6 = RGBAf()\n\n    private var currentSpineBlendMode: BlendMode? = null\n\n    private fun renderSkeleton(ctx: RenderContext?, skeleton: Skeleton, bb: BoundsBuilder?) {\n        val tempPosition = this.temp\n        val tempUV = this.temp2\n        val tempLight1 = this.temp3\n        val tempDark1 = this.temp4\n        val tempLight2 = this.temp5\n        val tempDark2 = this.temp6\n        val vertexEffect = this.vertexEffect\n        vertexEffect?.begin(skeleton)\n\n        val premultipliedAlpha = this.premultipliedAlpha\n        var blendMode: BlendMode? = null\n        var verticesLength = 0\n        lateinit var vertices: FloatArray\n        var uvs: FloatArray? = null\n        lateinit var triangles: ShortArray\n        var color: RGBAf? = null\n        val skeletonColor = skeleton.color\n        val r = skeletonColor.r\n        val g = skeletonColor.g\n        val b = skeletonColor.b\n        val a = skeletonColor.a\n        val drawOrder = skeleton.drawOrder\n        var i = 0\n        val n = drawOrder.size\n        while (i < n) {\n            val slot = drawOrder[i]\n            if (!slot.bone.isActive) {\n                clipper.clipEnd(slot)\n                i++\n                continue\n            }\n            var texture: Bitmap? = null\n            val vertexSize = if (clipper.isClipping) 2 else 5\n            val attachment = slot.attachment\n            if (attachment is RegionAttachment) {\n                verticesLength = vertexSize shl 2\n                vertices = this.vertices.data\n                attachment.computeWorldVertices(slot.bone, vertices, 0, vertexSize)\n                triangles = quadTriangles\n                texture = attachment.region.texture\n                uvs = attachment.uVs\n                color = attachment.color\n\n            } else if (attachment is MeshAttachment) {\n                val count = attachment.worldVerticesLength\n                verticesLength = (count shr 1) * vertexSize\n                vertices = this.vertices.setSize(verticesLength)\n                attachment.computeWorldVertices(slot, 0, count, vertices, 0, vertexSize)\n                triangles = attachment.triangles\n                texture = attachment.region!!.texture\n                uvs = attachment.uVs\n                color = attachment.color\n\n            } else if (attachment is ClippingAttachment) {\n                clipper.clipStart(slot, attachment)\n                i++\n                continue\n\n            } else if (attachment is SkeletonAttachment) {\n                val attachmentSkeleton = attachment.skeleton\n                if (attachmentSkeleton != null) renderSkeleton(ctx, attachmentSkeleton, bb)\n            }\n\n            if (texture != null) {\n                val slotColor = slot.color\n                var alpha = a * slotColor.a * color!!.a * 255f\n                val multiplier = if (premultipliedAlpha) alpha else 255f\n\n                var slotBlendMode = slot.data.getBlendMode()\n                if (slotBlendMode != blendMode) {\n                    if (slotBlendMode == BlendMode.additive && premultipliedAlpha) {\n                        slotBlendMode = BlendMode.normal\n                        alpha = 0f\n                    }\n                    blendMode = slotBlendMode\n                    currentSpineBlendMode = blendMode\n                }\n\n                val c = RGBA(\n                    (r * slotColor.r * color.r * multiplier).toInt(),\n                    (g * slotColor.g * color.g * multiplier).toInt(),\n                    (b * slotColor.b * color.b * multiplier).toInt(),\n                    alpha.toInt()\n                )\n\n                if (clipper.isClipping) {\n                    clipper.clipTriangles(vertices, verticesLength, triangles, triangles.size, uvs!!, c, Colors.BLACK, false)\n                    val clippedVertices = clipper.clippedVertices\n                    val clippedTriangles = clipper.clippedTriangles\n                    if (vertexEffect != null) applyVertexEffect(clippedVertices.data, clippedVertices.size, 5, c, Colors.BLACK)\n                    draw(bb, ctx, texture, clippedVertices.data, 0, clippedVertices.size, clippedTriangles.toArray(), 0, clippedTriangles.size, currentSpineBlendMode)\n                } else {\n                    if (vertexEffect != null) {\n                        tempLight1.setTo(c)\n                        tempDark1.setTo(Colors.BLACK)\n                        var v = 0\n                        var u = 0\n                        while (v < verticesLength) {\n                            tempPosition.x = vertices!![v]\n                            tempPosition.y = vertices[v + 1]\n                            tempLight2.setTo(tempLight1)\n                            tempDark2.setTo(tempDark1)\n                            tempUV.x = uvs!![u]\n                            tempUV.y = uvs[u + 1]\n                            vertexEffect.transform(tempPosition, tempUV, tempLight2, tempDark2)\n                            vertices[v + 0] = tempPosition.x\n                            vertices[v + 1] = tempPosition.y\n                            vertices[v + 2] = tempLight2.toFloatBits()\n                            vertices[v + 3] = tempUV.x\n                            vertices[v + 4] = tempUV.y\n                            v += 5\n                            u += 2\n                        }\n                    } else {\n                        var v = 0\n                        var u = 0\n                        while (v < verticesLength) {\n                            vertices[v + 2] = Float.fromBits(c.value)\n                            vertices[v + 3] = uvs!![u]\n                            vertices[v + 4] = uvs[u + 1]\n                            v += 5\n                            u += 2\n                        }\n                    }\n                    draw(bb, ctx, texture, vertices, 0, verticesLength, triangles, 0, triangles.size, currentSpineBlendMode)\n                }\n\n                //break // @TODO: Remove this\n            }\n\n            clipper.clipEnd(slot)\n            i++\n\n        }\n        clipper.clipEnd()\n        vertexEffect?.end()\n    }\n\n    private fun applyVertexEffect(vertices: FloatArray, verticesLength: Int, stride: Int, light: RGBA, dark: RGBA) {\n        val tempPosition = this.temp\n        val tempUV = this.temp2\n        val tempLight1 = this.temp3\n        val tempDark1 = this.temp4\n        val tempLight2 = this.temp5\n        val tempDark2 = this.temp6\n        val vertexEffect = this.vertexEffect\n        tempLight1.setTo(light)\n        tempDark1.setTo(dark)\n        if (stride == 5) {\n            var v = 0\n            while (v < verticesLength) {\n                tempPosition.x = vertices[v]\n                tempPosition.y = vertices[v + 1]\n                tempUV.x = vertices[v + 3]\n                tempUV.y = vertices[v + 4]\n                tempLight2.setTo(tempLight1)\n                tempDark2.setTo(tempDark1)\n                vertexEffect!!.transform(tempPosition, tempUV, tempLight2, tempDark2)\n                vertices[v] = tempPosition.x\n                vertices[v + 1] = tempPosition.y\n                vertices[v + 2] = tempLight2.toFloatBits()\n                vertices[v + 3] = tempUV.x\n                vertices[v + 4] = tempUV.y\n                v += stride\n            }\n        } else {\n            var v = 0\n            while (v < verticesLength) {\n                tempPosition.x = vertices[v]\n                tempPosition.y = vertices[v + 1]\n                tempUV.x = vertices[v + 4]\n                tempUV.y = vertices[v + 5]\n                tempLight2.setTo(tempLight1)\n                tempDark2.setTo(tempDark1)\n                vertexEffect!!.transform(tempPosition, tempUV, tempLight2, tempDark2)\n                vertices[v] = tempPosition.x\n                vertices[v + 1] = tempPosition.y\n                vertices[v + 2] = tempLight2.toFloatBits()\n                vertices[v + 3] = tempDark2.toFloatBits()\n                vertices[v + 4] = tempUV.x\n                vertices[v + 5] = tempUV.y\n                v += stride\n            }\n        }\n    }\n\n    private fun draw(bb: BoundsBuilder?, ctx: RenderContext?, texture: Bitmap, verticesData: FloatArray, verticesOffset: Int, verticesCount: Int, triangle: ShortArray, trianglesOffset: Int, trianglesCount: Int, blendMode: BlendMode?) {\n        val vertexSize = 5\n        val vertexCount = verticesCount / vertexSize\n        if (bb != null) {\n            for (n in 0 until vertexCount) {\n                val index = n * vertexSize\n                val x = verticesData[index + 0]\n                val y = verticesData[index + 1]\n                //println(\"Point($x, $y)\")\n                bb.add(x, -y)\n            }\n        }\n        ctx?.useBatcher { batch ->\n            val viewBlendMode = when (blendMode) {\n                BlendMode.normal -> com.soywiz.korge.view.BlendMode.NORMAL\n                BlendMode.additive -> com.soywiz.korge.view.BlendMode.ADD\n                BlendMode.multiply -> com.soywiz.korge.view.BlendMode.MULTIPLY\n                BlendMode.screen -> com.soywiz.korge.view.BlendMode.SCREEN\n                null -> this.blendMode\n            }\n\n            batch.setStateFast(texture, true, viewBlendMode, null, icount = trianglesCount, vcount = vertexCount)\n\n            val transform = this.globalMatrix\n            val premultiplied = texture.premultiplied\n\n            for (n in 0 until trianglesCount) {\n                batch.addIndexRelative(triangle[trianglesOffset + n].toInt())\n            }\n            val colorMul = this.renderColorMul\n            val colorAdd = this.renderColorAdd\n            for (n in 0 until vertexCount) {\n                val x = verticesData[verticesOffset + n * vertexSize + 0]\n                val y = -verticesData[verticesOffset + n * vertexSize + 1]\n                val u = verticesData[verticesOffset + n * vertexSize + 3]\n                val v = verticesData[verticesOffset + n * vertexSize + 4]\n                val realX = transform.transformXf(x, y)\n                val realY = transform.transformYf(x, y)\n                batch.addVertex(\n                    realX, realY, u, v, colorMul, colorAdd,\n                    premultiplied = premultiplied, wrap = false\n                )\n            }\n\n            //batch.flush()\n        }\n    }\n\n    private val bb = BoundsBuilder()\n\n    override fun getLocalBoundsInternal(out: Rectangle) {\n        bb.reset()\n        updateAdjustSkeleton()\n        renderSkeleton(null, skeleton, bb)\n        bb.getBounds(out)\n    }\n\n    // @TODO: We shouldn't do this\n    private fun RGBAf.toFloatBits(): Float = Float.fromBits(this.rgba.value)\n\n    val currentMainAnimation get() = animationState?.tracks?.first()?.animation\n\n    override fun buildDebugComponent(views: Views, container: UiContainer) {\n        container.uiCollapsibleSection(\"Animation\") {\n            addChild(UiRowEditableValue(app, \"animation\", UiListEditableValue(app, { skeleton.data.animations.map { it.name } }, ObservableProperty(\n                name = \"animation\",\n                internalSet = {  animationName ->\n                    val animation = skeleton.data.findAnimation(animationName)\n                    if (animation != null) {\n                        this@SkeletonView.play()\n                        animationState?.setAnimation(0, animation, true)\n                        stage?.views?.debugHightlightView(this@SkeletonView)\n                    }\n                },\n                internalGet = { currentMainAnimation?.name ?: \"default\" }\n            ))))\n            button(\"play\").onClick { play() }\n            button(\"stop\").onClick { stop() }\n        }\n        super.buildDebugComponent(views, container)\n    }\n\n    companion object {\n        private val quadTriangles = shortArrayOf(0, 1, 2, 2, 3, 0)\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine.utils\n\nimport com.esotericsoftware.spine.Slot\nimport com.esotericsoftware.spine.attachments.ClippingAttachment\nimport com.soywiz.kds.*\nimport com.soywiz.kds.iterators.*\nimport com.soywiz.korim.color.*\n\nclass SkeletonClipping {\n    private val triangulator = SpineTriangulator()\n    private val clippingPolygon = FloatArrayList()\n    private val clipOutput = FloatArrayList(128)\n    val clippedVertices = FloatArrayList(128)\n    val clippedTriangles = ShortArrayList(128)\n    private val scratch = FloatArrayList()\n\n    private var clipAttachment: ClippingAttachment? = null\n    private var clippingPolygons: FastArrayList<FloatArrayList>? = null\n\n    val isClipping: Boolean\n        get() = clipAttachment != null\n\n    fun clipStart(slot: Slot, clip: ClippingAttachment): Int {\n        if (clipAttachment != null) return 0\n        val n = clip.worldVerticesLength\n        if (n < 6) return 0\n        clipAttachment = clip\n\n        val vertices = clippingPolygon.setSize(n)\n        clip.computeWorldVertices(slot, 0, n, vertices, 0, 2)\n        makeClockwise(clippingPolygon)\n        val triangles = triangulator.triangulate(clippingPolygon)\n        clippingPolygons = triangulator.decompose(clippingPolygon, triangles)\n        clippingPolygons!!.fastForEach { polygon ->\n            makeClockwise(polygon)\n            polygon.add(polygon.data[0])\n            polygon.add(polygon.data[1])\n        }\n        return clippingPolygons!!.size\n    }\n\n    fun clipEnd(slot: Slot) {\n        if (clipAttachment != null && clipAttachment!!.endSlot === slot.data) clipEnd()\n    }\n\n    fun clipEnd() {\n        if (clipAttachment == null) return\n        clipAttachment = null\n        clippingPolygons = null\n        clippedVertices.clear()\n        clippedTriangles.clear()\n        clippingPolygon.clear()\n    }\n\n    fun clipTriangles(\n        vertices: FloatArray, verticesLength: Int, triangles: ShortArray, trianglesLength: Int, uvs: FloatArray,\n        light: RGBA, dark: RGBA, twoColor: Boolean\n    ) {\n        val light = Float.fromBits(light.value)\n        val dark = Float.fromBits(dark.value)\n\n        val clipOutput = this.clipOutput\n        val clippedVertices = this.clippedVertices\n        val clippedTriangles = this.clippedTriangles\n        val polygons = clippingPolygons!!\n        val polygonsCount = clippingPolygons!!.size\n        val vertexSize = if (twoColor) 6 else 5\n\n        var index: Short = 0\n        clippedVertices.clear()\n        clippedTriangles.clear()\n        var i = 0\n        outer@ while (i < trianglesLength) {\n            var vertexOffset = triangles[i].toInt() shl 1\n            val x1 = vertices[vertexOffset]\n            val y1 = vertices[vertexOffset + 1]\n            val u1 = uvs[vertexOffset]\n            val v1 = uvs[vertexOffset + 1]\n\n            vertexOffset = triangles[i + 1].toInt() shl 1\n            val x2 = vertices[vertexOffset]\n            val y2 = vertices[vertexOffset + 1]\n            val u2 = uvs[vertexOffset]\n            val v2 = uvs[vertexOffset + 1]\n\n            vertexOffset = triangles[i + 2].toInt() shl 1\n            val x3 = vertices[vertexOffset]\n            val y3 = vertices[vertexOffset + 1]\n            val u3 = uvs[vertexOffset]\n            val v3 = uvs[vertexOffset + 1]\n\n            for (p in 0 until polygonsCount) {\n                var s = clippedVertices.size\n                if (clip(x1, y1, x2, y2, x3, y3, polygons[p], clipOutput)) {\n                    val clipOutputLength = clipOutput.size\n                    if (clipOutputLength == 0) continue\n                    val d0 = y2 - y3\n                    val d1 = x3 - x2\n                    val d2 = x1 - x3\n                    val d4 = y3 - y1\n                    val d = 1 / (d0 * d2 + d1 * (y1 - y3))\n\n                    var clipOutputCount = clipOutputLength shr 1\n                    val clipOutputItems = clipOutput.data\n                    val clippedVerticesItems = clippedVertices.setSize(s + clipOutputCount * vertexSize)\n                    run {\n                        var ii = 0\n                        while (ii < clipOutputLength) {\n                            val x = clipOutputItems[ii]\n                            val y = clipOutputItems[ii + 1]\n                            clippedVerticesItems[s] = x\n                            clippedVerticesItems[s + 1] = y\n                            clippedVerticesItems[s + 2] = light\n                            if (twoColor) {\n                                clippedVerticesItems[s + 3] = dark\n                                s += 4\n                            } else\n                                s += 3\n                            val c0 = x - x3\n                            val c1 = y - y3\n                            val a = (d0 * c0 + d1 * c1) * d\n                            val b = (d4 * c0 + d2 * c1) * d\n                            val c = 1f - a - b\n                            clippedVerticesItems[s] = u1 * a + u2 * b + u3 * c\n                            clippedVerticesItems[s + 1] = v1 * a + v2 * b + v3 * c\n                            s += 2\n                            ii += 2\n                        }\n                    }\n\n                    s = clippedTriangles.size\n                    clippedTriangles.setSize(s + 3 * (clipOutputCount - 2))\n                    val clippedTrianglesItems = clippedTriangles\n                    clipOutputCount--\n                    for (ii in 1 until clipOutputCount) {\n                        clippedTrianglesItems[s] = index\n                        clippedTrianglesItems[s + 1] = (index + ii).toShort()\n                        clippedTrianglesItems[s + 2] = (index.toInt() + ii + 1).toShort()\n                        s += 3\n                    }\n                    index = (index + (clipOutputCount + 1).toShort()).toShort()\n\n                } else {\n                    val clippedVerticesItems = clippedVertices.setSize(s + 3 * vertexSize)\n                    clippedVerticesItems[s] = x1\n                    clippedVerticesItems[s + 1] = y1\n                    clippedVerticesItems[s + 2] = light\n                    if (!twoColor) {\n                        clippedVerticesItems[s + 3] = u1\n                        clippedVerticesItems[s + 4] = v1\n\n                        clippedVerticesItems[s + 5] = x2\n                        clippedVerticesItems[s + 6] = y2\n                        clippedVerticesItems[s + 7] = light\n                        clippedVerticesItems[s + 8] = u2\n                        clippedVerticesItems[s + 9] = v2\n\n                        clippedVerticesItems[s + 10] = x3\n                        clippedVerticesItems[s + 11] = y3\n                        clippedVerticesItems[s + 12] = light\n                        clippedVerticesItems[s + 13] = u3\n                        clippedVerticesItems[s + 14] = v3\n                    } else {\n                        clippedVerticesItems[s + 3] = dark\n                        clippedVerticesItems[s + 4] = u1\n                        clippedVerticesItems[s + 5] = v1\n\n                        clippedVerticesItems[s + 6] = x2\n                        clippedVerticesItems[s + 7] = y2\n                        clippedVerticesItems[s + 8] = light\n                        clippedVerticesItems[s + 9] = dark\n                        clippedVerticesItems[s + 10] = u2\n                        clippedVerticesItems[s + 11] = v2\n\n                        clippedVerticesItems[s + 12] = x3\n                        clippedVerticesItems[s + 13] = y3\n                        clippedVerticesItems[s + 14] = light\n                        clippedVerticesItems[s + 15] = dark\n                        clippedVerticesItems[s + 16] = u3\n                        clippedVerticesItems[s + 17] = v3\n                    }\n\n                    s = clippedTriangles.size\n                    val clippedTrianglesItems = clippedTriangles.setSize(s + 3)\n                    clippedTrianglesItems[s] = index\n                    clippedTrianglesItems[s + 1] = (index + 1).toShort()\n                    clippedTrianglesItems[s + 2] = (index + 2).toShort()\n                    index = (index + 3).toShort()\n                    i += 3\n                    continue@outer\n                }\n            }\n            i += 3\n        }\n    }\n\n    /** Clips the input triangle against the convex, clockwise clipping area. If the triangle lies entirely within the clipping\n     * area, false is returned. The clipping area must duplicate the first vertex at the end of the vertices list.  */\n    internal fun clip(x1: Float, y1: Float, x2: Float, y2: Float, x3: Float, y3: Float, clippingArea: FloatArrayList, output: FloatArrayList): Boolean {\n        var output = output\n        val originalOutput = output\n        var clipped = false\n\n        // Avoid copy at the end.\n        var input: FloatArrayList? = null\n        if (clippingArea.size % 4 >= 2) {\n            input = output\n            output = scratch\n        } else\n            input = scratch\n\n        input.clear()\n        input.add(x1)\n        input.add(y1)\n        input.add(x2)\n        input.add(y2)\n        input.add(x3)\n        input.add(y3)\n        input.add(x1)\n        input.add(y1)\n        output.clear()\n\n        val clippingVertices = clippingArea.data\n        val clippingVerticesLast = clippingArea.size - 4\n        var i = 0\n        while (true) {\n            val edgeX = clippingVertices[i]\n            val edgeY = clippingVertices[i + 1]\n            val edgeX2 = clippingVertices[i + 2]\n            val edgeY2 = clippingVertices[i + 3]\n            val deltaX = edgeX - edgeX2\n            val deltaY = edgeY - edgeY2\n\n            val inputVertices = input!!.data\n            val inputVerticesLength = input.size - 2\n            val outputStart = output.size\n            var ii = 0\n            while (ii < inputVerticesLength) {\n                val inputX = inputVertices[ii]\n                val inputY = inputVertices[ii + 1]\n                val inputX2 = inputVertices[ii + 2]\n                val inputY2 = inputVertices[ii + 3]\n                val side2 = deltaX * (inputY2 - edgeY2) - deltaY * (inputX2 - edgeX2) > 0\n                if (deltaX * (inputY - edgeY2) - deltaY * (inputX - edgeX2) > 0) {\n                    if (side2) { // v1 inside, v2 inside\n                        output.add(inputX2)\n                        output.add(inputY2)\n                        ii += 2\n                        continue\n                    }\n                    // v1 inside, v2 outside\n                    val c0 = inputY2 - inputY\n                    val c2 = inputX2 - inputX\n                    val s = c0 * (edgeX2 - edgeX) - c2 * (edgeY2 - edgeY)\n                    if (kotlin.math.abs(s) > 0.000001f) {\n                        val ua = (c2 * (edgeY - inputY) - c0 * (edgeX - inputX)) / s\n                        output.add(edgeX + (edgeX2 - edgeX) * ua)\n                        output.add(edgeY + (edgeY2 - edgeY) * ua)\n                    } else {\n                        output.add(edgeX)\n                        output.add(edgeY)\n                    }\n                } else if (side2) { // v1 outside, v2 inside\n                    val c0 = inputY2 - inputY\n                    val c2 = inputX2 - inputX\n                    val s = c0 * (edgeX2 - edgeX) - c2 * (edgeY2 - edgeY)\n                    if (kotlin.math.abs(s) > 0.000001f) {\n                        val ua = (c2 * (edgeY - inputY) - c0 * (edgeX - inputX)) / s\n                        output.add(edgeX + (edgeX2 - edgeX) * ua)\n                        output.add(edgeY + (edgeY2 - edgeY) * ua)\n                    } else {\n                        output.add(edgeX)\n                        output.add(edgeY)\n                    }\n                    output.add(inputX2)\n                    output.add(inputY2)\n                }\n                clipped = true\n                ii += 2\n            }\n\n            if (outputStart == output.size) { // All edges outside.\n                originalOutput.clear()\n                return true\n            }\n\n            output.add(output.data[0])\n            output.add(output.data[1])\n\n            if (i == clippingVerticesLast) break\n            val temp = output\n            output = input\n            output.clear()\n            input = temp\n            i += 2\n        }\n\n        if (originalOutput !== output) {\n            originalOutput.clear()\n            originalOutput.add(output.data, 0, output.size - 2)\n        } else\n            originalOutput.setSize(originalOutput.size - 2)\n\n        return clipped\n    }\n\n    companion object {\n\n        internal fun makeClockwise(polygon: FloatArrayList) {\n            val vertices = polygon.data\n            val verticeslength = polygon.size\n\n            var area = vertices[verticeslength - 2] * vertices[1] - vertices[0] * vertices[verticeslength - 1]\n            var p1x: Float\n            var p1y: Float\n            var p2x: Float\n            var p2y: Float\n            run {\n                var i = 0\n                val n = verticeslength - 3\n                while (i < n) {\n                    p1x = vertices[i]\n                    p1y = vertices[i + 1]\n                    p2x = vertices[i + 2]\n                    p2y = vertices[i + 3]\n                    area += p1x * p2y - p2x * p1y\n                    i += 2\n                }\n            }\n            if (area < 0) return\n\n            var i = 0\n            val lastX = verticeslength - 2\n            val n = verticeslength shr 1\n            while (i < n) {\n                val x = vertices[i]\n                val y = vertices[i + 1]\n                val other = lastX - i\n                vertices[i] = vertices[other]\n                vertices[i + 1] = vertices[other + 1]\n                vertices[other] = x\n                vertices[other + 1] = y\n                i += 2\n            }\n        }\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine.utils\n\nimport com.soywiz.kds.*\nimport kotlin.math.*\n\ninternal class SpineTriangulator {\n    private val convexPolygons = FastArrayList<FloatArrayList>()\n    private val convexPolygonsIndices = FastArrayList<ShortArrayList>()\n\n    private val indicesArray = ShortArrayList()\n    private val isConcaveArray = BooleanArrayList()\n    private val triangles = ShortArrayList()\n\n    private val polygonPool = Pool { FloatArrayList(16) }\n    private val polygonIndicesPool = Pool { ShortArrayList(16) }\n\n    fun triangulate(verticesArray: FloatArrayList): ShortArrayList {\n        val vertices = verticesArray.data\n        var vertexCount = verticesArray.size shr 1\n\n        val indicesArray = this.indicesArray\n        indicesArray.clear()\n        indicesArray.setSize(vertexCount)\n        val indices = indicesArray\n        for (i in 0 until vertexCount)\n            indices[i] = i.toShort()\n\n        val isConcaveArray = this.isConcaveArray\n        isConcaveArray.setSize(vertexCount)\n        val isConcave = isConcaveArray\n        run {\n            var i = 0\n            val n = vertexCount\n            while (i < n) {\n                isConcave[i] = isConcave(i, vertexCount, vertices, indices)\n                ++i\n            }\n        }\n\n        val triangles = this.triangles\n        triangles.clear()\n        triangles.ensureCapacity(max(0, vertexCount - 2) shl 2)\n\n        while (vertexCount > 3) {\n            // Find ear tip.\n            var previous = vertexCount - 1\n            var i = 0\n            var next = 1\n            outer2@while (true) {\n                outer@ while (true) {\n                    if (!isConcave[i]) {\n                        val p1 = indices[previous].toInt() shl 1\n                        val p2 = indices[i].toInt() shl 1\n                        val p3 = indices[next].toInt() shl 1\n                        val p1x = vertices[p1]\n                        val p1y = vertices[p1 + 1]\n                        val p2x = vertices[p2]\n                        val p2y = vertices[p2 + 1]\n                        val p3x = vertices[p3]\n                        val p3y = vertices[p3 + 1]\n                        var ii = (next + 1) % vertexCount\n                        while (ii != previous) {\n                            if (isConcave[ii]) {\n                                val v = indices[ii].toInt() shl 1\n                                val vx = vertices[v]\n                                val vy = vertices[v + 1]\n                                if (positiveArea(p3x, p3y, p1x, p1y, vx, vy)) {\n                                    if (positiveArea(p1x, p1y, p2x, p2y, vx, vy)) {\n                                        if (positiveArea(p2x, p2y, p3x, p3y, vx, vy)) break@outer\n                                    }\n                                }\n                            }\n                            ii = (ii + 1) % vertexCount\n                        }\n                        break@outer2\n                    }\n                    break\n                }\n\n                if (next == 0) {\n                    do {\n                        if (!isConcave[i]) break\n                        i--\n                    } while (i > 0)\n                    break\n                }\n\n                previous = i\n                i = next\n                next = (next + 1) % vertexCount\n            }\n\n            // Cut ear tip.\n            triangles.add(indices[(vertexCount + i - 1) % vertexCount])\n            triangles.add(indices[i])\n            triangles.add(indices[(i + 1) % vertexCount])\n            indicesArray.removeIndex(i)\n            isConcaveArray.removeIndex(i)\n            vertexCount--\n\n            val previousIndex = (vertexCount + i - 1) % vertexCount\n            val nextIndex = if (i == vertexCount) 0 else i\n            isConcave[previousIndex] = isConcave(previousIndex, vertexCount, vertices, indices)\n            isConcave[nextIndex] = isConcave(nextIndex, vertexCount, vertices, indices)\n        }\n\n        if (vertexCount == 3) {\n            triangles.add(indices[2])\n            triangles.add(indices[0])\n            triangles.add(indices[1])\n        }\n\n        return triangles\n    }\n\n    fun decompose(verticesArray: FloatArrayList, triangles: ShortArrayList): FastArrayList<FloatArrayList> {\n        val vertices = verticesArray.data\n\n        val convexPolygons = this.convexPolygons\n        polygonPool.free(convexPolygons)\n        convexPolygons.clear()\n\n        val convexPolygonsIndices = this.convexPolygonsIndices\n        polygonIndicesPool.free(convexPolygonsIndices)\n        convexPolygonsIndices.clear()\n\n        var polygonIndices = polygonIndicesPool.alloc()\n        polygonIndices.clear()\n\n        var polygon = polygonPool.alloc()\n        polygon.clear()\n\n        // Merge subsequent triangles if they form a triangle fan.\n        var fanBaseIndex = -1\n        var lastWinding = 0\n        val trianglesItems = triangles\n        run {\n            var i = 0\n            val n = triangles.size\n            while (i < n) {\n                val t1 = trianglesItems[i].toInt() shl 1\n                val t2 = trianglesItems[i + 1].toInt() shl 1\n                val t3 = trianglesItems[i + 2].toInt() shl 1\n                val x1 = vertices[t1]\n                val y1 = vertices[t1 + 1]\n                val x2 = vertices[t2]\n                val y2 = vertices[t2 + 1]\n                val x3 = vertices[t3]\n                val y3 = vertices[t3 + 1]\n\n                // If the base of the last triangle is the same as this triangle, check if they form a convex polygon (triangle fan).\n                var merged = false\n                if (fanBaseIndex == t1) {\n                    val o = polygon.size - 4\n                    val p = polygon.data\n                    val winding1 = winding(p[o], p[o + 1], p[o + 2], p[o + 3], x3, y3)\n                    val winding2 = winding(x3, y3, p[0], p[1], p[2], p[3])\n                    if (winding1 == lastWinding && winding2 == lastWinding) {\n                        polygon.add(x3)\n                        polygon.add(y3)\n                        polygonIndices.add(t3.toShort())\n                        merged = true\n                    }\n                }\n\n                // Otherwise make this triangle the new base.\n                if (!merged) {\n                    if (polygon.size > 0) {\n                        convexPolygons.add(polygon)\n                        convexPolygonsIndices.add(polygonIndices)\n                    } else {\n                        polygonPool.free(polygon)\n                        polygonIndicesPool.free(polygonIndices)\n                    }\n                    polygon = polygonPool.alloc()\n                    polygon.clear()\n                    polygon.add(x1)\n                    polygon.add(y1)\n                    polygon.add(x2)\n                    polygon.add(y2)\n                    polygon.add(x3)\n                    polygon.add(y3)\n                    polygonIndices = polygonIndicesPool.alloc()\n                    polygonIndices.clear()\n                    polygonIndices.add(t1.toShort())\n                    polygonIndices.add(t2.toShort())\n                    polygonIndices.add(t3.toShort())\n                    lastWinding = winding(x1, y1, x2, y2, x3, y3)\n                    fanBaseIndex = t1\n                }\n                i += 3\n            }\n        }\n\n        if (polygon.size > 0) {\n            convexPolygons.add(polygon)\n            convexPolygonsIndices.add(polygonIndices)\n        }\n\n        // Go through the list of polygons and try to merge the remaining triangles with the found triangle fans.\n        run {\n            var i = 0\n            val n = convexPolygons.size\n            while (i < n) {\n                polygonIndices = convexPolygonsIndices.get(i)\n                if (polygonIndices.size == 0) {\n                    i++\n                    continue\n                }\n                val firstIndex = polygonIndices.get(0).toInt()\n                val lastIndex = polygonIndices.get(polygonIndices.size - 1).toInt()\n\n                polygon = convexPolygons.get(i)\n                val o = polygon.size - 4\n                val p = polygon.data\n                var prevPrevX = p[o]\n                var prevPrevY = p[o + 1]\n                var prevX = p[o + 2]\n                var prevY = p[o + 3]\n                val firstX = p[0]\n                val firstY = p[1]\n                val secondX = p[2]\n                val secondY = p[3]\n                val winding = winding(prevPrevX, prevPrevY, prevX, prevY, firstX, firstY)\n\n                var ii = 0\n                while (ii < n) {\n                    if (ii == i) {\n                        ii++\n                        continue\n                    }\n                    val otherIndices = convexPolygonsIndices.get(ii)\n                    if (otherIndices.size != 3) {\n                        ii++\n                        continue\n                    }\n                    val otherFirstIndex = otherIndices.get(0).toInt()\n                    val otherSecondIndex = otherIndices.get(1).toInt()\n                    val otherLastIndex = otherIndices.get(2).toInt()\n\n                    val otherPoly = convexPolygons.get(ii)\n                    val x3 = otherPoly.get(otherPoly.size - 2)\n                    val y3 = otherPoly.get(otherPoly.size - 1)\n\n                    if (otherFirstIndex != firstIndex || otherSecondIndex != lastIndex) {\n                        ii++\n                        continue\n                    }\n                    val winding1 = winding(prevPrevX, prevPrevY, prevX, prevY, x3, y3)\n                    val winding2 = winding(x3, y3, firstX, firstY, secondX, secondY)\n                    if (winding1 == winding && winding2 == winding) {\n                        otherPoly.clear()\n                        otherIndices.clear()\n                        polygon.add(x3)\n                        polygon.add(y3)\n                        polygonIndices.add(otherLastIndex.toShort())\n                        prevPrevX = prevX\n                        prevPrevY = prevY\n                        prevX = x3\n                        prevY = y3\n                        ii = 0\n                    }\n                    ii++\n                }\n                i++\n            }\n        }\n\n        // Remove empty polygons that resulted from the merge step above.\n        for (i in convexPolygons.size - 1 downTo 0) {\n            polygon = convexPolygons.get(i)\n            if (polygon.size == 0) {\n                convexPolygons.removeAt(i)\n                polygonPool.free(polygon)\n                polygonIndices = convexPolygonsIndices.removeAt(i)\n                polygonIndicesPool.free(polygonIndices)\n            }\n        }\n\n        return convexPolygons\n    }\n\n    private fun isConcave(index: Int, vertexCount: Int, vertices: FloatArray, indices: ShortArrayList): Boolean {\n        val previous = indices[(vertexCount + index - 1) % vertexCount].toInt() shl 1\n        val current = indices[index].toInt() shl 1\n        val next = indices[(index + 1) % vertexCount].toInt() shl 1\n        return !positiveArea(vertices[previous], vertices[previous + 1], vertices[current], vertices[current + 1], vertices[next],\n                vertices[next + 1])\n    }\n\n    private fun positiveArea(p1x: Float, p1y: Float, p2x: Float, p2y: Float, p3x: Float, p3y: Float): Boolean {\n        return p1x * (p3y - p2y) + p2x * (p1y - p3y) + p3x * (p2y - p1y) >= 0\n    }\n\n    private fun winding(p1x: Float, p1y: Float, p2x: Float, p2y: Float, p3x: Float, p3y: Float): Int {\n        val px = p2x - p1x\n        val py = p2y - p1y\n        return if (p3x * py - p3y * px + px * p1y - p1x * py >= 0) 1 else -1\n    }\n}\n","/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated January 1, 2020. Replaces all prior versions.\n *\n * Copyright (c) 2013-2020, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software\n * or otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.esotericsoftware.spine.utils\n\nimport com.soywiz.kds.*\n\nobject SpineUtils {\n    const val PI = 3.1415927f\n    const val PI2 = PI * 2\n    const val radiansToDegrees = 180f / PI\n    const val radDeg = radiansToDegrees\n    const val degreesToRadians = PI / 180\n    const val degRad = degreesToRadians\n\n    inline fun cosDeg(angle: Float): Float = kotlin.math.cos(angle * degRad)\n    inline fun sinDeg(angle: Float): Float = kotlin.math.sin(angle * degRad)\n    inline fun cos(angle: Float): Float = kotlin.math.cos(angle)\n    inline fun sin(angle: Float): Float = kotlin.math.sin(angle)\n    inline fun atan2(y: Float, x: Float): Float = kotlin.math.atan2(y, x)\n\n    /*\n    private const val SIN_BITS = 14 // 16KB. Adjust for accuracy.\n    private const val SIN_MASK = (-1 shl SIN_BITS).inv()\n    private const val SIN_COUNT = SIN_MASK + 1\n    private const val radFull = PI * 2\n    private const val degFull = 360f\n    private const val radToIndex = SIN_COUNT / radFull\n    private const val degToIndex = SIN_COUNT / degFull\n\n    /** Returns the sine in radians from a lookup table. For optimal precision, use radians between -PI2 and PI2 (both\n     * inclusive).  */\n\n    fun sin(radians: Float): Float = SIN_TABLE[(radians * radToIndex).toInt() and SIN_MASK]\n\n    /** Returns the cosine in radians from a lookup table. For optimal precision, use radians between -PI2 and PI2 (both\n     * inclusive).  */\n\n    fun cos(radians: Float): Float = SIN_TABLE[((radians + PI / 2) * radToIndex).toInt() and SIN_MASK]\n\n    /** Returns the sine in degrees from a lookup table. For optimal precision, use radians between -360 and 360 (both\n     * inclusive).  */\n\n    fun sinDeg(degrees: Float): Float = SIN_TABLE[(degrees * degToIndex).toInt() and SIN_MASK]\n\n    /** Returns the cosine in degrees from a lookup table. For optimal precision, use radians between -360 and 360 (both\n     * inclusive).  */\n\n    fun cosDeg(degrees: Float): Float = SIN_TABLE[((degrees + 90) * degToIndex).toInt() and SIN_MASK]\n    // ---\n    /** Returns atan2 in radians, less accurate than atan2 but may be faster. Average error of 0.00231 radians (0.1323\n     * degrees), largest error of 0.00488 radians (0.2796 degrees).  */\n\n    fun atan2(y: Float, x: Float): Float {\n        if (x == 0f) {\n            if (y > 0f) return PI / 2\n            return if (y == 0f) 0f else -PI / 2\n        }\n        val atan: Float\n        val z = y / x\n        if (abs(z) < 1f) {\n            atan = z / (1f + 0.28f * z * z)\n            return if (x < 0f) atan + (if (y < 0f) -PI else PI) else atan\n        }\n        atan = PI / 2 - z / (z * z + 0.28f)\n        return if (y < 0f) atan - PI else atan\n    }\n\n    private val SIN_TABLE = FloatArray(SIN_COUNT).also { table ->\n        for (i in 0 until SIN_COUNT) table[i] = sin((i + 0.5f) / SIN_COUNT * radFull.toDouble()).toFloat()\n        var i = 0\n        while (i < 360) {\n            table[(i * degToIndex) as Int and SIN_MASK] = sin(i * degreesToRadians.toDouble()).toFloat()\n            i += 90\n        }\n    }\n     */\n\n    inline fun arraycopy(src: ByteArray, srcPos: Int, dest: ByteArray, destPos: Int, length: Int) {\n        com.soywiz.kmem.arraycopy(src, srcPos, dest, destPos, length)\n    }\n\n    inline fun arraycopy(src: ShortArray, srcPos: Int, dest: ShortArray, destPos: Int, length: Int) {\n        com.soywiz.kmem.arraycopy(src, srcPos, dest, destPos, length)\n    }\n\n    inline fun arraycopy(src: IntArray, srcPos: Int, dest: IntArray, destPos: Int, length: Int) {\n        com.soywiz.kmem.arraycopy(src, srcPos, dest, destPos, length)\n    }\n\n    inline fun arraycopy(src: FloatArray, srcPos: Int, dest: FloatArray, destPos: Int, length: Int) {\n        com.soywiz.kmem.arraycopy(src, srcPos, dest, destPos, length)\n    }\n\n    inline fun <T> arraycopy(src: Array<T>, srcPos: Int, dest: Array<T>, destPos: Int, length: Int) {\n        com.soywiz.kmem.arraycopy(src, srcPos, dest, destPos, length)\n    }\n\n    inline fun <T> arraycopy(src: FastArrayList<T>, srcPos: Int, dest: FastArrayList<T>, destPos: Int, length: Int) {\n        com.soywiz.kmem.arraycopy(src, srcPos, dest, destPos, length)\n    }\n}\n","package com.esotericsoftware.spine.utils\n\ndata class SpineVector2(\n    var x: Float = 0f,\n    var y: Float = 0f\n) {\n    operator fun set(x: Float, y: Float): SpineVector2 {\n        this.x = x\n        this.y = y\n        return this\n    }\n    override fun toString(): String = \"($x,$y)\"\n}\n","import box2d.*\nimport bunnymark.*\nimport com.soywiz.kds.*\nimport com.soywiz.korge.*\nimport com.soywiz.korge.scene.*\nimport com.soywiz.korge.ui.*\nimport com.soywiz.korge.view.*\nimport com.soywiz.korgw.*\nimport com.soywiz.korim.color.*\nimport com.soywiz.korio.async.*\nimport com.soywiz.korio.util.*\nimport dragonbones.*\nimport easings.*\nimport extension.*\nimport filters.*\nimport gestures.*\nimport scene1.*\nimport scene2.*\nimport spine.*\nimport ui.*\n\nsuspend fun main() {\n\text.preinit()\n\tKorge(title = \"KorGE Web Samples\", width = 800, height = 600, bgcolor = Colors[\"#2b2b2b\"], quality = GameWindow.Quality.PERFORMANCE) {\n\t\tval GROUP_BASICS = \"Basics\"\n\t\tval GROUP_ADVANCED = \"Advanced\"\n\t\tval GROUP_PHYSICS = \"Physics\"\n\t\tval GROUP_SKELETON = \"Skeleton\"\n\t\tval GROUP_INPUT = \"Input\"\n\t\tval GROUP_PERFORMANCE = \"Performance\"\n\t\tval GROUP_UI = \"UI\"\n\t\tregister(\n\t\t\tSceneInfo(title = \"Rotating Image\", group = GROUP_BASICS, srcPath = \"scene1/Scene1.kt\") { Scene1() },\n\t\t\tSceneInfo(title = \"Tinting\", group = GROUP_BASICS, srcPath = \"scene2/Scene2.kt\") { Scene2() },\n\t\t\tSceneInfo(title = \"Easing\", group = GROUP_BASICS, srcPath = \"easings/EasingsScene.kt\") { EasingsScene() },\n\t\t\tSceneInfo(title = \"Filters\", group = GROUP_ADVANCED, srcPath = \"filters/FiltersScene.kt\") { FiltersScene() },\n\t\t\tSceneInfo(title = \"Simple Box2d\", group = GROUP_PHYSICS, srcPath = \"box2d/SimpleBox2dScene.kt\") { SimpleBox2dScene() },\n\t\t\t//SceneInfo(title = \"Dragonbones\", group = GROUP_SKELETON, srcPath = \"dragonbones/DragonbonesScene.kt\") { DragonbonesScene() }, // JS-IR has issues with this demo\n\t\t\tSceneInfo(title = \"Spine\", group = GROUP_SKELETON, srcPath = \"spine/SpineScene.kt\") { SpineScene() },\n\t\t\tSceneInfo(title = \"Gestures\", group = GROUP_INPUT, srcPath = \"gestures/GesturesScene.kt\") { GesturesScene() },\n\t\t\tSceneInfo(title = \"Bunnymark\", group = GROUP_PERFORMANCE, srcPath = \"bunnymark/BunnymarkScene.kt\") { BunnymarkScene() },\n\t\t\tSceneInfo(title = \"UI\", group = GROUP_UI, srcPath = \"ui/SimpleUIScene.kt\") { SimpleUIScene() },\n\t\t)\n\n\t\t// Elements\n\t\trun {\n\t\t\tthis.mainSceneContainer = sceneContainer()\n\t\t\t//ext.hasExternalLayout\n\t\t\tif (!OS.isJs) {\n\t\t\t\tuiComboBox(items = registeredScenes.values.toList()).onSelectionUpdate {\n\t\t\t\t\tlaunchImmediately {\n\t\t\t\t\t\tchangeToScene(stage, it.selectedItem?.className)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// On JS we have\n\t\t\t}\n\t\t}\n\n\t\text.init(this)\n\t\text.registerEvent(\"changeScene\") { detail ->\n\t\t\tlaunchImmediately {\n\t\t\t\tchangeToScene(stage, detail.toString())\n\t\t\t}\n\t\t}\n\n\t\text.registerEvent(\"hashchange\") { detail ->\n\t\t\tlaunchImmediately {\n\t\t\t\tchangeToSceneDefault(stage)\n\t\t\t}\n\t\t}\n\n\t\tchangeToSceneDefault(stage)\n\t}\n}\n\nvar Stage.mainSceneContainer: SceneContainer? by extraProperty { null }\n\nsuspend fun changeToSceneDefault(stage: Stage) {\n\tchangeToScene(stage, ext.getSelectedSceneName())\n}\n\nsuspend fun changeToScene(stage: Stage, sceneName: String?) {\n\tval registeredScenes = stage.registeredScenes\n\tval realSceneName = sceneName ?: registeredScenes.keys.first()\n\tval sceneInfo = registeredScenes[realSceneName] ?: registeredScenes.values.first()\n\tstage.mainSceneContainer!!.changeTo(sceneInfo.clazz)\n\text.dispatchCustomEvent(\"changedScene\", sceneInfo.className)\n}\n","package box2d\n\nimport com.soywiz.korge.box2d.*\nimport com.soywiz.korge.input.*\nimport com.soywiz.korge.ui.*\nimport com.soywiz.korge.view.*\nimport com.soywiz.korim.color.*\nimport com.soywiz.korma.geom.*\nimport com.soywiz.korma.random.*\nimport extension.*\nimport org.jbox2d.dynamics.*\nimport kotlin.random.*\n\nclass SimpleBox2dScene : ShowScene() {\n\tval random = Random(0L)\n\n\toverride suspend fun SContainer.sceneMain() {\n\t\tval stage = stage!!\n\t\tfixedSizeContainer(stage.width, stage.height) {\n\t\t\tsolidRect(50, 50, Colors.RED).position(400, 50).rotation(30.degrees)\n\t\t\t\t.registerBodyWithFixture(type = BodyType.DYNAMIC, density = 2, friction = 0.01)\n\t\t\tsolidRect(50, 50, Colors.RED).position(300, 100).registerBodyWithFixture(type = BodyType.DYNAMIC)\n\t\t\tsolidRect(50, 50, Colors.RED).position(450, 100).rotation(15.degrees)\n\t\t\t\t.registerBodyWithFixture(type = BodyType.DYNAMIC)\n\t\t\tsolidRect(600, 100, Colors.WHITE).position(100, 500).registerBodyWithFixture(\n\t\t\t\ttype = BodyType.STATIC,\n\t\t\t\tfriction = 0.2\n\t\t\t)\n\n\t\t\tonClick {\n\t\t\t\tval pos = it.currentPosLocal\n\t\t\t\tsolidRect(50, 50, Colors.RED)\n\t\t\t\t\t.position(pos.x, pos.y)\n\t\t\t\t\t.rotation(random[0.degrees, 90.degrees])\n\t\t\t\t\t.also { it.colorMul = random[Colors.RED, Colors.PURPLE] }\n\t\t\t\t\t.registerBodyWithFixture(type = BodyType.DYNAMIC)\n\t\t\t}\n\n\t\t\tuiButton(text = \"Reset\").position(stage.width - 128.0, 0.0).onClick { sceneContainer.changeTo(this@SimpleBox2dScene::class) }\n\t\t}\n\t}\n\n\t// @TODO: Will be available on the next version of korma\n\tprivate fun Random.nextDoubleInclusive() = (this.nextInt(0x1000001).toDouble() / 0x1000000.toDouble())\n\tprivate operator fun Random.get(l: Angle, r: Angle): Angle = this.nextDoubleInclusive().interpolate(l, r)\n}\n","package bunnymark\n\nimport com.soywiz.klock.*\nimport com.soywiz.kmem.*\nimport com.soywiz.korge.input.*\nimport com.soywiz.korge.view.*\nimport com.soywiz.korge.view.fast.*\nimport com.soywiz.korim.bitmap.*\nimport com.soywiz.korim.bitmap.effect.*\nimport com.soywiz.korim.font.*\nimport com.soywiz.korim.format.*\nimport com.soywiz.korio.async.*\nimport com.soywiz.korio.file.std.*\nimport com.soywiz.korio.lang.*\nimport extension.*\nimport kotlin.random.*\n\nprivate class BunnyContainer(maxSize: Int) : FSprites(maxSize) {\n    val speeds = FBuffer(maxSize * Float.SIZE_BYTES * 2).f32\n    var FSprite.speedXf: Float get() = speeds[index * 2 + 0] ; set(value) { speeds[index * 2 + 0] = value }\n    var FSprite.speedYf: Float get() = speeds[index * 2 + 1] ; set(value) { speeds[index * 2 + 1] = value }\n    //var FSprite.tex: BmpSlice\n}\n\n// bunnymark ported from PIXI.js\n// https://www.goodboydigital.com/pixijs/bunnymark/\n// https://www.goodboydigital.com/pixijs/bunnymark/js/bunnyBenchMark.js\nclass BunnymarkScene : ShowScene() {\n    override suspend fun SContainer.sceneMain() {\n        println(\"currentThreadId=$currentThreadId\")\n        delay(1.milliseconds)\n        println(\"currentThreadId=$currentThreadId\")\n        println(\"ag.graphicExtensions=${ag.graphicExtensions}\")\n        println(\"ag.isFloatTextureSupported=${ag.isFloatTextureSupported}\")\n        println(\"ag.isInstancedSupported=${ag.isInstancedSupported}\")\n//suspend fun main() = Korge(width = 800, height = 600, bgcolor = Colors[\"#2b2b9b\"]) {\n        val wabbitTexture = resourcesVfs[\"bunnys.png\"].readBitmap()\n\n        val bunny1 = wabbitTexture.sliceWithSize(2, 47, 26, 37)\n        val bunny2 = wabbitTexture.sliceWithSize(2, 86, 26, 37)\n        val bunny3 = wabbitTexture.sliceWithSize(2, 125, 26, 37)\n        val bunny4 = wabbitTexture.sliceWithSize(2, 164, 26, 37)\n        val bunny5 = wabbitTexture.sliceWithSize(2, 2, 26, 37)\n\n        val startBunnyCount = 2\n        //val startBunnyCount = 1_000_000\n        // val startBunnyCount = 200_000\n        val bunnyTextures = listOf(bunny1, bunny2, bunny3, bunny4, bunny5)\n        var currentTexture = bunny1\n\n        //val bunnys = BunnyContainer(800_000)\n        val bunnys = BunnyContainer(200_000)\n        addChild(bunnys.createView(wabbitTexture))\n\n        val font = DefaultTtfFont.toBitmapFont(\n            chars = CharacterSet.LOWERCASE + CharacterSet.UPPERCASE + CharacterSet.NUMBERS + CharacterSet.PUNCTUATION + CharacterSet.SPACE,\n            fontSize = 16.0,\n            effect = BitmapEffect(dropShadowX = 1, dropShadowY = 1, dropShadowRadius = 1)\n        )\n        val bunnyCountText = text(\"\", font = font, textSize = 16.0, alignment = com.soywiz.korim.text.TextAlignment.TOP_LEFT).position(32.0, 32.0)\n\n\n        val random = Random(0)\n\n        fun addBunny(count: Int = 1) {\n            for (n in 0 until kotlin.math.min(count, bunnys.available)) {\n                bunnys.apply {\n                    val bunny = alloc()\n                    bunny.speedXf = random.nextFloat() * 1\n                    bunny.speedYf = (random.nextFloat() * 1) - 5\n                    bunny.setAnchor(.5f, 1f)\n                    //bunny.width = 10f\n                    //bunny.height = 20f\n                    //bunny.alpha = 0.3f + random.nextFloat() * 0.7f\n                    bunny.setTex(currentTexture)\n                    bunny.scale(0.5f + random.nextFloat() * 0.5f)\n                    bunny.radiansf = (random.nextFloat() - 0.5f)\n                }\n            }\n            bunnyCountText.text = \"(WIP) KorGE Bunnymark. Bunnies: ${bunnys.size}\"\n        }\n\n        addBunny(startBunnyCount)\n\n        val maxX = views.virtualWidth.toFloat()\n        val minX = 0f\n        val maxY = views.virtualHeight.toFloat()\n        val minY = 0f\n        val gravity = 0.5f // 1.5f\n\n        mouse {\n            up {\n                currentTexture = bunnyTextures.random(random)\n            }\n        }\n\n        addUpdater {\n            if (views.input.mouseButtons != 0) {\n                if (bunnys.size < bunnys.maxSize / 2) {\n                    addBunny(500)\n                } else if (bunnys.size < bunnys.maxSize - 1000) {\n                    addBunny(1_000)\n                }\n            }\n            bunnys.fastForEach { bunny ->\n                bunny.x += bunny.speedXf\n                bunny.y += bunny.speedYf\n                bunny.speedYf += gravity\n\n                if (bunny.x > maxX) {\n                    bunny.speedXf *= -1\n                    bunny.x = maxX\n                } else if (bunny.x < minX) {\n                    bunny.speedXf *= -1\n                    bunny.x = minX\n                }\n\n                if (bunny.y > maxY) {\n                    bunny.speedYf *= -0.85f\n                    bunny.y = maxY\n                    bunny.radiansf = (random.nextFloat() - 0.5f) * 0.2f\n                    if (random.nextFloat() > 0.5) {\n                        bunny.speedYf -= random.nextFloat() * 6\n                    }\n                } else if (bunny.y < minY) {\n                    bunny.speedYf = 0f\n                    bunny.y = minY\n                }\n            }\n        }\n    }\n}\n","package easings\n\nimport com.soywiz.korge.input.*\nimport com.soywiz.korge.tween.*\nimport com.soywiz.korge.view.*\nimport com.soywiz.korim.color.*\nimport com.soywiz.korim.vector.*\nimport com.soywiz.korma.geom.vector.*\nimport com.soywiz.korma.interpolation.*\nimport extension.*\nimport kotlinx.coroutines.*\n\nclass EasingsScene : ShowScene() {\n    override suspend fun SContainer.sceneMain() {\n        var ballTween: Job? = null\n        val ball = circle(64.0, Colors.PURPLE).xy(64, 64)\n\n        fun renderEasing(easing: Easing): View {\n            return Container().apply {\n                val bg = solidRect(64, -64, Colors.BLACK.withAd(0.2))\n                //graphics(renderer = GraphicsRenderer.SYSTEM) { shape ->\n                graphics {\n                    stroke(Colors.RED, StrokeInfo(thickness = 4.0)) {\n                        this.line(0.0, 0.0, 0.0, -64.0)\n                        this.line(0.0, 0.0, 64.0, 0.0)\n                    }\n                    stroke(Colors.WHITE, StrokeInfo(thickness = 2.0)) {\n                        var first = true\n                        //val overflow = 8\n                        val overflow = 0\n                        for (n in (-overflow)..(64 + overflow)) {\n                            val ratio = n.toDouble() / 64.0\n                            val x = n.toDouble()\n                            val y = easing(ratio) * 64\n                            //println(\"x=$x, y=$y, ratio=$ratio\")\n                            if (first) {\n                                first = false\n                                moveTo(x, -y)\n                            } else {\n                                lineTo(x, -y)\n                            }\n                        }\n                    }\n                }.addTo(this)\n                val textSize = 10.0\n                text(\"$easing\", textSize = textSize).xy(0.0, textSize)\n                onOver { bg.color = Colors.BLACK.withAd(1.0) }\n                onOut { bg.color = Colors.BLACK.withAd(0.2) }\n                onClick {\n                    ballTween?.cancel()\n                    ballTween = ball.tweenAsync(ball::x[64.0, 64.0 + 512.0], easing = easing)\n                }\n            }\n        }\n\n        val easings = listOf(\n            *Easing.ALL.values.toTypedArray(),\n            Easing.cubic(.86, .13, .22, .84),\n        )\n\n        container {\n            scale = 0.9\n            var mn = 0\n            for (my in 0 until 4) {\n                for (mx in 0 until 8) {\n                    val easing = easings.getOrNull(mn++) ?: continue\n                    renderEasing(easing).xy(50 + mx * 100, 300 + my * 100).addTo(this)\n                }\n            }\n        }\n    }\n}","package extension\n\nimport com.soywiz.kds.*\nimport com.soywiz.korge.scene.*\nimport com.soywiz.korge.view.*\nimport com.soywiz.korinject.*\nimport com.soywiz.korio.lang.*\nimport kotlin.reflect.*\n\nexpect val ext: Ext\n\nopen class Ext {\n\topen val hasExternalLayout: Boolean get() = false\n\n\topen fun preinit() {\n\t}\n\n\topen fun init(stage: Stage) {\n\t}\n\n\topen fun registerEvent(event: String, handler: (detail: Any?) -> Unit) {\n\t}\n\n\topen fun dispatchCustomEvent(event: String, detail: Any?) {\n\t}\n\n\topen fun getSelectedSceneName(): String? {\n\t\treturn null\n\t}\n}\n\nfun Stage.register(vararg sceneInfos: SceneInfo<*>) {\n\tfor (sceneInfo in sceneInfos) {\n\t\tinjector.mapPrototype(sceneInfo.clazz as KClass<ShowScene>) { sceneInfo.gen(this) }\n\t\tregisteredScenes[sceneInfo.className] = sceneInfo\n\t}\n}\n\nclass SceneInfo<T : ShowScene>(\n\tval title: String,\n\tval group: String,\n\tval path: String,\n\tval clazz: KClass<out T>,\n\tval gen: suspend AsyncInjector.() -> T\n) {\n\tval className get() = clazz.portableSimpleName\n\toverride fun toString(): String = title\n}\n\ninline fun <reified T : ShowScene> SceneInfo(\n\ttitle: String = \"title\",\n\tgroup: String = \"group\",\n\tsrcPath: String = \"/src/commonMain/kotlin/main.kt\",\n\tnoinline gen: suspend AsyncInjector.() -> T\n): SceneInfo<T> {\n\treturn SceneInfo(title, group, srcPath, T::class, gen)\n}\n\nval Stage.registeredScenes by extraProperty { LinkedHashMap<String, SceneInfo<out ShowScene>>() }\n\n\nabstract class ShowScene : Scene() {\n}\n","package filters\n\nimport com.soywiz.klock.*\nimport com.soywiz.korge.animate.*\nimport com.soywiz.korge.tween.*\nimport com.soywiz.korge.view.*\nimport com.soywiz.korge.view.filter.*\nimport com.soywiz.korim.format.*\nimport com.soywiz.korio.file.std.*\nimport com.soywiz.korma.interpolation.*\nimport extension.*\n\nclass FiltersScene : ShowScene() {\n\toverride suspend fun SContainer.sceneMain() {\n\t\tval bitmap = resourcesVfs[\"korge.png\"].readBitmap()\n\n\t\tval wave = WaveFilter()\n\t\timage(bitmap) {\n\t\t\tscale(.5)\n\t\t\tposition(0, 0)\n\t\t\tfilter = wave\n\t\t}\n\n\t\tval blur = BlurFilter()\n\t\timage(bitmap) {\n\t\t\tscale(.5)\n\t\t\tposition(256, 0)\n\t\t\tfilter = blur\n\t\t}\n\n\t\t//val color = ColorMatrixFilter(ColorMatrixFilter.GRAYSCALE_MATRIX)\n\t\t//val color = TransitionFilter(TransitionFilter.Transition.DIAGONAL1, reversed = false)\n\t\tval color = TransitionFilter(TransitionFilter.Transition.SWEEP, reversed = false, filtering = true)\n\t\t//val color = TransitionFilter(TransitionFilter.Transition.CIRCULAR, reversed = false)\n\t\t//val color = TransitionFilter(time = 1.0)\n\t\timage(bitmap) {\n\t\t\tscale(.5)\n\t\t\tposition(512, 0)\n\t\t\tfilter = color\n\t\t}\n\n\t\tval page = PageFilter()\n\t\timage(bitmap) {\n\t\t\tscale(.5)\n\t\t\tposition(0, 256)\n\t\t\tfilter = page\n\t\t}\n\n\t\tval conImg = image(bitmap) {\n\t\t\tscale(.5)\n\t\t\tposition(256, 256)\n\t\t\tfilter = Convolute3Filter(Convolute3Filter.KERNEL_SHARPEN)\n\t\t}\n\n\t\tval swizzle = SwizzleColorsFilter()\n\t\timage(bitmap) {\n\t\t\tscale(.5)\n\t\t\tposition(512, 256)\n\t\t\tfilter = swizzle\n\t\t}\n\n\t\tanimate(parallel = true) {\n\t\t\tsequence(looped = true) {\n\t\t\t\ttween(wave::time[1.seconds], time = 1.seconds, easing = Easing.EASE_IN_OUT)\n\t\t\t\ttween(wave::time[0.seconds], time = 1.seconds, easing = Easing.EASE_IN_OUT)\n\t\t\t}\n\t\t\tsequence(looped = true) {\n\t\t\t\ttween(blur::radius[16], time = 1.seconds, easing = Easing.EASE_IN_OUT)\n\t\t\t\ttween(blur::radius[0], time = 1.seconds, easing = Easing.EASE_IN_OUT)\n\t\t\t}\n\t\t\tsequence(looped = true) {\n\t\t\t\t//tween(color::blendRatio[0], time = 1.seconds, easing = Easing.EASE_IN_OUT)\n\t\t\t\t//tween(color::blendRatio[1], time = 1.seconds, easing = Easing.EASE_IN_OUT)\n\t\t\t\ttween(color::ratio[0], time = 1.seconds, easing = Easing.EASE_IN_OUT)\n\t\t\t\ttween(color::ratio[1], time = 1.seconds, easing = Easing.EASE_IN_OUT)\n\t\t\t}\n\t\t\tsequence(looped = true) {\n\t\t\t\ttween(page::hratio[0], time = 1.seconds, easing = Easing.EASE_IN_OUT)\n\t\t\t\ttween(page::hratio[1], time = 1.seconds, easing = Easing.EASE_IN_OUT)\n\t\t\t}\n\t\t\tsequence(looped = true) {\n\t\t\t\tblock { conImg.filter = Convolute3Filter(Convolute3Filter.KERNEL_SHARPEN) }\n\t\t\t\twait(1.seconds)\n\t\t\t\tblock { conImg.filter = Convolute3Filter(Convolute3Filter.KERNEL_IDENTITY) }\n\t\t\t\twait(1.seconds)\n\t\t\t}\n\t\t\tsequence(looped = true) {\n\t\t\t\tarrayOf(\"rgga\", \"bgga\", \"bgba\", \"grba\", \"gbba\", \"gbga\", \"bbga\").forEach {\n\t\t\t\t\tblock { swizzle.swizzle = it }\n\t\t\t\t\twait(0.5.seconds)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}","package gestures\n\nimport com.soywiz.klock.*\nimport com.soywiz.korge.input.*\nimport com.soywiz.korge.tween.*\nimport com.soywiz.korge.ui.*\nimport com.soywiz.korge.view.*\nimport com.soywiz.korim.format.*\nimport com.soywiz.korio.file.std.*\nimport com.soywiz.korma.geom.*\nimport com.soywiz.korma.interpolation.*\nimport extension.*\n\nclass GesturesScene : ShowScene() {\n    override suspend fun SContainer.sceneMain() {\n        val minDegrees = (-16).degrees\n        val maxDegrees = (+16).degrees\n        lateinit var image: Image\n\n        val container = container {\n            position(256, 256)\n            image = image(resourcesVfs[\"korge.png\"].readBitmap()) {\n                rotation = maxDegrees\n                anchor(.5, .5)\n                scale(.8)\n            }\n        }\n\n        text(\"Zoom and rotate with two fingers\")\n\n        touch {\n            var startImageRatio = 1.0\n            var startRotation = 0.degrees\n\n            scaleRecognizer(start = {\n                startImageRatio = image.scale\n            }) {\n                image.scale = startImageRatio * this.ratio\n            }\n\n            rotationRecognizer(start = {\n                startRotation = container.rotation\n            }) {\n                container.rotation = startRotation + this.delta\n            }\n        }\n\n        image.mouse {\n            click {\n                image.alpha = if (image.alpha > 0.5) 0.5 else 1.0\n            }\n        }\n\n        addFixedUpdater(2.timesPerSecond) {\n            println(views.input.activeTouches)\n        }\n\n        uiButton(text = \"1\") {\n            position(10, 380)\n            onPress { println(\"TAPPED ON 1\") }\n        }\n        uiButton(text = \"2\") {\n            position(150, 380)\n            onPress { println(\"TAPPED ON 2\") }\n        }\n\n        uiButton(text = \"3\") {\n            position(300, 380)\n            onPress { println(\"TAPPED ON 3\") }\n        }\n\n        while (true) {\n            image.tween(image::rotation[minDegrees], time = 1.seconds, easing = Easing.EASE_IN_OUT)\n            image.tween(image::rotation[maxDegrees], time = 1.seconds, easing = Easing.EASE_IN_OUT)\n        }\n    }\n}","package scene1\n\nimport com.soywiz.klock.*\nimport com.soywiz.korge.tween.*\nimport com.soywiz.korge.view.*\nimport com.soywiz.korim.format.*\nimport com.soywiz.korio.file.std.*\nimport com.soywiz.korma.geom.*\nimport com.soywiz.korma.interpolation.*\nimport extension.*\n\nclass Scene1 : ShowScene() {\n\toverride suspend fun SContainer.sceneMain() {\n\t\tval minDegrees = (-16).degrees\n\t\tval maxDegrees = (+16).degrees\n\n\t\tval image = image(resourcesVfs[\"korge.png\"].readBitmap()) {\n\t\t\trotation = maxDegrees\n\t\t\tanchor(.5, .5)\n\t\t\tscale(.8)\n\t\t\tposition(400, 300)\n\t\t}\n\n\t\twhile (true) {\n\t\t\timage.tween(image::rotation[minDegrees], time = 1.seconds, easing = Easing.EASE_IN_OUT)\n\t\t\timage.tween(image::rotation[maxDegrees], time = 1.seconds, easing = Easing.EASE_IN_OUT)\n\t\t}\n\t}\n}","package scene2\n\nimport com.soywiz.korge.input.*\nimport com.soywiz.korge.view.*\nimport com.soywiz.korim.color.*\nimport com.soywiz.korim.format.*\nimport com.soywiz.korio.file.std.*\nimport com.soywiz.korma.geom.*\nimport extension.*\n\nclass Scene2 : ShowScene() {\n\toverride suspend fun SContainer.sceneMain() {\n\t\timage(resourcesVfs[\"korge.png\"].readBitmap()) {\n\t\t\tcolorMul = Colors.RED\n\t\t\trotation = 0.degrees\n\t\t\tanchor(.5, .5)\n\t\t\tscale(.8)\n\t\t\tposition(400, 300)\n\t\t\talpha = 0.5\n\t\t\tmouse {\n\t\t\t\tonOver { alpha = 1.0 }\n\t\t\t\tonOut { alpha = 0.5 }\n\t\t\t}\n\t\t}\n\t}\n}","package spine\n\nimport com.esotericsoftware.spine.*\nimport com.esotericsoftware.spine.korge.*\nimport com.soywiz.korge.*\nimport com.soywiz.korge.view.*\nimport com.soywiz.korim.atlas.*\nimport com.soywiz.korim.color.*\nimport com.soywiz.korim.format.*\nimport com.soywiz.korio.file.std.*\nimport extension.*\n\nclass SpineScene : ShowScene() {\n    override suspend fun SContainer.sceneMain() {\n        val baseVfs = resourcesVfs[\"spine/spineboy\"]\n        //val atlas = baseVfs[\"spineboy-pma.atlas\"].readAtlas(asumePremultiplied = true)\n        val atlas = baseVfs[\"spineboy-pma.atlas\"].readAtlas(ImageDecodingProps.DEFAULT.copy(asumePremultiplied = true))\n        val skeletonData = baseVfs[\"spineboy-pro.skel\"].readSkeletonBinary(atlas, 0.4f)\n\n        val skeleton = Skeleton(skeletonData) // Skeleton holds skeleton state (bone positions, slot attachments, etc).\n        //skeleton.setPosition(250f, 20f)\n\n        val stateData = AnimationStateData(skeletonData) // Defines mixing (crossfading) between animations.\n        stateData.setMix(\"run\", \"jump\", 0.2f)\n        stateData.setMix(\"jump\", \"run\", 0.2f)\n\n        val state = AnimationState(stateData) // Holds the animation state for a skeleton (current animation, time, etc).\n        state.timeScale = 1.1f // Speed ups all animations down to 110% speed.\n\n        // Queue animations on track 0.\n        state.setAnimation(0, \"run\", true)\n        state.addAnimation(0, \"jump\", false, 2f) // Jump after 2 seconds.\n        state.addAnimation(0, \"run\", true, 0f) // Run after the jump.\n\n        state.update(1f / 60f) // Update the animation time.\n\n        state.apply(skeleton) // Poses skeleton using current animations. This sets the bones' local SRT.\n        skeleton.updateWorldTransform() // Uses the bones' local SRT to compute their world SRT.\n\n        // Add view\n        container {\n            //speed = 2.0\n            speed = 1.0\n            scale(2.0)\n            position(views.virtualWidth * 0.5, views.virtualHeight * 0.9)\n            skeletonView(skeleton, state)\n            solidRect(10.0, 10.0, Colors.RED).centered\n            mouseEnabled = false\n        }\n    }\n}\n","package ui\n\nimport com.soywiz.klock.*\nimport com.soywiz.korge.input.*\nimport com.soywiz.korge.tween.*\nimport com.soywiz.korge.ui.*\nimport com.soywiz.korge.view.*\nimport com.soywiz.korim.color.*\nimport com.soywiz.korim.font.*\nimport com.soywiz.korma.geom.*\nimport extension.*\n\nclass SimpleUIScene : ShowScene() {\n\tlateinit var font: Font\n\tlateinit var solidRect: SolidRect\n\n\toverride suspend fun SContainer.sceneMain() {\n\t\tval container = this\n\n\t\tfont = DefaultTtfFont.toBitmapFont(16.0)\n\t\tsolidRect = solidRect(100, 100, Colors[\"#700ec7\"]).position(200.0, 100.0).centered\n\n\t\tuiVerticalStack(width = 150.0) {\n\t\t\tuiButton(text = \"Open Window List\") {\n\t\t\t\tonClick {\n\t\t\t\t\tcontainer.openLazyLongListWindow()\n\t\t\t\t}\n\t\t\t}\n\t\t\tuiButton(text = \"Open Properties\") {\n\t\t\t\tonClick {\n\t\t\t\t\tcontainer.openPropertiesWindow()\n\t\t\t\t}\n\t\t\t}\n\t\t}.position(0.0, 32.0)\n\n\t\t//container.openLazyLongListWindow()\n\n\t\tuiWindow(\"Scrollable\") {\n\t\t\tfor (n in 0 until 10) {\n\t\t\t\tuiButton(text = \"Hello $n\").position(n * 32, n * 32)\n\t\t\t}\n\t\t}.centerOnStage()\n\t}\n\n\tfun Container.openLazyLongListWindow() {\n\t\tval window = uiWindow(\"Lazy long list\") {\n\t\t\tuiSkin = UISkin {\n\t\t\t\tthis.textFont = font\n\t\t\t}\n\t\t\tuiVerticalList(object : UIVerticalList.Provider {\n\t\t\t\toverride val numItems: Int = 1000\n\t\t\t\toverride val fixedHeight: Double = 20.0\n\t\t\t\toverride fun getItemHeight(index: Int): Double = fixedHeight\n\t\t\t\toverride fun getItemView(index: Int, vlist: UIVerticalList): View = UIText(\" HELLO WORLD $index\")\n\t\t\t})\n\t\t}.centerOnStage()\n\n\t\ttweenNoWait(\n\t\t\twindow::x[0.0, window.x],\n\t\t\twindow::y[0.0, window.y],\n\t\t\twindow::width[0.0, window.width],\n\t\t\twindow::height[0.0, window.height],\n\t\t\twindow::alpha[0.3, 1.0],\n\t\t\ttime = 0.3.seconds\n\t\t)\n\t}\n\n\tfun Container.openPropertiesWindow() {\n\t\tuiWindow(\"Properties\", 400.0, 300.0) {\n\t\t\tit.container.mobileBehaviour = false\n\t\t\tit.container.overflowRate = 0.0\n\t\t\tuiVerticalStack(300.0) {\n\t\t\t\tuiText(\"Properties\") { textColor = Colors.RED }\n\t\t\t\t//append(UIPropertyRow(\"Name\")) { container.uiTextInput(solidRect.name ?: \"\") }\n\t\t\t\tuiPropertyNumberRow(\"Alpha\", *UIEditableNumberPropsList(solidRect::alpha))\n\t\t\t\tuiPropertyNumberRow(\"Position\", *UIEditableNumberPropsList(solidRect::x, solidRect::y, min = -1024.0, max = +1024.0, clamped = false))\n\t\t\t\tuiPropertyNumberRow(\"Size\", *UIEditableNumberPropsList(solidRect::width, solidRect::height, min = -1024.0, max = +1024.0, clamped = false))\n\t\t\t\tuiPropertyNumberRow(\"Scale\", *UIEditableNumberPropsList(solidRect::scaleX, solidRect::scaleY, min = -1.0, max = +1.0, clamped = false))\n\t\t\t\tuiPropertyNumberRow(\"Rotation\", *UIEditableNumberPropsList(solidRect::rotationDeg, min = -360.0, max = +360.0, clamped = true))\n\t\t\t\tval skewProp = uiPropertyNumberRow(\"Skew\", *UIEditableNumberPropsList(solidRect::skewXDeg, solidRect::skewYDeg, min = -360.0, max = +360.0, clamped = true))\n\t\t\t\tappend(UIPropertyRow(\"Visible\")) {\n\t\t\t\t\tthis.container.append(uiCheckBox(checked = solidRect.visible, text = \"\").also {\n\t\t\t\t\t\tit.onChange {\n\t\t\t\t\t\t\tsolidRect.visible = it.checked\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\t//println(skewProp.getVisibleGlobalArea())\n\n\t\t\t}\n\t\t}.centerOnStage()\n\t}\n}\n\nprivate var View.rotationDeg: Double\n\tget() = rotation.degrees\n\tset(value) { rotation = value.degrees }\n\nprivate var View.skewXDeg: Double\n\tget() = skewX.degrees\n\tset(value) { skewX = value.degrees }\n\nprivate var View.skewYDeg: Double\n\tget() = skewY.degrees\n\tset(value) { skewY = value.degrees }\n","package extension\n\nimport com.soywiz.klock.*\nimport com.soywiz.korge.view.*\nimport com.soywiz.korio.*\nimport com.soywiz.korio.async.*\nimport kotlinx.browser.*\nimport kotlinx.coroutines.*\nimport kotlinx.dom.*\nimport org.w3c.dom.*\nimport org.w3c.dom.events.*\nimport org.w3c.fetch.*\n\nactual val ext: Ext = object : Ext() {\n\tval canvasQuery by lazy { document.querySelector(\"#mycustomcanvas\") }\n\n\toverride val hasExternalLayout: Boolean get() = canvasQuery != null\n\n\toverride fun preinit() {\n\t\tval dwindow = window.asDynamic()\n\t\tif (canvasQuery != null) {\n\t\t\tdwindow.korgwCanvasQuery = \"#mycustomcanvas\"\n\t\t}\n\t}\n\n\toverride fun init(stage: Stage) {\n\t\t//window.onhashchange =\n\t\t//document.location!!.hash\n\n\t\tval registeredScenes = stage.registeredScenes\n\n\t\tval sceneTree = document.querySelector(\"#scene_tree\")\n\t\tif (sceneTree != null) {\n\t\t\tsceneTree.textContent = \"\"\n\n\t\t\tfor (entry in registeredScenes.values.groupBy { it.group }) {\n\t\t\t\tval group = entry.key\n\t\t\t\tval groupDiv = document.createElement(\"h2\")\n\t\t\t\tval groupDivTree = document.createElement(\"div\")\n\t\t\t\tgroupDiv.textContent = group\n\t\t\t\tsceneTree.appendChild(groupDiv)\n\t\t\t\tsceneTree.appendChild(groupDivTree)\n\t\t\t\tfor (scene in entry.value) {\n\t\t\t\t\tval className = scene.className\n\t\t\t\t\tval title = scene.title\n\t\t\t\t\tval path = scene.path\n\t\t\t\t\tval elementNode = document.createElement(\"a\").unsafeCast<HTMLAnchorElement>()\n\t\t\t\t\telementNode.id = \"scene-${className}\"\n\t\t\t\t\telementNode.textContent = title\n\t\t\t\t\telementNode.href = \"#${className}\"\n\t\t\t\t\tgroupDivTree.appendChild(elementNode)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Alternatively we could try CodeMirror\n\t\tval editor by lazy { if (window.asDynamic().ace) ace.edit(\"editor\") else null }\n\n\t\tregisterEvent(\"changedScene\") { detail ->\n\t\t\tval className = detail.toString()\n\t\t\tval sceneId = \"scene-${className}\"\n\n\t\t\tval sceneInfo = registeredScenes[className]\n\t\t\tval editor = editor\n\n\t\t\tif (sceneInfo != null && editor != null) {\n\t\t\t\ttry {\n\t\t\t\t\teditor.setTheme(\"ace/theme/monokai\");\n\t\t\t\t\teditor.session.setMode(\"ace/mode/kotlin\");\n\t\t\t\t\teditor.setReadOnly(true)\n\n\t\t\t\t\t//launchImmediately(stage.coroutineContext) {\n\n\t\t\t\t\tlaunchImmediately(stage.views.coroutineContext) {\n\t\t\t\t\t\tdelay(150.milliseconds) // Give time for the sample to start and load resources\n\t\t\t\t\t\tval content = try {\n\t\t\t\t\t\t\twindow.fetch(\n\t\t\t\t\t\t\t\t\"https://raw.githubusercontent.com/korlibs/show.korge.org/main/src/commonMain/kotlin/${sceneInfo.path}\",\n\t\t\t\t\t\t\t\tjsObject(\"importance\" to \"low\").unsafeCast<RequestInit>()\n\t\t\t\t\t\t\t).await().text().await()\n\t\t\t\t\t\t} catch (e: Throwable) {\n\t\t\t\t\t\t\te.message?.toString() ?: \"Error\"\n\t\t\t\t\t\t}\n\t\t\t\t\t\teditor.setValue(content, 1)\n\t\t\t\t\t}\n\t\t\t\t} catch (e: dynamic) {\n\t\t\t\t\tconsole.error(e)\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (active in document.querySelectorAll(\"a.active\").toList()) {\n\t\t\t\tactive.unsafeCast<HTMLElement>().removeClass(\"active\")\n\t\t\t}\n\t\t\tdocument.querySelector(\"#$sceneId\")?.addClass(\"active\")\n\t\t}\n\n\t}\n\n\toverride fun registerEvent(event: String, handler: (detail: Any?) -> Unit) {\n\t\twindow.addEventListener(event, { ev: Event ->\n\t\t\thandler(ev.unsafeCast<CustomEvent>().detail)\n\t\t})\n\t}\n\n\toverride fun dispatchCustomEvent(event: String, detail: Any?) {\n\t\twindow.dispatchEvent(CustomEvent(type = event, CustomEventInit(detail)))\n\t}\n\n\toverride fun getSelectedSceneName(): String? {\n\t\treturn document.location?.hash?.trim('#')\n\t}\n}\n\nfun NodeList.toList(): List<Node> = (0 until length).map { this[it].unsafeCast<Node>() }","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(330);\n"],"names":["root","factory","exports","module","define","amd","this","worldView","value","DefaultWorldPool","DynamicTree","Vec2","gravityX","gravityY","pool","DefaultBroadPhaseBuffer","strategy","component","PropertyThis","TempPolygon","ClipVertex","ReferenceFace","EPAxis","DistanceInput","SimplexCache","DistanceOutput","EdgeResults","EPCollider","Stats","SimplexVertex","Simplex","DistanceProxy","Sweep","SeparationFunction","i","DynamicTreeNode","nodeId","treeNode","node","leaf_index","leaf","index","leafAABB","combinedArea","area","child1","cost1","inheritanceCost","oldArea","child2","cost2","cost","sibling","allocateNode","newParent","oldParent","balance","parent","grandParent","freeNode","iA","A","iB","iC","C","B","iF","iG","F","G","iD","iE","D","E","RayCastInput","Mixin","Shape","r","g","b","argCol1","argCol2","argCol3","Vec3","copy","bd","ViewInfo","ContactFilter","Filter","ContactSolver","Timer","SolverData","ContactSolverDef","ContactImpulse","ProfileEntry","ContactRegister","register","creator","type1","type2","register2","ContactManager","broadPhase","Profile","ParticleSystem","values","TimeStep","Vec2ArrayPool","WorldQueryWrapper","WorldRayCastWrapper","Island","TOIInput","TOIOutput","gravity","addType","RayCastOutput","Contact","argPool","EdgeShape","ContactEdge","vc","cp1","cp2","vn1","cp1rB","cp1rA","normalx","normaly","vn2","cp2rB","cp2rA","bx","by","R","ax","ay","xx","R1","xy","dx","dy","mA","P1x","P2x","P1y","P2y","mB","dv1","normal","dv2","solveVelocityConstraints2a","solveVelocityConstraints2b","solveVelocityConstraints2c","solveVelocityConstraints2d","point","lambda","vn","a","newImpulse","Px","Py","pointCount","j","vcp","tangentx","tangenty","vt","friction","maxFriction","ContactPositionConstraint","ContactVelocityConstraint","WorldManifold","PositionSolverManifold","VelocityConstraintPoint","ParticleBodyContact","step","curr","length","left","ray","tag","toLong","ParticleContact","ParticleBufferInt","ParticleBuffer","DestroyParticlesInShapeCallback","CreateParticleGroupCallback","ParticleDef","UpdateBodyContactsCallback","SolveCollisionCallback","NewIndices","LambdaOrderedStack","argSize","argContainerSize","PolygonContact","ContactMutableStack","CircleContact","PolygonAndCircleContact","EdgeAndCircleContact","EdgeAndPolygonContact","ChainAndCircleContact","ChainAndPolygonContact","Collision","OrderedStack","MutableStack","extendStack","newStack","lazy","Date","now","view","worldScale","viewPos","position","newX","newY","viewRootStage","fixtureA","fixtureB","filterA","filterB","aabb1","aab","cv","v1","c","xfA","xfB","polygonB","edgeA","offset0","offset2","convex1","convex2","hasVertex0","hasVertex3","offset1","manifold","primaryAxis","bestIndex","bestValue","i1","ie0","toByte","ie1","i2","cp","axis","v","nx","ny","s","normalB","tempx","vB","tempy","s1","s2","numOut","vIn","vIn0","vIn1","vIn0v","offset","vIn1v","distance0","vOut","distance1","vOutNO","interp","vertexIndexA","shapeA","indexA","shapeB","indexB","circle1","circle2","circle1p","circle2p","pAx","pAy","distSqr","radius","circle","xfBq","circlep","cx","cy","xfAq","px","py","normalIndex","separation","polygon","vertexCount","vertices","cLocalx","vertex","cLocaly","normals","vertIndex1","vertIndex2","v2","mpoint","tempX","tempY","temp3X","temp3Y","u1","u2","fcx","fcy","tx","ty","poly1","poly2","xf2","xf1","maxSeparation","count1","xfq","n1s","v1s","si","count2","v2s","v2sj","sij","results","normals1","edge1","xf1q","xf2q","minDot","normals2","normal1x","normal1y","dot","vertices2","c0","out","c1","out1","polyA","polyB","totalRadius","k_tol","flip","vertices1","iv1","iv2","np","sideOffset1","sideOffset2","frontOffset","circleB","P","B1","A1","u","e2","B2","A2","den","cid","tempA","o","sv","cache","proxyA","proxyB","transformA","wALocal","transformB","wBLocal","metric2","metric1","pA","pB","w2","w1","d12_2","d12_1","inv_d12","w1e12","w1e13","w2e23","n123","d13_2","d123_3","d13_1","d123_2","inv_d13","d23_2","d23_1","d123_1","inv_d23","inv_d123","shape","poly","chain","edge","d","input","saveCount","iter","duplicate","output","rA","rB","t1","target","tolerance","done","t2","tMax","pushBackIter","rootIterCount","a1","a2","t","sweepA","sweepB","count","indexes","pointA","pointB","mp0p","radiusA","radiusB","cAx","cBx","cAy","cBy","planePoint","clipPoint","scalar","aabb","userData","proxyId","displacement","proxyIdA","proxyIdB","fatAABB","array","fromIndex","toIndex","primaryPair","callback","userDataA","userDataB","oldBuffer","nodeAABB","insertLeaf","removeLeaf","lowerBound","upperBound","newBuffer","v0","CircleShape","xf","p","centerx","centery","normalOut","d1","transform","tq","tp","inputp1","positionx","positiony","sx","sy","inputp2","rx","ry","rr","sigma","massData","density","xfqc","xfqs","xfpx","xfpy","v1x","v1y","v2x","v2y","ds","xfp","p1x","p1y","denominator","numerator","qx","qy","PolygonShape","lower","upper","vx","vy","maxDistance","normalForMaxDistanceX","pLocalx","normalForMaxDistanceY","pLocaly","minDistanceX","minDistanceY","minDistance2","distanceVecX","distanceVecY","distance2","distance","tempxn","tempyn","center","I","e1","triangleArea","k_inv3","ex1","ex2","ey1","ey2","newCapacity","oldCapacity","klass","det","result","hashCode","obj","other","x","y","round","low","high","q","tempc","angleRadians","beta","angle","alpha","System_nanoTime","T","isInfinite","invLength","w","flag","f","ce","ce0","Fixture","fixture","def","impulse","wake","localCenter","temp","oldCenter","temp2","jn","proxyUserDataA","proxyUserDataB","bodyA","bodyB","fA","fB","cNuke","activeA","activeB","argOther","childIndex","body","childCount","FixtureProxy","old","newLen","proxy","transform1","transform2","bodyCapacity","contactCapacity","jointCapacity","listener","Velocity","Position","bm_sweep","h","profile","translationx","translationy","ratio","rotation","positionSolved","jointsOkay","jointOkay","contactsOkay","allowSleep","minSleepTime","angTolSqr","linTolSqr","subStep","toiIndexA","toiIndexB","contact","joint","constraints","reg","Body","je","je0","f0","collideConnected","dt","velocityIterations","positionIterations","stackSize","seed","stackCount","sensorA","sensorB","solve","island","minContact","minAlpha","bA","bB","typeA","typeB","collideA","collideB","alpha0","solveTOI","friction1","friction2","restitution1","restitution2","touching","sensor","mp2","mp1","id2","wasTouching","pc","wA","wB","vA","aA","aB","cA","localCenterA","cB","localCenterB","vcnormal","vcprA","wmPj","vcprB","rnA","rnB","kNormal","rtA","rtB","kTangent","vRel","vcp1","vcp2","rn1A","rn1B","rn2A","rn2B","k11","k22","k12","minSeparation","localCenterAx","localCenterAy","localCenterBx","localCenterBy","psm","rAx","rAy","rBx","rBy","K","solveVelocityConstraints0","solveVelocityConstraints1","solveVelocityConstraints2","plocalPoint","pLocalPoints0","pointBx","pointAx","pointBy","pointAy","pcLocalNormal","pcLocalPoint","pcLocalPointsI","clipPointx","planePointx","clipPointy","planePointy","color","bm","bI","aabblowerBoundx","aabblowerBoundy","aabbupperBoundx","aabbupperBoundy","firstProxy","lastProxy","ap","n","bp","rpx","rpy","invAm","invBm","invBI","rpn","av","particleMass","fdn","pair","triad","stride","group","pb","pa","d2","invD","pos","sortedArray","copyOfRange","c_index","rightTag","bottomLeftTag","b_index","bottomRightTag","exceptZombie","p1","p2x","p2y","b1x","b1y","gravityx","gravityy","criticalVelocytySquared","vel","k","pressurePerWeight","velocityPerPressure","m","coef","velData","particleInvMass","velDataA","fx","fy","velDataB","velA","damping","invMass","velB","cross","velocityTransform","rs","oa","ob","oc","rc","r2","elasticStrength","va","strength","roax","roay","vb","robx","roby","rocx","rocy","r1","springStrength","r0","a2A","inter","a2B","strengthA","strengthB","fn","viscousStrength","pInvMass","minWeight","powderStrength","ejectionStrength","colorMixing256","colorB","colorA","dr","dg","db","da","newCount","flags","destructionListener","newIndices","next","velocity","buffer","newInstance","argNum","size","ensureInit","argObject","key","nearestReference","getOrCreateBox2dWorld","slot","attachmentName","skeleton","frameCount","CurveTimeline","TranslateTimeline","PathConstraintPositionTimeline","IntSet","timelines","to","updateMixingFrom","from","delta","finished","mix","blend","applyMixingFrom","alphaHold","timelineCount","animationLast","animationTime","events","alphaMix","firstFrame","direction","timelineMode","drawOrder","timeline","timelineBlend","timelineHoldMix","applyRotateTimeline","timelinesRotation","applyAttachmentTimeline","attachments","queueEvents","time","frames","frameIndex","bone","total","frame","frameTime","prevRotation","percent","diff","lastTotal","lastDiff","dir","current","entry","animationEnd","animationStart","duration","event","trackLastWrapped","expandToIndex","setAndGrow","interrupt","setSize","trackIndex","animation","loop","last","timelinesCount","propertyIDs","id","Animation","TrackEntry","EventQueue","Key","data","name","ConstraintData","x1","y1","tt","uu","ut","ut3","uuu","cx1","uut3","cx2","utt3","x2","ttt","cy1","cy2","y2","tangents","constraint","containsIdentity","sortBone","first","constrained","child","sortReset","sortPathConstraintAttachment","slotIndex","slotBone","attachment","boneCount","skin","pathBones","nn","bones","defaultSkin","slotCount","Skin","skeletonData","shrink","ii","readAttachment","nonessential","path","region","scale","scaleX","scaleY","width","height","rgba8888ToColor","readVertices","box","readFloatArray","readShortArray","edges","mesh","triangles","uvs","hullLength","LinkedMesh","skinName","inheritDeform","lengths","closed","constantSpeed","clip","endSlotIndex","Vertices","verticesLength","FloatArrayList","IntArrayList","bonesArray","weights","drawOrderCount","DrawOrderTimeline","offsetCount","originalIndex","unchangedIndex","unchanged","eventCount","EventTimeline","Event","eventData","SpineRegion","VertexAttachment","Attachment","nextID","vertexEffect","blendMode","skeletonColor","texture","vertexSize","attachmentSkeleton","renderSkeleton","ctx","bb","slotColor","premultipliedAlpha","slotBlendMode","multiplier","applyVertexEffect","clippedVertices","draw","clippedTriangles","tempLight1","tempDark1","tempPosition","tempLight2","tempDark2","tempUV","toFloatBits","light","dark","verticesCount","verticesData","addUpdater","SkeletonClipping","BoundsBuilder","SpineTriangulator","ShortArrayList","truncate","items","newSize","resize","indexOfIdentity","indices","positiveArea","previous","p3y","p3x","ddfx","tmpx","dddfx","ddfy","tmpy","dddfy","dfx","dfy","curves","coerceIn","type","start","prevY","prevX","degrees","setup","g2","b2","setupLight","setupDark","setAttachment","slotAttachment","deformArray","frameVertices","deform","setupVertices","lastVertices","arraycopy","prevVertices","prev","nextVertices","lastTime","firedEvents","drawOrderToSetupIndex","slots","softness","bendDirection","compress","stretch","rotateMix","translateMix","scaleMix","shearMix","rotate","translate","shear","spacing","objects","listeners","currentDelta","nextTime","setCurrent","disposeNext","applied","setupState","animationName","trackEntry","delay","computeHold","toString","fromName","toName","FloatHolder","holder","shearX","shearY","pd","la","lc","lb","ld","prx","za","cos","sin","zc","zb","zd","pid","ia","ib","ic","ra","rd","rb","local","rotationIK","targetX","targetY","sc","sa","uniform","psx","psy","csx","os1","os2","l1","cwx","cwy","l2","pp","dd","td","sd","bendDir","aa","c2","ta","minAngle","minX","minDist","minY","maxAngle","maxX","maxDist","maxY","os","rotateMode","spacesCount","percentSpacing","setupLength","spaces","lengthSpacing","boneX","positions","boneY","offsetRotation","tip","curveCount","prevCurve","percentPosition","pathLength","world","curve","space","addBeforePosition","addAfterPosition","addCurvePosition","curveLength","segment","segments","skinBones","ikCount","transformCount","pathCount","constraintCount","ikConstraints","sortIkConstraint","transformConstraints","sortTransformConstraint","pathConstraints","sortPathConstraint","updateCache","boneName","slotName","optimizePositive","toShort","byteCount","charCount","chars","concatToString","SkeletonData","fileName","SkeletonInput","file","readSkin","linkedMesh","animations","newEntry","oldEntry","applyRelativeLocal","applyAbsoluteLocal","tb","tc","degRadReflect","modified","offsetShearY","applyRelativeWorld","applyAbsoluteWorld","findRegion","RegionAttachment","MeshAttachment","BoundingBoxAttachment","ClippingAttachment","PathAttachment","PointAttachment","parentMesh","regionUVs","textureWidth","textureHeight","localX2","localY2","localX","localY","localXCos","localYSin","localYCos","localXSin","localY2Sin","localY2Cos","localX2Cos","localX2Sin","offsetX","offsetY","vertexOffset","worldVertices","skip","wx","wy","skeletonBones","weight","verticeslength","lastX","twoColor","trianglesLength","polygonsCount","x3","y3","polygons","clipOutput","u3","v3","clipOutputLength","d0","clipOutputCount","clippedTrianglesItems","clipped","clippingArea","clippingVertices","edgeX","edgeX2","edgeY","edgeY2","inputVerticesLength","inputVertices","deltaX","inputY2","deltaY","inputX2","inputY","inputX","side2","ua","outputStart","originalOutput","clippingVerticesLast","verticesArray","indicesArray","isConcaveArray","p2","p3","previousIndex","isConcave","nextIndex","convexPolygons","convexPolygonsIndices","polygonIndices","fanBaseIndex","lastWinding","src","srcPos","dest","destPos","AtlasAttachmentLoader","atlas","ShowScene","Random","FSprites","maxSize","bunnys","bunny","random","currentTexture","bunnyCountText","line","easing","addTo","sceneInfos","sceneInfo","Scene","wait","startImageRatio","startRotation","println","changeToScene","stage","document","querySelector","ace","edit","detail","className","editor","setTheme","session","setMode","setReadOnly","launchImmediately","console","error","querySelectorAll","active","removeClass","sceneId","addClass","Ext","interpolate","nextDoubleInclusive","l","BoxShape","wabbitTexture","listOf","bunny1","bunny2","bunny3","bunny4","bunny5","BunnyContainer","font","ballTween","mn","my","mx","getOrNull","easings","anchor","touch","Scene1","Scene2","EasingsScene","FiltersScene","SimpleBox2dScene","SpineScene","GesturesScene","BunnymarkScene","SimpleUIScene","changeToSceneDefault","toList","readAtlas","readSkeletonBinary","AnimationStateData","stateData","state","centerOnStage","it","window","jsObject","fetch","text","e","message","setValue","content","dwindow","korgwCanvasQuery","sceneTree","textContent","createElement","groupDiv","appendChild","groupDivTree","scene","elementNode","title","href","addEventListener","dispatchEvent","CustomEvent","location","hash","trim","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call","globalThis","Function","__webpack_exports__"],"sourceRoot":""}